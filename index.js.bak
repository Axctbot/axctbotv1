/*
]=====> RISKA GANSS
*/
// ANAK ANJING PASTI YANG ATAS DI UBAH
// NGOTAK KOMTOL
// KASIH NAMA GW ASU
const {
    WAConnection,
   MessageType,
   Presence,
   MessageOptions,
   Mimetype,
   WALocationMessage,
   WA_MESSAGE_STUB_TYPES,
   ReconnectMode,
   ProxyAgent,
   GroupSettingChange,
   waChatKey,
   mentionedJid,
   processTime,
} = require('@adiwajshing/baileys');
const qrcode = require("qrcode-terminal") 
const moment = require("moment-timezone") 
const fs = require("fs") 
const crypto = require('crypto')
const imageToBase64 = require('image-to-base64')
const axios = require('axios')
const { color, bgcolor } = require('./lib/color')
const { animesaran } = require('./src/animesaran')
const { donasi } = require('./lib/donasi')
const { fetchJson } = require('./lib/fetcher')
const { recognize } = require('./lib/ocr')
const { listsurah } = require('./src/listsurah')
const { nekopoi } = require('./src/nekopoi')
const tambahan = require('./lib/tambahan.js')
const { kodenuklir } = require('./src/kodenuklir')
const { exec } = require("child_process")
const { wait, simih, getBuffer, h2k, generateMessageID, getGroupAdmins, getRandom, banner, start, info, success, close } = require('./lib/functions')
const tiktod = require('tiktok-scraper')
const brainly = require('brainly-scraper')
const ffmpeg = require('fluent-ffmpeg')
const path = require('path')
const ms = require('parse-ms')
const toMs = require('ms')
const cd = 4.32e+7
const { removeBackgroundFromImageFile } = require('remove.bg')
const { ind } = require('./language')

/********** MENU SETTING **********/
const vcard = 'BEGIN:VCARD\n' 
            + 'VERSION:3.0\n' 
            + 'FN:’è·é™·è¶·ÇÆ·é°·é™ ADMIN\n' 
            + 'ORG: Pengembang ’è·é™·è¶·ÇÆ·é°·é™ ;\n' 
            + 'TEL;type=CELL;type=VOICE;waid=6282323835783:+626282323835783\n' 
            + 'END:VCARD' 
blocked = []   
prefix = '#'
limitawal = 20
memberlimit = 0
cr = 'IG:sadboy.genzüìç\nYT:’è·é™·è¶·ÇÆ·é°·é™ ·è¥œ¥Õ≤·èÉüìç'

/*
]=====> SETTINGS <=====[
*/
const TobzKey = 'BotWeA'
const VhtearKey = 'RamlanID' 
const TechApi = '5BNIDH-1T0kPj-gWqG6q-sHtuHA-AWBSgZ'
const ZeksApi = 'apivinz'
const shizukaapi = 'itsmeiky633'
const BarBarKey = 'IDxO1TFYnKADlX4pxcHa' // APIKEY DOWNLOAD FILE
const apivhtear = 'alpinbotwa' // YANG DI YOUTUBE
const TobzApi = 'BotWeA' // JANGAN MAU ENAK DOANG
const XteamKey = 'APIKEY' // APIKEY XTEAM BELI SENDIRI:V
/*
]=====> SC BY RISKA ADMIN <=====[
*/

/*       

/*************************************/

/******** OWNER NUMBER**********/
const ownerNumber = ["62895355566000@s.whatsapp.net","62895355566000@s.whatsapp.net"] 
/************************************/

       
/*********** LOAD FILE ***********/
const _leveling = JSON.parse(fs.readFileSync('./database/group/leveling.json'))
const _level = JSON.parse(fs.readFileSync('./database/user/level.json'))
const _registered = JSON.parse(fs.readFileSync('./database/bot/registered.json'))
const welkom = JSON.parse(fs.readFileSync('./database/bot/welkom.json'))
const nsfw = JSON.parse(fs.readFileSync('./database/bot/nsfw.json'))
const samih = JSON.parse(fs.readFileSync('./database/bot/simi.json'))
const event = JSON.parse(fs.readFileSync('./database/bot/event.json'))
const _limit = JSON.parse(fs.readFileSync('./database/user/limit.json'))
const uang = JSON.parse(fs.readFileSync('./database/user/uang.json'))
const ban = JSON.parse(fs.readFileSync('./database/user/banned.json'))
const antilink = JSON.parse(fs.readFileSync('./database/group/antilink.json'))
const antifirtex = JSON.parse(fs.readFileSync('./database/group/antifirtex.json'))
/*********** END LOAD ***********/

/*
‚ô•THANKS TO‚ô•
RAMLAN CHüìç
AMPIBI GAMINGüìç
FADHIL GRAPHYüìç
XPTNüìç
*/

/********** FUNCTION ***************/
const getLevelingXp = (sender) => {
            let position = false
            Object.keys(_level).forEach((i) => {
                if (_level[i].id === sender) {
                    position = i
                }
            })
            if (position !== false) {
                return _level[position].xp
            }
        }

        const getLevelingLevel = (sender) => {
            let position = false
            Object.keys(_level).forEach((i) => {
                if (_level[i].id === sender) {
                    position = i
                }
            })
            if (position !== false) {
                return _level[position].level
            }
        }

        const getLevelingId = (sender) => {
            let position = false
            Object.keys(_level).forEach((i) => {
                if (_level[i].id === sender) {
                    position = i
                }
            })
            if (position !== false) {
                return _level[position].id
            }
        }

        const addLevelingXp = (sender, amount) => {
            let position = false
            Object.keys(_level).forEach((i) => {
                if (_level[i].id === sender) {
                    position = i
                }
            })
            if (position !== false) {
                _level[position].xp += amount
                fs.writeFileSync('./database/user/level.json', JSON.stringify(_level))
            }
        }

        const addLevelingLevel = (sender, amount) => {
            let position = false
            Object.keys(_level).forEach((i) => {
                if (_level[i].id === sender) {
                    position = i
                }
            })
            if (position !== false) {
                _level[position].level += amount
                fs.writeFileSync('./database/user/level.json', JSON.stringify(_level))
            }
        }

        const addLevelingId = (sender) => {
            const obj = {id: sender, xp: 1, level: 1}
            _level.push(obj)
            fs.writeFileSync('./database/user/level.json', JSON.stringify(_level))
        }
             
         const getRegisteredRandomId = () => {
            return _registered[Math.floor(Math.random() * _registered.length)].id
        }

        const addRegisteredUser = (userid, sender, age, time, serials) => {
            const obj = { id: userid, name: sender, age: age, time: time, serial: serials }
            _registered.push(obj)
            fs.writeFileSync('./database/bot/registered.json', JSON.stringify(_registered))
        }

        const createSerial = (size) => {
            return crypto.randomBytes(size).toString('hex').slice(0, size)
        }

        const checkRegisteredUser = (sender) => {
            let status = false
            Object.keys(_registered).forEach((i) => {
                if (_registered[i].id === sender) {
                    status = true
                }
            })
            return status
        }
        
        const addATM = (sender) => {
        	const obj = {id: sender, uang : 0}
            uang.push(obj)
            fs.writeFileSync('./database/user/uang.json', JSON.stringify(uang))
        }
        
        const addKoinUser = (sender, amount) => {
            let position = false
            Object.keys(uang).forEach((i) => {
                if (uang[i].id === sender) {
                    position = i
                }
            })
            if (position !== false) {
                uang[position].uang += amount
                fs.writeFileSync('./database/user/uang.json', JSON.stringify(uang))
            }
        }
        
        const checkATMuser = (sender) => {
        	let position = false
            Object.keys(uang).forEach((i) => {
                if (uang[i].id === sender) {
                    position = i
                }
            })
            if (position !== false) {
                return uang[position].uang
            }
        }
        
        const bayarLimit = (sender, amount) => {
        	let position = false
            Object.keys(_limit).forEach((i) => {
                if (_limit[i].id === sender) {
                    position = i
                }
            })
            if (position !== false) {
                _limit[position].limit -= amount
                fs.writeFileSync('./database/user/limit.json', JSON.stringify(_limit))
            }
        }
        	
        const confirmATM = (sender, amount) => {
        	let position = false
            Object.keys(uang).forEach((i) => {
                if (uang[i].id === sender) {
                    position = i
                }
            })
            if (position !== false) {
                uang[position].uang -= amount
                fs.writeFileSync('./database/user/uang.json', JSON.stringify(uang))
            }
        }
        
         const limitAdd = (sender) => {
             let position = false
            Object.keys(_limit).forEach((i) => {
                if (_limit[i].id == sender) {
                    position = i
                }
            })
            if (position !== false) {
                _limit[position].limit += 1
                fs.writeFileSync('./database/user/limit.json', JSON.stringify(_limit))
            }
        }
        
        
         
function kyun(seconds){
  function pad(s){
    return (s < 10 ? '0' : '') + s;
  }
  var hours = Math.floor(seconds / (60*60));
  var minutes = Math.floor(seconds % (60*60) / 60);
  var seconds = Math.floor(seconds % 60);

  //return pad(hours) + ':' + pad(minutes) + ':' + pad(seconds)
  return `${pad(hours)} Jam ${pad(minutes)} Menit ${pad(seconds)} Detik`
}
/********** FUNCTION ***************/

const client = new WAConnection()
   client.on('qr', qr => {
   qrcode.generate(qr, { small: true })
   console.log(color('üçÅ','white'),color('‚ô•','red'),color('üçÅ','white'),color('JANGAN LUPA SUBS CHANEL','white'),color('YOU','red'),color('TUBE','white'),color('’è·é™·è¶·ÇÆ·é°·é™ BOTZ','yellow'))
})

client.on('credentials-updated', () => {
	const authInfo = client.base64EncodedAuthInfo()
   console.log(`credentials updated!`)
   fs.writeFileSync('./session.json', JSON.stringify(authInfo, null, '\t'))
})
fs.existsSync('./session.json') && client.loadAuthInfo('./session.json')
client.connect();


client.on('group-participants-update', async (anu) => {
		if (!welkom.includes(anu.jid)) return
		try {
			const mdata = await client.groupMetadata(anu.jid)
			console.log(anu)
			if (anu.action == 'add') {
				num = anu.participants[0]
				try {
					ppimg = await client.getProfilePicture(`${anu.participants[0].split('@')[0]}@c.us`)
				} catch {
					ppimg = 'https://i0.wp.com/www.gambarunik.id/wp-content/uploads/2019/06/Top-Gambar-Foto-Profil-Kosong-Lucu-Tergokil-.jpg'
				}
				teks = `*WELCOME @${num.split('@')[0]}\üëã*\n*Jangan Lupa Introü§ó*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n*‚û∏ Nama:*\n*‚û∏ Umur:*\n*‚û∏ gender:*\n*‚û∏ Askot:*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n*Note: KETIK ,HELP UNTUK MENU BOT*`
				let buff = await getBuffer(ppimg)
				const bot = fs.readFileSync('./assets/bot');
				client.sendMessage(mdata.id, buff, MessageType.image, {caption: teks, contextInfo: {"mentionedJid": [num]}})
			} else if (anu.action == 'remove') {
				num = anu.participants[0]
				try {
					ppimg = await client.getProfilePicture(`${num.split('@')[0]}@c.us`)
				} catch {
					ppimg = 'https://i0.wp.com/www.gambarunik.id/wp-content/uploads/2019/06/Top-Gambar-Foto-Profil-Kosong-Lucu-Tergokil-.jpg'
				}
				teks = `Bye @${num.split('@')[0]} `
				let buff = await getBuffer(ppimg)
				client.sendMessage(mdata.id, buff, MessageType.image, {caption: teks, contextInfo: {"mentionedJid": [num]}})
			}
		} catch (e) {
			console.log('Error : %s', color(e, 'red'))
		}
	})
	client.on('CB:Blocklist', json => {
		if (blocked.length > 2) return
	    for (let i of json[1].blocklist) {
	    	blocked.push(i.replace('c.us','s.whatsapp.net'))
	    }
	})

	client.on('message-new', async (mek) => {
		try {
			if (!mek.message) return
			if (mek.key && mek.key.remoteJid == 'status@broadcast') return
			if (mek.key.fromMe) return
			global.blocked
			const content = JSON.stringify(mek.message)
			const from = mek.key.remoteJid
			const type = Object.keys(mek.message)[0]
			const { text, extendedText, contact, location, liveLocation, image, video, sticker, document, audio, product } = MessageType
			const time = moment.tz('Asia/Jakarta').format('DD/MM HH:mm:ss')
			const timi = moment.tz('Asia/Jakarta').add(30, 'days').calendar();
			const timu = moment.tz('Asia/Jakarta').add(20, 'days').calendar();
            body = (type === 'conversation' && mek.message.conversation.startsWith(prefix)) ? mek.message.conversation : (type == 'imageMessage') && mek.message.imageMessage.caption.startsWith(prefix) ? mek.message.imageMessage.caption : (type == 'videoMessage') && mek.message.videoMessage.caption.startsWith(prefix) ? mek.message.videoMessage.caption : (type == 'extendedTextMessage') && mek.message.extendedTextMessage.text.startsWith(prefix) ? mek.message.extendedTextMessage.text : ''
			budy = (type === 'conversation') ? mek.message.conversation : (type === 'extendedTextMessage') ? mek.message.extendedTextMessage.text : ''
			const command = body.slice(1).trim().split(/ +/).shift().toLowerCase()
			var tas = (type === 'conversation' && mek.message.conversation) ? mek.message.conversation : (type == 'imageMessage') && mek.message.imageMessage.caption ? mek.message.imageMessage.caption : (type == 'videoMessage') && mek.message.videoMessage.caption ? mek.message.videoMessage.caption : (type == 'extendedTextMessage') && mek.message.extendedTextMessage.text ? mek.message.extendedTextMessage.text : ''
			const mesejAnti = tas.slice(0).trim().split(/ +/).shift().toLowerCase()
			var pes = (type === 'conversation' && mek.message.conversation) ? mek.message.conversation : (type == 'imageMessage') && mek.message.imageMessage.caption ? mek.message.imageMessage.caption : (type == 'videoMessage') && mek.message.videoMessage.caption ? mek.message.videoMessage.caption : (type == 'extendedTextMessage') && mek.message.extendedTextMessage.text ? mek.message.extendedTextMessage.text : ''
			const messagesC = pes.slice(0).trim().split(/ +/).shift().toLowerCase()
			const args = body.trim().split(/ +/).slice(1)
			const isCmd = body.startsWith(prefix)
			const tescuk = ["0@s.whatsapp.net"]
			const isGroup = from.endsWith('@g.us')
			const q = args.join(' ')
			const botNumber = client.user.jid
			const sender = isGroup ? mek.participant : mek.key.remoteJid
			pushname = client.contacts[sender] != undefined ? client.contacts[sender].vname || client.contacts[sender].notify : undefined
			const groupMetadata = isGroup ? await client.groupMetadata(from) : ''
			const groupName = isGroup ? groupMetadata.subject : ''
			const groupId = isGroup ? groupMetadata.jid : ''
			const groupMembers = isGroup ? groupMetadata.participants : ''
			const groupDesc = isGroup ? groupMetadata.desc : ''
            const groupAdmins = isGroup ? getGroupAdmins(groupMembers) : ''
            
            /************** SCURITY FEATURE ************/
            const isEventon = isGroup ? event.includes(from) : false
            const isRegistered = checkRegisteredUser(sender)
	    const isBanned = ban.includes(sender)
            const isBotGroupAdmins = groupAdmins.includes(botNumber) || false
            const isLevelingOn = isGroup ? _leveling.includes(from) : false
			const isGroupAdmins = groupAdmins.includes(sender) || false
			const isWelkom = isGroup ? welkom.includes(from) : false
			const isNsfw = isGroup ? nsfw.includes(from) : false
			const isSimi = isGroup ? samih.includes(from) : false
			const isAntiLink = isGroup ? antilink.includes(from) : false
			const isAntiFirtex= isGroup ? antifirtex.includes(from) : false
			const isOwner = ownerNumber.includes(sender)
			const isImage = type === 'imageMessage'
			const isUrl = (url) => {
			    return url.match(new RegExp(/https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)/, 'gi'))
			}
			const reply = (teks) => {
				client.sendMessage(from, teks, text, {quoted:mek})
			}
			const sendMess = (hehe, teks) => {
				client.sendMessage(hehe, teks, text)
			}
			const mentions = (teks, memberr, id) => {
				(id == null || id == undefined || id == false) ? client.sendMessage(from, teks.trim(), extendedText, {contextInfo: {"mentionedJid": memberr}}) : client.sendMessage(from, teks.trim(), extendedText, {quoted: mek, contextInfo: {"mentionedJid": memberr}})
			}
			const sendImage = (teks) => {
		    client.sendMessage(from, teks, image, {quoted:mek})
		    }
		    const costum = (pesan, tipe, target, target2) => {
			client.sendMessage(from, pesan, tipe, {quoted: { key: { fromMe: false, participant: `${target}`, ...(from ? { remoteJid: from } : {}) }, message: { conversation: `${target2}` }}})
			}
	        /*****************END SCURITY FEATURE ********/
			
			
			//role level
        const levelRole = getLevelingLevel(sender)
        var role = 'Copper V'
        if (levelRole <= 3) {
            role = 'Copper IV'
        } else if (levelRole <= 5) {
            role = 'Copper III'
        } else if (levelRole <= 7) {
            role = 'Copper II'
        } else if (levelRole <= 9) {
            role = 'Copper I'
        } else if (levelRole <= 10) {
            role = 'Silver V'
        } else if (levelRole <= 11) {
            role = 'Silver IV'
        } else if (levelRole <= 12) {
            role = 'Silver III'
        } else if (levelRole <= 13) {
            role = 'Silver II'
        } else if (levelRole <= 13) {
            role = 'Silver I'
        } else if (levelRole <= 16) {
            role = 'Gold V'
        } else if (levelRole <= 17) {
            role = 'Gold IV'
        } else if (levelRole <= 19) {
            role = 'Gold III'
        } else if (levelRole <= 20) {
            role = 'Gold II'
        } else if (levelRole <= 21) {
            role = 'Gold I'
        } else if (levelRole <= 22) {
            role = 'Platinum V'
        } else if (levelRole <= 24) {
            role = 'Platinum IV'
        } else if (levelRole <= 25) {
            role = 'Platinum III'
        } else if (levelRole <= 26) {
            role = 'Platinum II'
        } else if (levelRole <= 27) {
            role = 'Platinum I'
        } else if (levelRole <= 30) {
            role = 'Exterminator'
        }

			
	        //function leveling
            if (isGroup && isRegistered && isLevelingOn) {
            const currentLevel = getLevelingLevel(sender)
            const checkId = getLevelingId(sender)
            try {
                if (currentLevel === undefined && checkId === undefined) addLevelingId(sender)
                const amountXp = Math.floor(Math.random() * 10) + 500
                const requiredXp = 5000 * (Math.pow(2, currentLevel) - 1)
                const getLevel = getLevelingLevel(sender)
                addLevelingXp(sender, amountXp)
                if (requiredXp <= getLevelingXp(sender)) {
                    addLevelingLevel(sender, 1)
                    bayarLimit(sender, 3)
                    await reply(ind.levelup(pushname, sender, getLevelingXp,  getLevel, getLevelingLevel, role))
                }
            } catch (err) {
                console.error(err)
            }
        }
          //function check limit
          const checkLimit = (sender) => {
          	let found = false
                    for (let lmt of _limit) {
                        if (lmt.id === sender) {
                            let limitCounts = limitawal - lmt.limit
                            if (limitCounts <= 0) return client.sendMessage(from,`Limit request anda sudah habis\n\n_Note : limit bisa di dapatkan dengan cara ${prefix}buylimit dan dengan naik level_`, text,{ quoted: mek})
                            client.sendMessage(from, ind.limitcount(limitCounts), text, { quoted : mek})
                            found = true
                        }
                    }
                    if (found === false) {
                        let obj = { id: sender, limit: 0 }
                        _limit.push(obj)
                        fs.writeFileSync('./database/user/limit.json', JSON.stringify(_limit))
                        client.sendMessage(from, ind.limitcount(limitCounts), text, { quoted : mek})
                    }
				}
				
			//funtion limited
           const isLimit = (sender) =>{ 
		      let position = false
              for (let i of _limit) {
              if (i.id === sender) {
              	let limits = i.limit
              if (limits >= limitawal ) {
              	  position = true
                    client.sendMessage(from, ind.limitend(pushname), text, {quoted: mek})
                    return true
              } else {
              	_limit
                  position = true
                  return false
               }
             }
           }
           if (position === false) {
           	const obj = { id: sender, limit: 0 }
                _limit.push(obj)
                fs.writeFileSync('./database/user/limit.json',JSON.stringify(_limit))
           return false
       }
     }
        
            if (isGroup) {
				try {
					const getmemex = groupMembers.length
					    if (getmemex <= memberlimit) {
                            client.groupLeave(from)
					    }
		       } catch (err) { console.error(err)  }
        }
      
            //function balance
            if (isRegistered ) {
            const checkATM = checkATMuser(sender)
            try {
                if (checkATM === undefined) addATM(sender)
                const uangsaku = Math.floor(Math.random() * 10) + 90
                addKoinUser(sender, uangsaku)
            } catch (err) {
                console.error(err)
            }
        }
           
            
	// ANTI LINK GRUP
               	        if (mesejAnti.includes("://chat.whatsapp.com/")){
		        if (!isGroup) return
		        if (!isAntiLink) return
		        if (isGroupAdmins) return reply('Admin Grup Mah Bebas:D')
		        client.updatePresence(from, Presence.composing)
		        if (mesejAnti.includes(",izinkak")) return reply("Iya kak jangan spam ya")
		        var kic = `${sender.split("@")[0]}@s.whatsapp.net`
		        reply(`Maaf kak ${sender.split("@")[0]} Grup ini anti link, siap siap kamu di kick`)
		        setTimeout( () => {
			        client.groupRemove(from, [kic]).catch((e)=>{reply(`*’è·é™·è¶·ÇÆ·é°·é™  HARUS JADI ADMIN‚ùó*`)})
		        }, 3000)
		        setTimeout( () => {
			        client.updatePresence(from, Presence.composing)
			        reply("Hedsot....")
		        }, 2000)
		        setTimeout( () => {
			        client.updatePresence(from, Presence.composing)
			        reply("Bismillah...")
		        }, 1000)
		        setTimeout( () => {
			        client.updatePresence(from, Presence.composing)
			        reply("Ready?...")
		        }, 0)
		  }


             //kolor
			colors = ['red','white','black','blue','yellow','green']
			
			//detector media
			const isMedia = (type === 'imageMessage' || type === 'videoMessage')
			const isQuotedImage = type === 'extendedTextMessage' && content.includes('imageMessage')
			const isQuotedVideo = type === 'extendedTextMessage' && content.includes('videoMessage')
			const isQuotedSticker = type === 'extendedTextMessage' && content.includes('stickerMessage')
			
			//private chat message
			if (!isGroup && isCmd) console.log('\x1b[1;31m~\x1b[1;37m>', '[\x1b[1;32mEXEC\x1b[1;37m]', time, color(command), 'from', color(sender.split('@')[0]), 'args :', color(args.length))
			if (!isGroup && !isCmd) console.log('\x1b[1;31m~\x1b[1;37m>', '[\x1b[1;31mRECV\x1b[1;37m]', time, color('Message'), 'from', color(sender.split('@')[0]), 'args :', color(args.length))
			
			//group message
			if (isCmd && isGroup) console.log('\x1b[1;31m~\x1b[1;37m>', '[\x1b[1;32mEXEC\x1b[1;37m]', time, color(command), 'from', color(sender.split('@')[0]), 'in', color(groupName), 'args :', color(args.length))
			if (!isCmd && isGroup) console.log('\x1b[1;31m~\x1b[1;37m>', '[\x1b[1;31mRECV\x1b[1;37m]', time, color('Message'), 'from', color(sender.split('@')[0]), 'in', color(groupName), 'args :', color(args.length))
			switch(command) {
			case 'katailham':
				if (!isRegistered) return reply(ind.noregis())
                if (isLimit(sender)) return reply(ind.limitend(pusname))
				anu = await fetchJson(`http://itsmeikygans.my.id/bacotanilham?apikey=${apikey}`, {method: 'get'})
				kata = anu.result
				client.sendMessage(from, kata, text, {quoted: mek})
				await limitAdd(sender)
				break
				case 'spamcall':
			if (isBanned) return reply(ind.baned())
			if (isLimit(sender)) return reply(limitend(pushname2))
			if (!isRegistered) return reply(ind.noregis())
			call = `${body.slice(11)}`
			anu = await fetchJson(`https://videfikri.com/api/call/?nohp=${call}`, {method: 'get'})
			client.sendMessage(from, `${anu.result.logs}`, text, {quoted: mek})
			await limitAdd(sender) 
			break  
				case 'fakta':
		if (!isGroup) return reply(ind.groupo())
               if (!isRegistered) return reply(ind.noregis())
               data = await fetchJson('http://xptnewapi.xp3.biz/Faktaaas.php?apikey=xptn3')
               hasil = data.result
                client.sendMessage(from, hasil, text, {quoted: mek})
				case 'randomquran':
			data = await fetchJson(`https://api.zeks.xyz/api/randomquran`)
			teks = `Nama: ${data.result.nama}\nArti: ${data.result.arti}\nayat: ${data.result.ayat}\nAsma: ${data.result.asma}\nRukuk: ${data.result.rukuk}\nNomor: ${data.result.nomor}\nType: ${data.result.type}\nKeterangan: ${data.result.keterangan}`
			buffs = await getBuffer(data.result.audio)
		    client.sendMessage(from, `${teks}`, MessageType.text, {quoted: mek})
			client.sendMessage(from, buffs, audio, {mimetype: 'audio/mp4', filename: `quran.mp3`, quoted: mek})
			break
				case 'nekopoi':
			if (!isRegistered) return reply(ind.noregis())
			if (isLimit(sender)) return reply(ind.limitend(pusname))
			if (!isNsfw) return reply(ind.nsfwoff())
			if (!isGroup) return reply(ind.groupo()) 
              	    if (args.length < 1) return reply('teksnya mana gan?')
                    teks = body.slice(9)
                    anu = await fetchJson(`https://api.vhtear.com/nekosearch?query=${teks}&apikey=${apivhtear}`, {method: 'get'})
			reply(ind.wait())
                    teks = `===============\n`
                    for (let neko of anu.result) {
                    teks += `Title: ${neko.title}\nDeskripsi: ${neko.detail}\n===============\n`
                    }
                    reply(teks.trim())
			     	await limitAdd(sender) 
			     	break  
				
				case 'jomblo':
                                         if (!isRegistered) return reply(ind.noregis())
                                        var imgbb = require('imgbb-uploader')
                                         if ((isMedia && !mek.message.videoMessage || isQuotedImage) && args.length == 0) {
                                         ger = isQuotedImage ? JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo : mek
                                         reply(mess.wait)
                                         owgi = await client.downloadAndSaveMediaMessage(ger)
                                         anu = await imgbb("727e7e43f6cda1dfb85d888522fd4ce1", owgi)
                                        teks = `${anu.display_url}`
                                        ranp = getRandom('.gif')
                                        rano = getRandom('.webp')
                                        anu1 = `https://some-random-api.ml/animu/pat?avatar=${teks}`
                                         exec(`wget ${anu1} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=20 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
                                                fs.unlinkSync(ranp)
                                                if (err) return reply(mess.error.stick)
                                                nobg = fs.readFileSync(rano)
                                                client.sendMessage(from, nobg, sticker, {quoted: mek})
                                                fs.unlinkSync(rano)
                                        })
                                    
                                             } else {
                                                 reply('Gunakan foto!')
                                          }
                                             break
				case 'spamsms':
			if (isBanned) return reply(ind.baned())
			if (isLimit(sender)) return reply(limitend(pushname2))
			if (!isRegistered) return reply(ind.noregis())
			sms = `${body.slice(9)}`
			nomer = sms.split("/")[0];
			jumlah = sms.split("/")[1];
			anu = await fetchJson(`http://itsmeikygans.my.id/spamsms?apikey=${ItsApi}&no=${body.slice(10)}&jum=${jumlah}`, {method: 'get'})
			client.sendMessage(from, `${anu.logs}`, text, {quoted: mek})
			await limitAdd(sender) 
			break  
				case 'randomhusbu':
					if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					reply(ind.wait())
					shizuka = await fetchJson(`https://api-shizuka.herokuapp.com/husbu?apikey=${shizukaapi}`)
					shizukaa = await getBuffer(shizuka.result)
					client.sendMessage(from, shizukaa, image, {caption: 'Nih kak', quoted: mek})
					await limitAdd(sender)
					break
				case 'randomgame':
					if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					reply(ind.wait())
					shizuka = await fetchJson(`https://api-shizuka.herokuapp.com/wpgame?apikey=${shizukaapi}`)
					shizukaa = await getBuffer(shizuka.result)
					client.sendMessage(from, shizukaa, image, {caption: 'Nih kak', quoted: mek})
					await limitAdd(sender)
					break
				    case 'nsfwtrap':
				    try {
				    if (isBanned) return reply(ind.baned())
                                if (!isRegistered) return reply(ind.noregis())
				    if (isLimit(sender)) return reply(limitend(pushname2))
						if (!isNsfw) return reply(' *FALSE* ')
						res = await fetchJson(`https://tobz-api.herokuapp.com/api/nsfwtrap?apikey=${TobzApi}`, {method: 'get'})
						buffer = await getBuffer(res.result)
						client.sendMessage(from, buffer, image, {quoted: mek, caption: '```dosa gk ditanggung bot```'})
					} catch (e) {
						console.log(`Error :`, color(e,'red'))
						reply(' *ERROR* ')
					}
					await limitAdd(sender) 
					break 
				case 'randomanime3':
					if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					reply(ind.wait())
					shizuka = await fetchJson(`https://api-shizuka.herokuapp.com/randomanime?apikey=${shizukaapi}`)
					shizukaa = await getBuffer(shizuka.result)
					client.sendMessage(from, shizukaa, image, {caption: 'Nih kak', quoted: mek})
					await limitAdd(sender)
					break
				case 'nulis3':
				case 'tulis3':
				  client.updatePresence(from, Presence.composing)
				if (isBanned) return reply(ind.baned())
                                if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(limitend(pushname2))
			if (args.length < 1) return reply(`${name} Harus Nulis Apa Kak??`)
			reply(ind.wait())
					tulis = body.slice(7)
				  nama = tulis.split("/")[0];
					kelas = tulis.split("/")[1];
					isi = tulis.split("/")[2];
					nulis = await getBuffer(`https://api.zeks.xyz/api/magernulis?nama=${nama}&kelas=${kelas}&text=${isi}&tinta=4`, {method: 'get'})
					client.sendMessage(from, nulis, image, {quoted: mek})
					await limitAdd(sender) 
					break  
				case 'cshadow':
					if (isBanned) return reply(ind.baned())
                                if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(limitend(pushname2))
					shad = `${body.slice(9)}`
					reply(ind.wait())
					ssha = await getBuffer(`https://api-anoncybfakeplayer.herokuapp.com/photooxy/shadowtext?text=${shad}`)
					client.sendMessage(from, ssha, image, {caption: 'Nih kak', quoted: mek})
					await limitAdd(sender) 
					break 
				case 'cminion':
					if (isBanned) return reply(ind.baned())
                                if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(limitend(pushname2))
					minio = `${body.slice(9)}`
					reply(ind.wait())
					minn = await getBuffer(`https://api-anoncybfakeplayer.herokuapp.com/textpro/miniontext?text=${minio}`)
					client.sendMessage(from, minn, image, {caption: 'Nih kak', quoted: mek})
					await limitAdd(sender) 
					break 
				case 'blackpink':
					if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					reply(ind.wait())
					shizuka = await fetchJson(`https://api-shizuka.herokuapp.com/blackpink?apikey=${shizukaapi}`)
					shizukaa = await getBuffer(shizuka.result)
					client.sendMessage(from, shizukaa, image, {caption: 'Nih kak', quoted: mek})
					await limitAdd(sender)
					break
				case 'cneon':
					if (isBanned) return reply(ind.baned())
                                if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(limitend(pushname2))
					nneoo = `${body.slice(7)}`
					reply(ind.wait())
					nooe = await getBuffer(`https://api-anoncybfakeplayer.herokuapp.com/textpro/neontext?text=${nneoo}`)
					client.sendMessage(from, nooe, image, {caption: 'Nih kak', quoted: mek})
					await limitAdd(sender) 
					break 
				case 'cneongreen':
					if (isBanned) return reply(ind.baned())
                                if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(limitend(pushname2))
					grre = `${body.slice(12)}`
					reply(ind.wait())
					gree = await getBuffer(`https://api-anoncybfakeplayer.herokuapp.com/textpro/greenneontext?text=${grre}`)
					client.sendMessage(from, gree, image, {caption: 'Nih kak', quoted: mek})
					await limitAdd(sender) 
					break 
				case 'cneon2':
					if (isBanned) return reply(ind.baned())
                                if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(limitend(pushname2))
					duadua = `${body.slice(8)}`
					reply(ind.wait())
					duaa = await getBuffer(`https://api-anoncybfakeplayer.herokuapp.com/textpro/neonwithgalaxytext?text=${duadua}`)
					client.sendMessage(from, duaa, image, {caption: 'Nih kak', quoted: mek})
					await limitAdd(sender) 
					break 
				case 'c3d':
					if (isBanned) return reply(ind.baned())
                                if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(limitend(pushname2))
					dimen = `${body.slice(5)}`
					reply(ind.wait())
					tigaa = await getBuffer(`https://api-anoncybfakeplayer.herokuapp.com/textpro/3dgradientstext?text=${dimen}`)
					client.sendMessage(from, tigaa, image, {caption: 'Nih kak', quoted: mek})
					await limitAdd(sender) 
					break 
					case 'croman':
                if (isBanned) return reply(ind.baned())
                                if (!isRegistered) return reply(ind.noregis())
                if (isLimit(sender)) return reply(limitend(pushname2))
                roman = `${body.slice(8)}`
                     if (args.length < 1) return reply('Teksnya mana gan??')
                     if (args.length > 10) return reply('karakter minimal 10')
                     buff = await getBuffer(`https://api.vhtear.com/romancetext?text=${roman}&apikey=${VthearApi}`, {method: 'get'})
                     client.sendMessage(from, buff, image, {quoted: mek})
                  await limitAdd(sender) 
                  break 
					case 'clove':
					  if (isBanned) return reply(ind.baned())
                                if (!isRegistered) return reply(ind.noregis())
					  if (isLimit(sender)) return reply(limitend(pushname2))
					  if (args.length < 1) return reply('Teksnya mana gan??')
                     if (args.length > 10) return reply('karakter minimal 10')
					 love = `${body.slice(7)}`
					 buff = await getBuffer(`https://api.vhtear.com/lovemessagetext?text=${love}&apikey=${VthearApi}`, {method: 'get'})
					 client.sendMessage(from, buff, image, {quoted: mek})
					 await limitAdd(sender)
					 break 
				case 'cmwolf':
					  if (isBanned) return reply(ind.baned())
                                if (!isRegistered) return reply(ind.noregis())
					  if (isLimit(sender)) return reply(limitend(pushname2))
					  if (args.length < 1) return reply('Teksnya mana gan??')
                     if (args.length > 10) return reply('karakter minimal 10')
					 mwolf = `${body.slice(8)}`
					 anu = await fetchJson(`http://itsmeikygans.my.id/wolfmetal?apikey=${ItsApi}&text=${mwolf}`, {method: 'get'})
					 cmwolf = await getBuffer(anu.result)
					 client.sendMessage(from, cmwolf, image, {quoted: mek})
					 await limitAdd(sender)
					 break  
				case 'cml':
				if (isBanned) return reply(ind.baned())
                                if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(limitend(pushname2))
				if (args.length < 1) return reply('Teksnya mana gan??')
                     if (args.length > 10) return reply('karakter minimal 10')
					cml = `${body.slice(5)}`
					buffer = await getBuffer(`https://api.vhtear.com/logoml?hero=ling&text=${cml}&apikey=${VthearApi}`, {method: 'get'})
					client.sendMessage(from, buffer, image, {quoted: mek})
					await limitAdd(sender) 
					break  
				case 'cpubg':
				if (isBanned) return reply(ind.baned())
                                if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(limitend(pushname2))
				if (args.length < 1) return reply('Teksnya mana gan??')
                     if (args.length > 10) return reply('karakter minimal 10')
					cpubg = `${body.slice(7)}`
					cpubg1 = cpubg.split("/")[0];
					cpubg2 = cpubg.split("/")[1];
					anu = await fetchJson(`https://tobz-api.herokuapp.com/api/photooxy?theme=pubg&text1=${cpubg1}&text2=${cpubg2}&apikey=${TobzApi}`, {method: 'get'})
					cpubg = await getBuffer(anu.result)
					client.sendMessage(from, cpubg, image, {quoted: mek})
					await limitAdd(sender) 
					break  
				case 'csky':
				if (isBanned) return reply(ind.baned())
                                if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(limitend(pushname2))
					sky = `${body.slice(6)}`
					if (args.length < 1) return reply('Teksnya mana gan??')
                     if (args.length > 10) return reply('karakter minimal 10')
					anu = await fetchJson(`https://api.zeks.xyz/api/skytext?text=${sky}&apikey=${ZeksApi}`, {method: 'get'})
					gools7 = await getBuffer(anu.result)
					client.sendMessage(from, gools7, image, {quoted: mek})
					await limitAdd(sender) 
					break 
				case 'cwooden':
				if (isBanned) return reply(ind.baned())
                                if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(limitend(pushname2))
					wood = `${body.slice(9)}`
					if (args.length < 1) return reply('Teksnya mana gan??')
                     if (args.length > 10) return reply('karakter minimal 10')
					anu = await fetchJson(`https://api.zeks.xyz/api/woodentext?text=${wood}&apikey=${ZeksApi}`, {method: 'get'})
					gools6 = await getBuffer(anu.result)
					client.sendMessage(from, gools6, image, {quoted: mek})
					await limitAdd(sender) 
					break 
				case 'ccrossfire':
				if (isBanned) return reply(ind.baned())
                                if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(limitend(pushname2))
					cf = `${body.slice(12)}`
					if (args.length < 1) return reply('Teksnya mana gan??')
                     if (args.length > 10) return reply('karakter minimal 10')
					anu = await fetchJson(`https://api.zeks.xyz/api/crosslogo?text=${cf}&apikey=${ZeksApi}`, {method: 'get'})
					gools5 = await getBuffer(anu.result)
					client.sendMessage(from, gools5, image, {quoted: mek})
					await limitAdd(sender) 
					break 
				case 'cflower':
				if (isBanned) return reply(ind.baned())
                                if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(limitend(pushname2))
					flower = `${body.slice(9)}`
					if (args.length < 1) return reply('Teksnya mana gan??')
                     if (args.length > 10) return reply('karakter minimal 10')
					anu = await fetchJson(`https://api.zeks.xyz/api/flowertext?text=${flower}&apikey=${ZeksApi}`, {method: 'get'})
					gools3 = await getBuffer(anu.result)
					client.sendMessage(from, gools3, image, {quoted: mek})
					await limitAdd(sender) 
					break  
				case 'cnaruto':
				if (isBanned) return reply(ind.baned())
                                if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(limitend(pushname2))
					naruto = `${body.slice(9)}`
					if (args.length < 1) return reply('Teksnya mana gan??')
                     if (args.length > 10) return reply('karakter minimal 10')
					anu = await fetchJson(`https://api.zeks.xyz/api/naruto?text=${naruto}&apikey=${ZeksApi}`, {method: 'get'})
					gools4 = await getBuffer(anu.result)
					client.sendMessage(from, gools4, image, {quoted: mek})
					await limitAdd(sender) 
					break  
				case 'randomanime2':
           			if (isBanned) return reply(ind.baned())
                                if (!isRegistered) return reply(ind.noregis())
                                    if (isLimit(sender)) return reply(limitend(pushname2))
					anu = await fetchJson(`https://tobz-api.herokuapp.com/api/randomanime?apikey=${TobzApi}`, {method: 'get'})
					reply(ind.wait())
					pok = await getBuffer(anu.result)
					client.sendMessage(from, pok, image, { quoted: mek , caption: '*NIH RANIMENYA*'})
					await limitAdd(sender) 
					break  
				case 'kucing':
                if (isBanned) return reply(ind.baned())
                                if (!isRegistered) return reply(ind.noregis())
                if (isLimit(sender)) return reply(limitend(pushname2))
					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=kucing`, {method: 'get'})
					reply(ind.wait())
					n = JSON.parse(JSON.stringify(anu));
					nimek =  n[Math.floor(Math.random() * n.length)];
					pok = await getBuffer(nimek)
					client.sendMessage(from, pok, image, { quoted: mek , caption: '*meongüò∫*'})
					await limitAdd(sender) 
					break 
			    case 'nsfwneko':
				    try {
				    if (isBanned) return reply(ind.baned())
                                if (!isRegistered) return reply(ind.noregis())
				    if (isLimit(sender)) return reply(limitend(pushname2))
						if (!isNsfw) return reply(' *FALSE* ')
						res = await fetchJson(`https://tobz-api.herokuapp.com/api/nsfwneko?apikey=${TobzApi}`, {method: 'get'})
						buffer = await getBuffer(res.result)
						client.sendMessage(from, buffer, image, {quoted: mek, caption: 'Dosa Gk Ditanggung Bot'})
					} catch (e) {
						console.log(`Error :`, color(e,'red'))
						reply(' *ERROR* ')
					}
					await limitAdd(sender) 
					break 
			case 'loli2':
				    try {
				    if (isBanned) return reply(ind.baned())
                                if (!isRegistered) return reply(ind.noregis())
				    if (isLimit(sender)) return reply(limitend(pushname2))
						if (!isNsfw) return reply(' *FALSE* ')
						res = await fetchJson(`https://tobz-api.herokuapp.com/api/randomloli?apikey=${TobzApi}`, {method: 'get'})
						buffer = await getBuffer(res.result)
						client.sendMessage(from, buffer, image, {quoted: mek, caption: '```lolinya ngab```'})
					} catch (e) {
						console.log(`Error :`, color(e,'red'))
						reply(' *ERROR* ')
					}
					await limitAdd(sender)
					break 
			case 'runtime':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
                                if (isLimit(sender)) return reply(ind.limitend(pusname))
				client.updatePresence(from, Presence.composing) 
				uptime = process.uptime()
				reply(`Bot ’è·é™·è¶·ÇÆ·é°·é™  Telah Aktif Selama\n*${kyun(uptime)}*`)
				break
				case 'totaluser':
					client.updatePresence(from, Presence.composing) 
					if (!isGroup) return reply(ind.groupo())
					teks = `‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ„Äå *TOTAL USER ’è·é™·è¶·ÇÆ·é°·é™ * „Äç\n`
					no = 0
					for (let hehehe of registered.json) {
						no += 1
						teks += `[${no.toString()}] @${hehehe.split('@')[0]}\n`
					}
					teks += `‚îÇ+ Total Pengguna : ${registered.json.length}\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ*‚éø *’è·é™·è¶·ÇÆ·é°·é™  BOT* ‚èã*‚îÄ‚îÄ‚îÄ‚îÄ`
					client.sendMessage(from, teks.trim(), extendedText, {quoted: mek, contextInfo: {"mentionedJid": Registered}})
					break
				case 'nsfwblowjob':
				    try {
				    if (isBanned) return reply(ind.baned())
                                if (!isRegistered) return reply(ind.noregis())
				    if (isLimit(sender)) return reply(limitend(pushname2))
						if (!isNsfw) return reply(' *FALSE* ')
						res = await fetchJson(`https://tobz-api.herokuapp.com/api/nsfwblowjob?apikey=${TobzApi}`, {method: 'get'})
						buffer = await getBuffer(res.result)
						client.sendMessage(from, buffer, image, {quoted: mek, caption: 'Jangan jadiin bahan buat comli ya ingat ada tuhanü§ó'})
					} catch (e) {
						console.log(`Error :`, color(e,'red'))
						reply(' *ERROR* ')
					}
					await limitAdd(sender)
					break 
				case 'hilih':
				if (isBanned) return reply(ind.baned())
                                if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(limitend(pushname2))
				reply(ind.wait())
					if (args.length < 1) return reply('Teksnya mana gan?')
					anu = await fetchJson(`https://api.i-tech.id/tools/hilih?key=${TechApi}&kata=${body.slice(7)}`, {method: 'get'})
					client.sendMessage(from, `${anu.result}`, text, {quoted: mek})
					await limitAdd(sender) 
					break 
				case 'walpaper':
				client.updatePresence(from, Presence.composing) 
					if (isBanned) return reply(ind.baned())
                                if (!isRegistered) return reply(ind.noregis())
					 data = fs.readFileSync('./src/sakura.js');
		        	         jsonData = JSON.parse(data);
	        		         randIndex = Math.floor(Math.random() * jsonData.length);
		        	         randKey = jsonData[randIndex];
	        		        hasil = await getBuffer(randKey.result)
		        	        sendImage(hasil, mek, '\`\`\`NIH WALPAPERNYA KAK\`\`\`')
					break
				case 'antilinkgrup':
                  if (isBanned) return reply(ind.baned())				
					if (!isGroup) return reply(ind.groupo())
					if (!isGroupAdmins) return reply(ind.admin())
					if (!isBotGroupAdmins) return reply(ind.badmin())					
					if (args.length < 1) return reply('ketik 1 untuk mengaktifkan')
					if (Number(args[0]) === 1) {
						if (isAntiLink) return reply('EMANG MATI?')
						antilink.push(from)
						fs.writeFileSync('./database/group/antilink.json', JSON.stringify(antilink))
						reply('„ÄåSUKSES„ÄçMENGAKTIFKAN ANTI LINK DI GROUP')
						client.sendMessage(from,`ALLERT!!! Jika bukan admin jangan kirim link grup`, text)
					} else if (Number(args[0]) === 0) {
						if (!isAntiLink) return reply('EMANG AKTIF?')
						var ini = anti.botLangsexOf(from)
						antilink.splice(ini, 1)
						fs.writeFileSync('./database/group/antilink.json', JSON.stringify(antilink))
						reply('„ÄåSUKSES„ÄçMEMATIKAN ANTI LINK DI GROUP')
					} else {
						reply('1 untuk mengaktifkan, 0 untuk menonaktifkan')
					}
					break
				case 'gambar':
					if (isBanned) return reply(ind.baned())
					if (!isRegistered) return reply(ind.noregis())
                                if (isLimit(sender)) return reply(ind.limitend(pusname))
					const items = ["anime high school dxd", "anime high school dxd hd", "karakter anime high school dxd", "anime high school dxd aesthetic", "wallpaper komputer high school dxd", "wallpaper android high school dxd"];
					const pepw = items[Math.floor(Math.random() * items.length)]
					tod = await getBuffer(`https://api.fdci.se/rep.php?gambar=${items}`)
					client.sendMessage(from, tod, image, { quoted: mek, caption: 'tes'+pepw })
					await limitAdd(sender)
					break
				case 'listsurah':
					if (isBanned) return reply(ind.baned())
                                        if (!isRegistered) return reply(ind.noregis())
					client.sendMessage(from, listsurah() , text, tescuk, cr)
					break
				case 'animesaran':
					if (isBanned) return reply(ind.baned())
					if (!isRegistered) return reply(ind.noregis())
                                if (isLimit(sender)) return reply(ind.limitend(pusname))
	 				qute = await getBuffer(`https://i.ibb.co/F7y89KS/images-2021-01-06-T011202-662.jpg`)
					client.sendMessage(from, qute, image, { quoted: mek, caption: animesaran() })
					break
				case 'animesaran2':
					if (isBanned) return reply(ind.baned())
					if (!isRegistered) return reply(ind.noregis())
                                if (isLimit(sender)) return reply(ind.limitend(pusname))
					costum( `*D·¥Ä“ì·¥õ·¥Ä Ä ·¥Ä…¥…™·¥ç·¥á+…¢·¥á…¥ Ä·¥á*
‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé
DRAMA+KESEDIHAN
- P ü·¥Äs·¥õ…™·¥Ñ ·¥ç·¥á·¥ç·¥è Ä…™·¥ás
- S ú…™…¢·¥Ä·¥õs·¥ú ·¥°·¥Ä K…™·¥ç…™ …¥·¥è Us·¥è
- K·¥è·¥á …¥·¥è K·¥Ä·¥õ·¥Ä·¥Ñ ú…™
- K·¥è·¥ã·¥è Ä·¥è C·¥è…¥…¥·¥á·¥Ñ·¥õ
- C ú·¥ú·¥ú…¥…™ ô è·¥è·¥ú D·¥á·¥ç·¥è K·¥è…™ …¢·¥Ä S ú…™·¥õ·¥Ä…™
- S·¥Ä·¥ã·¥ú Ä·¥Äs·¥è·¥ú …¥·¥è P·¥á·¥õ …¥·¥Ä K·¥Ä…¥·¥è·¥ä·¥è
- N·¥Ä…¢…™ …¥·¥è As·¥ú·¥ã·¥Ä Ä·¥Ä (R·¥á·¥Ñ·¥è·¥ç·¥á…¥·¥Ö·¥á·¥Ö)
- J·¥ús·¥õ B·¥á·¥Ñ·¥Ä·¥ús·¥á
- I…¥·¥ú è·¥Äs ú…™·¥ã…™
- C ü·¥Ä…¥…¥·¥Ä·¥Ö
- A…¥…¢·¥á ü B·¥á·¥Ä·¥õs
- Y·¥Ä ú·¥Ä Ä…™ O Ä·¥á …¥·¥è S·¥á…™s ú·¥ú·¥ú…¥ L·¥è·¥†·¥á C·¥è·¥ç·¥á·¥Ö è M·¥Ä·¥Ñ ú…™…¢·¥Ä·¥õ·¥õ·¥á…™ Ä·¥ú
- R·¥á : LIFE
- A…¥·¥è H·¥Ä…¥·¥Ä
- K·¥è…™ ·¥õ·¥è Us·¥è
- K·¥Ä·¥ç…™s·¥Ä·¥ç·¥Ä H·¥Ä·¥ä…™·¥ç·¥á·¥ç·¥Äs ú…™·¥õ·¥Ä
- H·¥è·¥õ·¥Ä Ä·¥ú ô…™ …¥·¥è M·¥è Ä…™ E
- S·¥Ä…¥·¥ã·¥Ä R·¥á·¥Ä
- K è·¥è·¥ú·¥ã·¥Ä…™ …¥·¥è K·¥Ä…¥·¥Ä·¥õ·¥Ä
- G·¥ú…™ ü·¥õ è C Ä·¥è·¥°…¥ 

GENRE HAREM:

- T·¥è L·¥è·¥†·¥á -  Ä·¥ú
- H…™…¢ ús·¥Ñ ú·¥è·¥è ü DxD 
- H·¥á…¥·¥õ·¥Ä…™ O·¥ú·¥ä…™ W·¥Ä Ä·¥Ä·¥°·¥Ä…¥·¥Ä…™ N·¥á·¥ã·¥è
- Is·¥á·¥ã·¥Ä…™ ·¥°·¥Ä S·¥ç·¥Ä Ä·¥õ·¥ò ú·¥è…¥·¥á T·¥è·¥ç·¥è …¥…™ 
- G·¥Ä·¥ã·¥ús·¥á…¥ T·¥ès ú…™ As·¥õ·¥á Ä…™s·¥ã
- M·¥Äs·¥Ä·¥ç·¥ú…¥·¥á - K·¥ú…¥ R·¥á·¥†·¥á…¥…¢·¥á
- L·¥Ä·¥Ö…™·¥ás Vs B·¥ú·¥õ ü·¥á Ä
- O Ä·¥á …¥·¥è I·¥ç·¥è·¥ú·¥õ·¥è …¢·¥Ä K·¥è…¥…¥·¥Ä…¥…™ K·¥Ä·¥°·¥Ä…™ W·¥Ä·¥ã·¥á …¢·¥Ä N·¥Ä…™
- M·¥Äs·¥è·¥ú G·¥Ä·¥ã·¥ú·¥á…¥ HxH 
- M·¥è…¥s·¥õ·¥á Ä M·¥ús·¥ú·¥ç·¥á 
- S·¥á…™ Ä·¥á…™ Ts·¥ú·¥ã·¥Ä…™ …¥·¥è B ü·¥Ä·¥Ö·¥á D·¥Ä…¥·¥Ñ·¥á
- S·¥á…™·¥ã·¥á…¥ Ts·¥ú·¥ã·¥Ä…™ …¥·¥è W·¥è Ä ü·¥Ö B Ä·¥á·¥Ä·¥ã
- S·¥Ä…™·¥ä·¥Ä·¥ã·¥ú M·¥ú ú·¥Ä…™ …¥·¥è B·¥Ä ú·¥Ä·¥ç·¥ú·¥õ
- M·¥ús·¥Ä…™…¢·¥á…¥ …¥·¥è P ú·¥Ä…¥·¥õ·¥è·¥ç W·¥è Ä ü·¥Ö
- T Ä…™…¥…™·¥õ è S·¥á·¥†·¥á…¥
- H·¥ú…¥·¥Ö Ä·¥á·¥Ö
- D·¥Ä·¥ã·¥Ä Ä·¥Ä B·¥è·¥ã·¥ú ·¥°·¥Ä H, D·¥á·¥ã…™…¥·¥Ä…™? 
- K·¥è Ä·¥á ·¥°·¥Ä Z·¥è·¥ç ô…™·¥á D·¥ás·¥ú K·¥Ä?
- S ú…™·¥è·¥ç…™…¥ S·¥Ä·¥ç·¥ò ü·¥á
- S ú…™…¥·¥ç·¥Ä…™ M·¥Ä·¥è·¥ú …¥·¥è T·¥ás·¥õ·¥Ä·¥ç·¥á…¥·¥õ 
- D·¥Ä·¥õ·¥á A L…™·¥†·¥á
- K·¥è…¥·¥è N·¥Ä·¥ã·¥Ä …¥…™ H…™·¥õ·¥è Ä…™, I·¥ç·¥è·¥ú·¥õ·¥è …¢·¥Ä I Ä·¥ú
- O…¥…™…™ - C ú·¥Ä…¥ D·¥Ä·¥ã·¥á·¥Ö·¥è A…™ S·¥Ä Ä·¥á ô·¥Ä K·¥Ä…¥·¥ã·¥á…™ N·¥Ä…™ è·¥è…¥·¥á
- O Ä·¥á …¥·¥è N·¥è·¥ú…¥·¥Ä…™ S·¥á…¥·¥õ·¥Ä·¥ã·¥ús ú…™ …¢·¥Ä, G·¥Ä·¥ã·¥ú·¥á…¥ L·¥è·¥†·¥á C·¥è·¥ç·¥á·¥Ö è Z·¥á…¥ Ä è·¥è·¥ã·¥ú ·¥Ö·¥á J·¥Ä·¥ç·¥Ä S ú…™·¥õ·¥á Ä·¥ú 
- O Ä·¥á …¥·¥è K·¥Ä…¥·¥è·¥ä·¥è ·¥õ·¥è Os·¥Ä…¥·¥Ä…¥·¥Ä·¥ä…™·¥ç…™ …¢·¥Ä S ú·¥ú Ä·¥Ä ô·¥Ä S·¥ú…¢…™ Ä·¥ú
- K·¥Ä…¥·¥è·¥ã·¥è…¥
- R·¥è·¥ã·¥ú·¥ä·¥ú·¥ç·¥Ä …¥·¥è S ú…™…¥ Ä è·¥Ä·¥ã·¥ús ú·¥Ä
- N…™s·¥á·¥ã·¥è…™
- S·¥Ä·¥á…¥·¥Ä…™ H·¥á Ä·¥è…™…¥·¥á S·¥è·¥Ö·¥Ä·¥õ·¥á·¥ã·¥Ä·¥õ·¥Ä
- B·¥è·¥ã·¥ú ·¥°·¥Ä T·¥è·¥ç·¥è·¥Ö·¥Ä·¥Ñ ú…™ …¢·¥Ä S·¥ú·¥ã·¥ú…¥·¥Ä…™
- K·¥Ä·¥ç…™ N·¥è·¥ç…™ ·¥¢·¥è S ú…™ Ä·¥ú S·¥á·¥ã·¥Ä…™
- R·¥á…¥·¥Ä…™ B·¥è·¥ú·¥ã·¥ú…¥
- I…¥“ì…™…¥…™·¥õ·¥á S·¥õ Ä·¥Ä·¥õ·¥ès
- Y·¥ès·¥ú…¢·¥Ä …¥·¥è S·¥è Ä·¥Ä

GENRE COMEDY

- G…™…¥·¥õ·¥Ä·¥ç·¥Ä 
- T·¥Ä…¥·¥Ä·¥ã·¥Ä - ·¥ã·¥ú…¥ ·¥°·¥Ä I·¥õs·¥ú·¥ç·¥è K·¥á·¥Ö·¥Ä Ä·¥ú…¢·¥á
- W·¥è Ä·¥ã…™…¥…¢!!!
- B·¥Ä Ä·¥Ä·¥ã·¥Ä·¥ç·¥è…¥
- B ü·¥á…¥·¥Ö S
- H…™·¥ç·¥è·¥ú·¥õ·¥è U·¥ç·¥Ä Ä·¥ú - C ú·¥Ä…¥
- N·¥á·¥° G·¥Ä·¥ç·¥á
- A…¥…™·¥ç·¥á…¢·¥Ä·¥õ·¥Ä Ä…™s
- G·¥á·¥ã·¥ã·¥Ä…¥ S ú·¥è·¥ú·¥ä·¥è N·¥è·¥¢·¥Ä·¥ã…™ - ·¥ã·¥ú…¥
- G·¥Ä ô Ä…™·¥á ü D Ä·¥è·¥òO·¥ú·¥õ
- K·¥è ô·¥Ä è·¥Äs ú…™ - ·¥Ñ ú·¥Ä…¥ C ú…™ …¥·¥è M·¥Ä…™·¥Ö D Ä·¥Ä…¢·¥è…¥
- D·¥Ä…¥s ú…™ K·¥è·¥ú·¥ã·¥ès·¥á…™ …¥·¥è N…™·¥Ñ ú…™·¥ä·¥è·¥ú 

GENRE ROMANCE

- I·¥ç·¥è·¥ú·¥õ·¥è S·¥Ä·¥á I Ä·¥á ô·¥Ä I…™
- E Ä·¥è·¥ç·¥Ä…¥…¢·¥Ä S·¥á…¥s·¥á…™
- O Ä·¥á …¥·¥è I·¥ç·¥è·¥ú·¥õ·¥è K·¥è…¥…¥·¥Ä…¥…™ K·¥Ä·¥°·¥Ä…™…™ W·¥Ä·¥ã·¥á …¢·¥Ä N·¥Ä…™
- Y·¥Ä ú·¥Ä Ä…™ O Ä·¥á …¥·¥è S·¥á…™s ú·¥ú·¥ú…¥ ·¥°·¥Ä L·¥è·¥†·¥á C·¥è·¥ç·¥á·¥Ö è M·¥Ä·¥Ñ ú…™…¢·¥Ä·¥õ·¥õ·¥á…™ Ä·¥ú
- B·¥è·¥ã·¥ú ·¥°·¥Ä T·¥è·¥ç·¥è·¥Ö·¥Ä·¥Ñ ú…™ …¢·¥Ä S·¥ú·¥ã·¥ú…¥·¥Ä…™
- K·¥Ä·¥ç…™s·¥Ä·¥ç·¥Ä H·¥Ä·¥ä…™·¥ç·¥á·¥ç·¥Äs ú…™·¥õ·¥Ä

GENRE ACTION

- F·¥Ä·¥õ·¥á/S·¥õ·¥Ä è N…™…¢ ú·¥õ 
- UQ H·¥è ü·¥Ö·¥á Ä! M·¥Ä ú·¥è·¥ú N·¥á…¢…™·¥ç·¥Ä S·¥á…¥s·¥á…™ 2
- A ôs·¥è ü·¥ú·¥õ·¥á D·¥ú·¥è
- R·¥è·¥ã·¥ú·¥Ö·¥á…¥·¥Äs ú…™ M·¥Ä·¥ä·¥ú·¥õs·¥ú K·¥è·¥ús…™ …¥·¥è A·¥ã·¥Äs ú…™·¥Ñ R·¥á·¥Ñ·¥è Ä·¥Ö
- O·¥†·¥á Ä ü·¥è Ä·¥Ö
- K·¥á·¥ã·¥ã·¥Ä…™ S·¥á…¥s·¥á…¥
- S·¥°·¥è Ä·¥Ö A Ä·¥õ O…¥ ü…™…¥·¥á
- G·¥ú…™ ü·¥õ è C Ä·¥è·¥°…¥
- S·¥Ä…™·¥ä·¥Ä·¥ã·¥ú M·¥ú ú·¥Ä…™ …¥·¥è B·¥Ä ú·¥Ä·¥ç·¥ú·¥õ
- I…¥“ì…™…¥…™·¥õ·¥á S·¥õ Ä·¥Ä·¥õ·¥ès
- S·¥õ·¥á…™…¥ G·¥Ä·¥õ·¥á
- T·¥è·¥Ä Ä·¥ú K·¥Ä…¢·¥Ä·¥ã·¥ú …¥·¥è R·¥Ä…™ ü…¢·¥ú…¥
- B ü·¥Ä·¥Ñ·¥ã B·¥ú ü ü·¥á·¥õ
- I…¥·¥ú è·¥Äs ú…™·¥ã…™
- O…¥·¥á P·¥ú…¥·¥Ñ ú M·¥Ä…¥
- M·¥è ô Ps è·¥Ñ ú·¥è 100
- G·¥Ä·¥ã·¥ús·¥á…¥ T·¥ès ú…™ As·¥õ·¥á Ä…™s·¥ã
- S ú…™…¥·¥ç·¥Ä…™ M·¥Ä·¥è·¥ú …¥·¥è T·¥ás·¥õ·¥Ä·¥ç·¥á…¥·¥õ
- B·¥ú…¥…¢·¥è·¥ú S·¥õ Ä·¥Ä è D·¥è…¢s

GENRE PHSYCOLOGICAL
- I…¥·¥ú è·¥Äs ú…™·¥ã…™
- M·¥Ä·¥Ö·¥è·¥ã·¥Ä M·¥Ä…¢…™·¥Ñ·¥Ä
- M…™ Ä·¥Ä…™ N…™·¥ã·¥ã…™
- K·¥Ä·¥ã·¥á…¢·¥ú Ä·¥ú…™
- K-P Ä·¥è·¥ä·¥á·¥Ñ·¥õ
- G Ä…™s·¥Ä…™·¥Ä …¥·¥è R·¥Ä·¥ã·¥ú·¥á…¥ & K·¥Ä·¥ä…™·¥õs·¥ú
- D·¥á·¥Ä·¥õ ú N·¥è·¥õ·¥á
- D·¥á·¥Ä·¥õ ú P·¥Ä Ä·¥Ä·¥Ö·¥á
- D·¥á·¥Ä·¥Ö·¥ç·¥Ä…¥ W·¥è…¥·¥Ö·¥á Ä ü·¥Ä…¥·¥Ö
- R·¥á : Z·¥á Ä·¥è K·¥Ä Ä·¥Ä H·¥Ä·¥ä…™·¥ç·¥á Ä·¥ú Is·¥á·¥ã·¥Ä…™ S·¥á…™·¥ã·¥Ä·¥õs·¥ú
- D·¥Ä…¥…¢·¥Ä…¥ Ä·¥è…¥·¥ò·¥Ä
- BTOOOM!
- Ps è·¥Ñ ú·¥è P·¥Äss
- K…™s·¥á…™·¥ä·¥ú·¥ú : S·¥á…™ …¥·¥è K·¥Ä·¥ã·¥ú Ä…™·¥õs·¥ú
- T·¥è·¥ã è·¥è G ú·¥è·¥ú ü
- NHK …¥…™ Y·¥è·¥ú·¥ã·¥ès·¥è 

GENRE GAME & ISEKAI

- M·¥è…¥·¥Ö·¥Ä…™·¥ä…™ - ·¥õ·¥Ä·¥Ñ ú…™ …¢·¥Ä Is·¥á·¥ã·¥Ä…™ K·¥Ä Ä·¥Ä K·¥ú Ä·¥ú S·¥è D·¥ás·¥ú Y·¥è?
- N·¥è G·¥Ä·¥ç·¥á N·¥è L…™“ì·¥á
- A·¥Ñ·¥Ñ·¥á ü W·¥è Ä ü·¥Ö
- K·¥è…¥·¥è S·¥ú ô·¥Ä Ä·¥Äs ú…™ Is·¥á·¥ã·¥Ä…™ S·¥è…¥·¥è S ú·¥ú·¥ã·¥ú“ì·¥ú·¥ã·¥ú ·¥°
- 3 G·¥Ä·¥õs·¥ú …¥·¥è L…™·¥è…¥
- S·¥°·¥è Ä·¥Ö A Ä·¥õ O…¥ ü…™…¥·¥á
- M·¥Ä·¥Ö·¥Ä…¥ O·¥ú V·¥Ä…¥·¥Ä·¥Ö…™s

GENRE MYSTERI

- S·¥Ä·¥ã·¥ú Ä·¥Ä·¥Ö·¥Ä R·¥ás·¥á·¥õ
- H è·¥è·¥ú·¥ã·¥Ä
- M·¥è…¥·¥è…¢·¥Ä·¥õ·¥Ä Ä…™ ·¥ú Ä·¥ú·¥õ·¥Ä…¥ ·¥Ñ·¥á Ä…™·¥õ·¥Ä…¥ è·¥Ä
1. K…™·¥¢·¥ú·¥ç·¥è…¥·¥è…¢·¥Ä·¥õ·¥Ä Ä…™ 
2. N·¥á·¥ã·¥è·¥ç·¥è…¥·¥è…¢·¥Ä·¥õ·¥Ä Ä…™ : K·¥ú Ä·¥è
3. B·¥Ä·¥ã·¥á·¥ç·¥è…¥·¥è…¢·¥Ä·¥õ·¥Ä Ä…™
4. N…™s·¥á·¥ç·¥è…¥·¥è…¢·¥Ä·¥õ·¥Ä Ä…™
5. M·¥è…¥·¥è…¢·¥Ä·¥õ·¥Ä Ä…™ S·¥á Ä…™·¥ás S·¥á·¥Ñ·¥è…¥·¥Ö S·¥á·¥Äs·¥è…¥
6. Ts·¥ú·¥ã…™·¥ç·¥è…¥·¥è…¢·¥Ä·¥õ·¥Ä Ä…™
7. K·¥è è·¥è·¥ç…™·¥ç·¥è…¥·¥è…¢·¥Ä·¥õ·¥Ä Ä…™ (D·¥ú Ä·¥Äs…™ 12 ·¥ç…™…¥)
8. O·¥°·¥Ä Ä…™·¥ç·¥è…¥·¥è…¢·¥Ä·¥õ·¥Ä Ä…™ S1
9. O·¥°·¥Ä Ä…™·¥ç·¥è…¥·¥è…¢·¥Ä·¥õ·¥Ä Ä…™ S2
10. H·¥Ä…¥·¥Ä·¥ç·¥è…¥·¥è…¢·¥Ä·¥õ·¥Ä Ä…™
- D·¥Ä…¥…¢·¥Ä…¥ Ä·¥è…¥·¥ò·¥Ä
- M…™ Ä·¥Ä…™ N…™·¥ã·¥ã…™
- D·¥á·¥Ä·¥õ ú N·¥è·¥õ·¥á
- B ü·¥Ä·¥Ñ·¥ã B·¥ú ü ü·¥á·¥õ
- A…¥·¥è·¥õ ú·¥á Ä

SPORT :

- Y·¥Ä·¥°·¥Ä·¥ç·¥ús ú…™ ·¥ò·¥á·¥Ö·¥Ä ü
- M·¥Ä·¥ä·¥è Ä
- E è·¥ás ú…™ ü·¥á·¥Ö 21
- D…™·¥Ä·¥ç·¥è…¥·¥Ö …¥·¥è ·¥Ä·¥Ñ·¥á
- S ü·¥Ä·¥ç ·¥Ö·¥ú…¥·¥ã
- H·¥Ä·¥ä…™·¥ç·¥á …¥·¥è …™·¥ò·¥ò·¥è
- F Ä·¥á·¥á
- P…™…¥…¢ ·¥ò·¥è…¥…¢ ·¥õ ú·¥á ·¥Ä…¥…™·¥ç·¥Ä·¥õ…™·¥è…¥
- B·¥Ä ô è s·¥õ·¥á·¥ò
- A Ä·¥á·¥Ä …¥·¥è ·¥ã…™s ú…™
- C·¥Ä·¥ò·¥õ·¥á…™…¥ ·¥õs·¥ú ô·¥Ä·¥Ä·¥Ä
- A…™ Ä …¢·¥á·¥Ä Ä
- C ú…™ ú·¥Ä“ì·¥ú è·¥ú
- C Ä·¥èss …¢·¥Ä·¥ç·¥á
- I…¥·¥Ä·¥¢·¥ú·¥ç·¥Ä ·¥á ü·¥á·¥†·¥á…¥

 ROMANCE SAD

- K…™·¥ç…™·¥ã…™ss ·¥ò·¥ú Ä·¥á  Ä·¥Ä·¥è·¥ú…¢·¥á
- K·¥Ä·¥ç…™·¥ã…™ss
- T·¥è Ä·¥Ä·¥Ö·¥è Ä·¥Ä
- L·¥è·¥†·¥á ü è ·¥Ñ·¥è·¥ç·¥ò ü·¥áx
- S·¥Ä·¥ã·¥ú Ä·¥Äs·¥è·¥ú
- W ú…™·¥õ·¥á ·¥Ä ü ô·¥ú·¥ç
- T·¥è…¥·¥Ä Ä…™ …¥·¥è ·¥ã·¥Ä…™ ô·¥ú·¥õs·¥ú-·¥ã·¥ú…¥
- 11·¥á è·¥ás
- A…¥…¢·¥á ü  ô·¥á·¥Ä·¥õs
- P ü·¥Äs·¥õ…™·¥Ñ ·¥ç·¥á·¥ç·¥è Ä…™·¥á
- A·¥ã·¥Ä·¥ç·¥á …¢·¥Ä ·¥ã…™ ü ü
- A·¥ã·¥Ä·¥õs·¥ú·¥ã…™ …¥·¥è  è·¥è…¥·¥Ä
- B·¥á Äs·¥á Ä·¥ã
- S·¥Ä·¥è
- B·¥è·¥ã·¥ú ·¥°·¥Ä ·¥õ·¥è·¥ç·¥è·¥Ö·¥Ä·¥Ñ ú…™ ·¥°·¥Ä s·¥ú·¥ã·¥ú…¥·¥Ä…™
- B·¥è·¥ã·¥ú Ä·¥Ä ·¥°·¥Ä ·¥ç…™…¥…¥·¥Ä ·¥ã·¥Ä·¥°·¥Ä…™s·¥è·¥ú
- B·¥õ·¥è·¥è·¥è·¥ç
- B·¥ú…¥…¢·¥Ä·¥ã·¥ú s ú·¥è·¥ú·¥ä·¥è
- C ·¥õ ú·¥á ·¥ç·¥è…¥·¥á è ·¥è“ì s·¥è·¥ú ü ·¥Ä…¥·¥Ö ·¥ò·¥èss…™ ô…™ ü…™·¥õ è ·¥Ñ·¥è…¥·¥õ Ä·¥è ü
- C ú·¥Ä Ä ü·¥è·¥õ·¥õ·¥á
- C ú…™ ú·¥Ä è·¥Ä“ì·¥ú è·¥ú
- C ú·¥ú·¥ú…¥…™ ô è·¥è·¥ú
- C ü·¥Ä…¥…¥·¥Ä·¥Ö
- D·¥Ä…¥·¥Ñ·¥á …™…¥ ·¥õ ú·¥á ·¥†·¥Ä·¥ç·¥ò…™ Ä·¥á  ô·¥ú…¥·¥Ö
- D·¥Ä…¥s·¥Ä…™  ô·¥ú…¥ Ä…™ …¥·¥è ·¥Ñ Ä…™·¥ç·¥á ·¥á·¥Ö…¢·¥á
- D·¥Ä Ä·¥ã·¥á…¥ ·¥õ ú·¥Ä…¥  ô ü·¥Ä·¥Ñ·¥ã
- D·¥á·¥†…™ üs  ü…™…¥·¥á
- D·¥Ä·¥õ·¥á ·¥Ä  ü…™·¥†·¥á
- D·¥á ·¥Ñ·¥Ä·¥ò…™ s·¥á Ä…™·¥ás
- T Ä·¥ú·¥á·¥á ·¥õ·¥á·¥Ä Äs
- ·¥Ö·¥á·¥Ä·¥Ö·¥ç·¥á·¥Ä…¥ ·¥°·¥è…¥·¥Ö·¥á Ä ü·¥Ä…¥·¥Ö
-  ô ü·¥è·¥è·¥Ö  ü·¥Ä·¥Ö
- ·¥Ö·¥á…¥s·¥á·¥õs·¥ú …¥·¥è  è·¥ús·¥Ä …¥·¥è ·¥Ö·¥á…¥s·¥á·¥õs·¥ú
- ·¥ã è·¥è·¥ú·¥ã·¥Ä…™ …¥·¥è ·¥ã·¥Ä…¥·¥Ä·¥õ·¥Ä
- F·¥Ä·¥õ·¥á/s·¥õ·¥Ä è 
- M·¥Ä…¢…™
- G·¥á·¥ã·¥ã·¥Ä…¥ s ú·¥è·¥ú·¥ä·¥è
- G·¥è ü·¥Ö·¥á…¥ ·¥õ…™·¥ç·¥á
- G·¥ú…™ ü·¥õ è ·¥Ñ Ä·¥è·¥°…¥
- G·¥ès…™·¥Ñ·¥ã
- H·¥á…¥·¥õ·¥Ä…™ ·¥è·¥ú·¥ä…™ ·¥õ·¥è ·¥°·¥Ä Ä·¥Ä·¥°·¥Ä…¥·¥Ä…™ …¥·¥á·¥ã·¥è
- K…™s·¥á…™·¥ä·¥ú·¥ú
- K·¥è·¥ã·¥è Ä·¥è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ
- M…™·¥ã·¥Ä·¥ã·¥ú…¥…™…¥
- M…™ Ä·¥Ä…™ …¥…™·¥ã…™
- N·¥Ä…¢…™ …¥·¥è ·¥Äs·¥ú·¥ã·¥Ä Ä·¥Ä
- O Ä·¥á ü·¥ç·¥è
- P·¥ú…¥·¥Ñ ú  ü…™…¥·¥á
- R·¥è·¥ã·¥ã·¥Ä …¥·¥è  è·¥ú·¥ús ú·¥Ä
- S ú…™…¢·¥Ä·¥õ·¥ú ·¥°·¥Ä ·¥ã…™·¥ç…™ …¥·¥è ·¥ús·¥è
- K·¥è·¥õ·¥è…¥·¥è ú·¥Ä …¥·¥è ·¥ç…™·¥°·¥Ä
- K…™·¥ç…™ …¥·¥è …¥·¥Ä·¥°·¥Ä
- K·¥Ä…™·¥Ñ ú·¥è·¥ú ·¥°·¥Ä ·¥ç·¥Ä…™·¥Ö s·¥Ä·¥ç·¥Ä
- O Ä·¥á…¢·¥Ä…™ Ä·¥ú
- O·¥è·¥ã·¥Ä·¥ç…™ …¥·¥è ·¥ã·¥è·¥ús ú…™…¥ Ä è·¥è·¥ú
- Z·¥á Ä·¥è …¥·¥è ·¥õs·¥ú·¥ã·¥Ä…™·¥ç·¥Ä
- As·¥õ·¥á Ä…™·¥ã
- K·¥è Ä·¥á ·¥°·¥Ä ·¥¢·¥è·¥ç ô…™·¥á ·¥Ö·¥ás·¥ú ·¥ã·¥Ä
- K·¥è·¥á …¥·¥è ·¥ã·¥Ä·¥õ·¥Ä·¥Ñ ú…™
- K…™·¥ç…™ …¥·¥è ·¥õ·¥á·¥Ö·¥è·¥ã·¥á
- R·¥á ü…™“ì·¥á
- Ts·¥ú·¥ã…™…¢·¥Ä ·¥ã…™ Ä·¥á…™
- T·¥Ä·¥ç·¥Ä·¥ã·¥è ·¥ç·¥Ä Ä·¥ã·¥á·¥õ
- S·¥ú·¥ã…™·¥õ·¥õ·¥á  ü…™ …¥·¥Ä è·¥è·¥ú
- O Ä·¥á ·¥ç·¥è…¥·¥è…¢·¥Ä·¥õ·¥Ä Ä…™
- M·¥è…¥·¥è…¢·¥Ä·¥õ·¥Ä Ä…™
- A·¥ã·¥Ä…¢·¥Ä·¥ç…™ …¥·¥è s ú…™ Ä·¥Ä è·¥ú·¥ã…™
- S·¥Ä…¥·¥ã·¥Ä Ä·¥á·¥Ä
- A·¥ç·¥Ä…¢·¥Ä·¥ç…™ ss
- Iss·¥ú·¥ã·¥Ä…¥ “ì Ä…™·¥á…¥·¥Ö
- A·¥è  ú·¥Ä Ä·¥ú  Ä…™·¥Ö·¥á
- N…™·¥ä…™ Ä·¥è ·¥Ö·¥Ä ès
- F·¥ú·¥ú·¥ã·¥Ä
- A…¥·¥è  ú·¥Ä…¥·¥Ä
- Y·¥ès·¥ú…¢·¥Ä …¥·¥è s·¥è Ä·¥Ä
MYSTERI:
- D·¥á·¥Ä·¥õ ú …¥·¥è·¥õ·¥á
- G·¥ès…™·¥Ñ·¥ã
- B·¥è·¥ã·¥ú ·¥Ö·¥Ä·¥ã·¥á …¢·¥Ä …™…¥·¥Ä…™ ·¥ç·¥Ä·¥Ñ ú…™
- B·¥Ä·¥Ñ·¥Ñ·¥Ä…¥·¥è
- D·¥ú Ä·¥Ä Ä·¥Ä Ä·¥Ä
- S ú…™…¥s·¥á·¥ã·¥Ä…™  è·¥è Ä…™
- B·¥Ä·¥ã·¥á·¥ç·¥è…¥·¥è…¢·¥Ä·¥õ·¥Ä Ä…™
- D·¥á·¥Ä·¥õ ú ·¥ò·¥Ä Ä·¥Ä·¥Ö·¥á
- D·¥Ä Ä·¥ã·¥á…¥ ·¥õ ú·¥Ä…¥  ô ü·¥Ä·¥Ñ·¥ã
- Z·¥Ä·¥õs·¥ú·¥á…¥ …¥·¥è ·¥õ·¥á·¥ç·¥ò·¥ás·¥õ
- E“ì: A ·¥õ·¥Ä ü·¥á ·¥ç·¥á ü·¥è·¥Ö…™·¥ás
- H…™…¢·¥ú Ä·¥Äs ú…™ …¥·¥è …¥·¥Ä·¥ã·¥ú ·¥ã·¥è Ä·¥è …¥…™
- P·¥Ä·¥ò Ä…™·¥ã·¥Ä
- T…™…¢·¥á Ä ·¥Ä…¥·¥Ö  ô·¥ú…¥…¥ è
- T·¥Äs·¥è…¢·¥Ä Ä·¥á ·¥è·¥õ·¥è·¥ç·¥á x ·¥Ä·¥ç…¥·¥ás…™·¥Ä
- M…™ Ä·¥Ä…™ …¥…™·¥ã…™
- T·¥è·¥ã è·¥è·¥ú …¢ ú·¥è·¥ú ü
- E Ä…¢·¥è ·¥ò Ä·¥èx è 
- A…¥·¥è·¥õ ú·¥á Ä
- Y·¥Ä·¥ç·¥Ä·¥Ö·¥Ä ·¥ã·¥ú…¥ ·¥õ·¥è 7 …¥…™…¥ …¥·¥è ·¥ç·¥Ä·¥ä·¥è
- G·¥Ä·¥ã·¥ã·¥è·¥ú …¢·¥ú Ä·¥Äs ú…™
- K·¥Ä·¥ç…™s·¥Ä·¥ç·¥Ä …¥·¥è ·¥ç·¥á·¥ç·¥è·¥Ñ ú·¥è·¥ú
- H·¥Ä·¥ç·¥Ä·¥õ·¥è Ä·¥Ä
- B ü·¥Ä·¥Ñ·¥ã  ô·¥ú ü ü·¥á·¥õ
- K·¥Ä·¥ç…™s·¥Ä·¥ç·¥Ä …¥·¥è …™…¥·¥Ä…™ …¥…™·¥Ñ ú…™ è·¥ú ô…™
- D·¥Ä…¥·¥õ·¥Ä ü…™·¥Ä…¥ …¥·¥è s ú·¥è·¥ã·¥Ä
- K·¥ú·¥ä…™ Ä·¥Ä …¥·¥è ·¥ã·¥è Ä·¥Ä ·¥°·¥Ä s·¥Ä·¥ä·¥è·¥ú …¥…™  ·¥ä·¥Ä·¥ç
- S·¥ú ô·¥á·¥õ·¥á …¢·¥Ä “ì …¥…™ …¥·¥Ä Ä·¥ú
- G·¥Ä·¥ã·¥ú·¥ã·¥è·¥ã·¥ú …¥·¥è  ô Ä è…¥ ú…™ ü·¥Ö Ä
- S·¥á…™·¥ã…™·¥ç·¥Ä·¥õs·¥ú ·¥è·¥Ñ·¥Ñ·¥ú ü·¥õ …¢·¥Ä·¥ã·¥ú…™…¥
- K·¥è…¥…™ …¥·¥Ä·¥ã·¥Ä …¥…™  ú…™·¥õ·¥è Ä…™ …™·¥ç·¥è·¥ú·¥õ·¥è …¢·¥Ä …™ Ä·¥ú 
- M·¥Ä è·¥è…™…¢·¥Ä
- K è·¥è·¥õ·¥è ·¥õ·¥á Ä·¥Ä·¥ç·¥Ä·¥Ñ ú…™ s·¥Ä…¥·¥ä·¥è·¥ú …¥·¥è  ú·¥è ü·¥ç·¥ás
- 18…™“ì
- ·¥è·¥ús·¥Ä·¥ç·¥Ä …¢·¥Ä·¥ç·¥á ·¥õ ú·¥á ·¥Ä…¥…™·¥ç·¥Ä·¥õ…™·¥è…¥
- ·¥ç·¥Ä·¥Ö·¥á …™…¥ ·¥Ä ô èss

COMEDY SCHOOL :
- P Ä·¥ás·¥è…¥ s·¥Ñ ú·¥è·¥è ü
- G·¥á·¥ã·¥ã·¥Ä…¥ s ú·¥è·¥ú·¥ä·¥è …¥·¥è·¥¢·¥Ä·¥ã…™ ·¥ã·¥ú…¥
- B·¥á·¥á ü·¥¢·¥á ô·¥ú ô
- S ú…™·¥ç·¥è…¥·¥á·¥õ·¥Ä
- A ú·¥è …¢…™ Ä ü
- T·¥Ä…¥·¥Ä·¥ã·¥Ä ·¥ã·¥ú…¥
- D “ì Ä·¥Ä…¢
- H·¥Ä…¥·¥Ö·¥Ä ·¥ã·¥ú…¥
- T·¥è…¥·¥Ä Ä·¥ú …¥·¥è s·¥á·¥ã…™ ·¥ã·¥ú…¥
- A…¥s·¥Ä·¥õs·¥ú ·¥ã è·¥è·¥ús ú…™·¥õ·¥á
- S·¥Ä…™·¥ã…™ ·¥ã·¥ús·¥ú·¥è
- T·¥è Ä·¥Ä·¥Ö·¥è Ä·¥Ä
- B·¥Ä·¥ã·¥Ä ·¥õ·¥è ·¥õ·¥ás·¥õ
- S·¥Ä·¥ã·¥Ä·¥ç·¥è·¥õ·¥è ·¥Ö·¥ás·¥ú …¢·¥Ä
- G Ä·¥á·¥Ä·¥õ ·¥õ·¥á·¥Ä·¥Ñ ús Ä ·¥è…¥…™·¥¢·¥ú·¥ã·¥Ä
- N…™·¥Ñ ú…™·¥ä·¥è·¥ú
- S·¥ã·¥á·¥õ ·¥Ö·¥Ä…¥·¥Ñ·¥á
- D·¥Ä…¥s ú…™ ·¥ã·¥è·¥ú·¥ã·¥è·¥ús·¥á…™ …¥·¥è …¥…™·¥Ñ ú…™·¥ä·¥è

A…¥…™·¥ç·¥á ·¥Ö·¥ú Ä·¥Äs…™ ·¥ò·¥á…¥·¥Ö·¥á·¥ã:
A ú·¥è …¢…™ Ä ü
Ts·¥ú Ä·¥á·¥õ·¥¢·¥ú Ä·¥á ·¥Ñ ú…™ ü·¥Ö·¥á Ä…¥
U·¥Ñ ú·¥ú·¥ú s·¥á…¥·¥ã·¥Ä…¥ ·¥õ…™ Ä·¥Ä·¥ç…™s·¥ú
M·¥Ä…¥…¢·¥Ä·¥ã·¥Ä s·¥Ä…¥ ·¥õ·¥è ·¥Äss…™s·¥õ·¥Ä…¥·¥õ s·¥Ä…¥
T·¥è…¥·¥Ä Ä…™ …¥·¥è s·¥á·¥ã…™ ·¥ã·¥ú…¥
D·¥Ä…¥…¥·¥Ä …¢·¥Ä …™·¥õ·¥õ·¥á…™ Ä·¥ú ·¥ã·¥Ä ·¥°·¥Ä·¥ã·¥Ä Ä·¥Ä…¥·¥Ä…™ ·¥ã·¥á…¥
F·¥ú·¥ç…™·¥ã…™ Ä…™ ·¥ä…™·¥ã·¥Ä…¥
O…¥·¥á·¥á ·¥Ñ ú·¥Ä…¥ …¢·¥Ä ·¥ã…™·¥õ·¥Ä
Os·¥Ä·¥ã·¥á “ì·¥ú“ì·¥ú …¥…™…¥·¥Ä·¥õ·¥õ·¥á
A·¥Ñ·¥õ…™·¥è…¥ S·¥ú·¥ò·¥á Ä…¥·¥Ä·¥õ·¥ú Ä·¥Ä ü :
- S·¥Ä…™·¥ã…™ ·¥ã·¥ús·¥ú·¥è
- O·¥†·¥á Ä ü·¥è Ä·¥Ö
- H·¥Ä·¥õ·¥Ä Ä·¥Ä·¥ã·¥ú ·¥ç·¥Ä·¥è s·¥Ä·¥ç·¥Ä
- M·¥Ä ú·¥è·¥ú·¥ã·¥Ä ·¥ã·¥è·¥ú·¥ã·¥Ä
- B ü·¥è·¥è·¥Ö  ü·¥Ä·¥Ö
- S·¥Ä·¥è
- N·¥Ä…¥·¥Ä·¥õs·¥ú …¥·¥è ·¥õ·¥Ä…™·¥¢·¥Ä…™
- A…¥s è·¥Ä·¥õs·¥ú ·¥ã è·¥è·¥ú ú…™·¥õs·¥ú
- C·¥è·¥Ö·¥á …¢·¥á·¥Äss
- N·¥è …¢·¥Ä·¥ç·¥á …¥·¥è  ü…™“ì·¥á
- M·¥è ô ·¥òs è·¥Ñ·¥è 100
- M·¥è…¥·¥Ö·¥Ä…™·¥ä…™-·¥õ·¥Ä·¥Ñ ú…™ …¢·¥Ä …™s·¥á·¥ã·¥Ä…™ ·¥ã·¥Ä Ä·¥Ä ·¥ã·¥ú Ä·¥ú ·¥¢·¥è·¥ú ·¥Ö·¥ás·¥ú  è·¥è

R·¥è·¥ç·¥Ä…¥·¥Ñ·¥á S ú·¥è·¥ú·¥ä·¥è
- S·¥Ä·¥á…™·¥ã·¥Ä…¥·¥è
- S·¥ò·¥á·¥Ñ…™·¥Ä ü A
- C·¥è·¥Ñ·¥è Ä·¥è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ
- K·¥Ä·¥ç…™s ú·¥Ä·¥ç·¥Ä  ú·¥Ä·¥ä…™·¥ç·¥á·¥ç·¥Äs ú…™·¥õ·¥Ä
- L·¥è·¥†·¥á ü è ·¥Ñ·¥è·¥ç·¥ò ü·¥áx
- G·¥è ü·¥Ö·¥á…¥ ·¥õ…™·¥ç·¥á
- T·¥è…¥·¥Ä Ä…™ …¥·¥è ·¥ã·¥Ä…™ ô·¥ú·¥õs·¥ú-·¥ã·¥ú…¥
- S…™·¥ã…™·¥õ·¥õ·¥á  ü…™ …¥·¥Ä  è·¥è
- B·¥Ä·¥ã·¥Ä ·¥õ·¥è ·¥õ·¥ás·¥õ
- C ú·¥ú·¥ú…¥…™ ô è·¥è·¥ú
- A…¥·¥è …¥·¥Ä·¥õs·¥ú ·¥Ö·¥á ·¥ç·¥Ä·¥õ·¥õ·¥á Ä·¥ú
- A·¥è  ú·¥Ä Ä·¥ú  Ä…™·¥Ö·¥á
- N…™·¥ä…™ Ä·¥è ·¥Ö·¥Ä ès
- R·¥á ·¥¢·¥á Ä·¥è ·¥ã·¥Ä Ä·¥Ä
- D·¥á…¥s·¥á·¥õs·¥ú …¥·¥è  è·¥ú·¥ús ú·¥Ä …¥·¥è ·¥Ö·¥á…¥s·¥á·¥õs·¥ú
- D·¥Ä…¥·¥ç·¥Ä·¥Ñ ú…™
- S·¥ú·¥ã·¥Äs·¥ú·¥ã·¥Ä
- R·¥Ä·¥ã·¥ú·¥Ö·¥Ä è ·¥ã…™s ú è …¥·¥è ·¥Ñ·¥Ä·¥†·¥Ä ü Ä è
- C·¥è·¥Ö·¥á:R·¥á·¥Ä ü…™·¥¢·¥á
- C·¥è·¥Ö·¥á  ô Ä·¥á·¥Ä·¥ã·¥á Ä
- ·¥¢·¥á Ä·¥è …¥·¥è ·¥õs·¥ú·¥ã·¥Ä…™·¥ç·¥Ä

C ú·¥Ä Ä·¥Ä GENIUS :
-·¥ç·¥Äs·¥Ä·¥ç·¥ú…¥·¥á ·¥ã·¥ú…¥ …¥·¥è  Ä·¥á·¥†·¥á…¥…¢·¥á
-·¥Ä·¥ç·¥Ä…¢…™  ô Ä…™ ü ü…™·¥Ä…¥·¥õ ·¥ò·¥Ä Ä·¥ã
- ú è·¥è·¥ú·¥ã·¥Ä
-·¥è Ä·¥á…¢·¥Ä…™ Ä·¥ú
-·¥õ·¥Ä…¥·¥Ä·¥ã·¥Ä ·¥ã·¥ú…¥
-·¥ã…™s ú·¥ú·¥ã·¥ú …¢·¥Ä·¥ã·¥ã·¥è·¥ú ·¥ä·¥ú ü ü…™·¥á·¥õ
- è·¥è·¥ú·¥ã·¥ès·¥è ·¥ä·¥è·¥õs·¥ú Ä è·¥è·¥ã·¥ú s ú…™·¥ä·¥è·¥ú s ú·¥ú…¢…™ …¥·¥è ·¥ã è·¥è·¥ús ú…™·¥õs·¥ú ·¥á
-·¥Ä·¥ç·¥Ä…¢·¥Ä·¥ç…™ SS
HOROR:
- G ú·¥ès·¥õ ·¥Ä·¥õ s·¥Ñ ú·¥è·¥è ü
- B·¥è·¥è…¢…™·¥á·¥ò·¥è·¥ò ·¥ò ú·¥Ä…¥·¥õ·¥è·¥ç
- P·¥á·¥õ s ú·¥è·¥òs ·¥è“ì  ú·¥è Ä Ä·¥è Ä
- C·¥Ä·¥õ s·¥è·¥ú·¥ò
- H…™ ú·¥ú Ä·¥Äs ú…™ …¥·¥è …¥·¥Ä·¥ã·¥ú ·¥ã·¥è Ä·¥è …¥…™

- I·¥õ·¥è·¥ú ·¥ä·¥ú…¥·¥ä…™
- A…¥·¥è·¥õ ú·¥á Ä
- K·¥è·¥°·¥Ä ô·¥è…¥
- B ü·¥è·¥è·¥Ö ·¥Ñ
- B ü·¥è·¥è·¥Ö +
- K·¥Ä·¥ã·¥ú Ä·¥á…¥ ô·¥è
- J…™·¥ã·¥è…¢·¥ú s ú·¥è·¥ú·¥ä·¥è
- G ú·¥ès·¥õ  ú·¥ú…¥·¥õ
- K·¥Ä…¢·¥á·¥°·¥Ä…¥…™
- Y·¥Ä·¥ç…™ s ú…™ ô·¥Ä…™…™
- H…™…¢·¥ú Ä·¥Äs ú…™ …¥·¥è …¥·¥Ä·¥ã·¥ú ·¥ã·¥è Ä·¥è …¥…™
- C·¥è Ä·¥òs·¥á ·¥ò·¥Ä Ä·¥õ è
- S·¥á Ä…™·¥Ä ü ·¥áx·¥ò·¥á Ä…™·¥ç·¥á…¥·¥õ  ü·¥Ä…™…¥
- E ü“ì·¥á…¥  ü·¥á…™·¥Ö
- S ú…™·¥ã…™
- G·¥Ä…¥·¥õ·¥¢
- G è·¥è : T·¥è·¥ã è·¥è “ì…™s ú ·¥Ä·¥õ·¥õ·¥Ä·¥Ñ·¥ã
- T·¥è·¥ã è·¥è …¢ ú·¥è·¥ú ü
- K…™s·¥á…™·¥ä·¥ú
- M·¥è…¥·¥è…¥·¥è·¥ã·¥á
- A·¥ä…™…¥
- G·¥Ä·¥ã·¥ã·¥è·¥ú…¢·¥ú Ä·¥Äs ú…™
- D·¥á·¥Ä·¥Ö·¥ç·¥Ä…¥ ·¥°·¥è…¥·¥Ö·¥á Ä ü·¥Ä…¥·¥Ö
- H·¥á ü üs…™…¥…¢
C·¥Ä Ä…™  è…¢  ü·¥ú s·¥ú·¥ã·¥Ä
[11/5 20:43] E ü“ì: R·¥á·¥ã·¥è·¥ç·¥á…¥·¥Ö·¥Äs…™ A…¥…™·¥ç·¥á

A·¥Ñ·¥õ…™·¥è…¥
1. O…¥·¥á P…™·¥á·¥Ñ·¥á
2. N·¥Ä Ä·¥ú·¥õ·¥è
3. D Ä·¥Ä…¢·¥è…¥ B·¥Ä ü ü
4. S ú…™…¥…¢·¥á·¥ã…™ …¥·¥è K è·¥è·¥ä…™…¥
5. O…¥·¥á P·¥ú…¥·¥Ñ ú M·¥Ä…¥
6. H·¥ú…¥·¥õ·¥á Ä x H·¥ú…¥·¥õ·¥á Ä
7. B ü·¥á·¥Ä·¥Ñ ú
8. C·¥è·¥Ö·¥á: B Ä·¥á·¥Ä·¥ã·¥á Ä
9. F·¥ú ü ü·¥ç·¥á·¥õ·¥Ä ü A ü·¥Ñ ú·¥á·¥ç…™s·¥õ : B Ä·¥è·¥õ ú·¥á Ä ú·¥è·¥è·¥Ö
10. F·¥Ä…™ Ä è T·¥Ä…™ ü
11. G…™…¥·¥õ·¥Ä·¥ç·¥Ä
12. S·¥°·¥è Ä·¥Ö A Ä·¥õ O…¥ ü…™…¥·¥á
13. 91 D·¥Ä ès
14. A·¥Ñ·¥Ñ·¥á ü W·¥è Ä ü·¥Ö
15. A…™ Ä G·¥á·¥Ä Ä
16. A·¥ã·¥Ä·¥ç·¥á …¢·¥Ä K…™ ü ü!
17. A ü·¥Ö…¥·¥è·¥Ä ú.Z·¥á Ä·¥è
18. A…¥s·¥Ä·¥õs·¥ú K è·¥è·¥ús ú…™·¥õs·¥ú
19. A·¥è …¥·¥è Ex·¥è Ä·¥Ñ…™s·¥õ
20. A Äs ü·¥Ä…¥ S·¥á…¥·¥ã…™
21. B·¥Ä·¥Ñ·¥Ñ·¥Ä…¥·¥è!
22. B·¥á·¥á ü·¥¢·¥á ô·¥ú ô
23. B·¥á Äs·¥á Ä·¥ã
24. B ü·¥Ä·¥Ñ·¥ã B·¥ú ü ü·¥á·¥õ
25. B ü·¥è·¥è·¥Ö L·¥Ä·¥Ö
26. B ü·¥è·¥è·¥Ö+
27. B·¥è·¥ã·¥ú …¥·¥è H·¥á Ä·¥è A·¥Ñ·¥Ä·¥Ö·¥á·¥ç…™·¥Ä
28. B·¥è Ä·¥ú·¥õ·¥è
29. B·¥õ·¥è·¥è·¥è·¥ç!
30. C ü·¥Ä è·¥ç·¥è Ä·¥á
31. C·¥è·¥Ö·¥á G·¥á·¥Äss
32. C·¥è·¥° ô·¥è è B·¥á ô·¥è·¥ò
33. D.G Ä·¥Ä è-·¥ç·¥Ä…¥
34. D·¥Ä…¥…¢·¥Ä…¥ Ä·¥è…¥·¥ò·¥Ä S·¥á Ä…™·¥ás
35. D·¥Ä Ä·¥ã·¥á Ä ·¥õ ú·¥Ä…¥ B ü·¥Ä·¥Ñ·¥ã S·¥á Ä…™·¥ás
36. D·¥á·¥Ä·¥Ö·¥ç·¥Ä…¥ W·¥è…¥·¥Ö·¥á Ä ü·¥Ä…¥·¥Ö
37. F·¥Ä·¥õ·¥á S·¥á Ä…™·¥ás
38. F ü·¥Ä·¥ç·¥á ·¥è“ì R·¥á·¥Ñ·¥Ñ·¥Ä
39. F·¥ú ü ü M·¥á·¥õ·¥Ä ü P·¥Ä…¥…™·¥Ñ!
40. G·¥Ä…¥…¢s·¥õ·¥Ä
41. G·¥Ä…¥·¥õ·¥¢
42. G·¥Ä-R·¥á…™: Z·¥á Ä·¥è
43. G·¥è·¥Ö E·¥Ä·¥õ·¥á Ä
44. G·¥ú…™ ü·¥õ è C Ä·¥è·¥°…¥
45. H·¥á ü üs…™…¥…¢
46. H…™…¢·¥Äs ú…™ …¥·¥è E·¥Ö·¥á…¥
47. H…™…¢ ús·¥Ñ ú·¥è·¥è ü ·¥è“ì ·¥õ ú·¥á D·¥á·¥Ä·¥Ö
48. I…¥·¥úY·¥Äs ú·¥Ä
49. K (P Ä·¥è·¥ä·¥á·¥Ñ·¥õ K)
50. K·¥Ä·¥õ·¥Ä…¥·¥Ä…¢·¥Ä·¥õ·¥Ä Ä…™
51. K·¥Ä·¥õ·¥á·¥ã è·¥è H…™·¥õ·¥ç·¥Ä…¥ R·¥á ô·¥è Ä…¥!
52. K…™ ü ü  ü·¥Ä K…™ ü ü
53. K…™s·¥á…™·¥ä·¥ú·¥ú: S·¥á…™ …¥·¥è K·¥Ä·¥ã·¥ú Ä…™·¥õs·¥ú
54. K·¥è·¥ú·¥õ·¥á·¥õs·¥ú·¥ä·¥è·¥ú …¥·¥è K·¥Ä ô·¥Ä…¥·¥á Ä…™
55. K·¥ú Ä·¥ès ú…™·¥õs·¥ú·¥ä…™ (B ü·¥Ä·¥Ñ·¥ã B·¥ú·¥õ ü·¥á Ä)
56. M·¥Ä…¢…™ S·¥á Ä…™·¥ás
57. M…™ Ä·¥Ä…™ N…™·¥ã·¥ã…™
58. M·¥è ô Ps è·¥Ñ ú·¥è 100
59. N·¥Ä…¥·¥Ä·¥õs·¥ú …¥·¥è T·¥Ä…™·¥¢·¥Ä…™
60. N·¥á·¥è…¥ G·¥á…¥·¥ás…™s E·¥†·¥Ä…¥…¢·¥á ü…™·¥è…¥
61. N·¥è Ä·¥Ä…¢·¥Ä·¥ç…™
62. N·¥ú Ä·¥Ä Ä…™ ú è·¥è…¥ …¥·¥è M·¥Ä…¢·¥è
63. O·¥†·¥á Ä ü·¥è Ä·¥Ö
64. O·¥°·¥Ä Ä…™ …¥·¥è S·¥á Ä·¥Ä·¥ò ú
65. Ps è·¥Ñ ú·¥è-P·¥Äss
66. R·¥ú Ä·¥è·¥ú…¥…™ K·¥á…¥s ú…™…¥
67. S·¥Ä·¥ç·¥ú Ä·¥Ä…™ C ú·¥Ä·¥ç·¥ò ü·¥è·¥è
68. S ú·¥Ä·¥ã·¥ú…¢·¥Ä…¥ …¥·¥è S ú·¥Ä…¥·¥Ä
69. S ú…™·¥ä·¥è·¥ú S·¥Ä…™·¥ã è·¥è·¥ú …¥·¥è D·¥ás ú…™ K·¥á…¥…™·¥Ñ ú…™
70. S ú…™…¥…¢·¥á·¥ã…™ …¥·¥è B·¥Ä ú·¥Ä·¥ç·¥ú·¥õ S·¥á Ä…™·¥ás
71. S·¥è·¥ú ü E·¥Ä·¥õ·¥á Ä
72. S·¥õ Ä…™·¥ã·¥á ·¥õ ú·¥á B ü·¥è·¥è·¥Ö
73. T·¥Ä ü·¥ás ·¥è“ì Z·¥ás·¥õ…™ Ä…™·¥Ä ·¥õ ú·¥á X
74. T·¥è·¥Ä Ä·¥ú S·¥á Ä…™·¥ás
75. T·¥è·¥ã è·¥è G ú·¥è·¥ú ü
76. Us ú…™·¥è ·¥õ·¥è T·¥è Ä·¥Ä
77. Z·¥á·¥õs·¥ú·¥á…¥ …¥·¥è T·¥á·¥ç·¥ò·¥ás·¥õ

A·¥Ö·¥†·¥á…¥·¥õ·¥ú Ä·¥á
1. O…¥·¥á P…™·¥á·¥Ñ·¥á
2. M·¥ús ú…™s ú…™
3. Z·¥á Ä·¥è …¥·¥è Ts·¥ú·¥ã·¥Ä…™·¥ç·¥Ä
4. M·¥Ä·¥Ö·¥á I…¥ A ô èss
5. C ü·¥Ä è·¥ç·¥è Ä·¥á
6. BTOOOM
7. S ú…™…¥…¢·¥á·¥ã…™ …¥·¥è B·¥Ä ú·¥Ä·¥ç·¥ú·¥õ S·¥á Ä…™·¥ás
8. R·¥è·¥ã·¥ã·¥Ä N·¥è Y·¥ú·¥ús ú·¥Ä
9. F·¥ú ü ü·¥ç·¥á·¥õ·¥Ä ü A ü·¥Ñ ú·¥á·¥ç…™s·¥õ: B Ä·¥è·¥õ ú·¥á Ä ú·¥è·¥è·¥Ö
10. M·¥Ä…¢…™ S·¥á Ä…™·¥ás
11. H·¥ú…¥·¥õ·¥á Ä x H·¥ú…¥·¥õ·¥á Ä 
12. A·¥ã·¥Ä·¥õs·¥ú·¥ã…™ …¥·¥è Y·¥è…¥·¥Ä 
13. N·¥Ä Ä·¥ú·¥õ·¥è S·¥á Ä…™·¥ás
14. O·¥è·¥ã·¥Ä·¥ç…™ ·¥õ·¥è K·¥è·¥ús ú…™…¥ Ä è·¥è·¥ú 
15. F·¥Ä…™ Ä è T·¥Ä…™ ü
16. H·¥è·¥° ü …¥·¥è U…¢·¥è·¥ã·¥ú S ú…™ Ä·¥è
17. K·¥Ä·¥õ·¥Ä…¥·¥Ä…¢·¥Ä·¥õ·¥Ä Ä…™ 
18. C·¥è·¥Ö·¥á G·¥á·¥Äss
19. K…™…¥·¥è …¥·¥è T·¥Ä ô…™: T ú·¥á B·¥á·¥Ä·¥ú·¥õ…™“ì·¥ú ü W·¥è Ä ü·¥Ö
20. S·¥è·¥ú ü E·¥Ä·¥õ·¥á Ä
21. T·¥á…¥…¢·¥á…¥ T·¥è·¥ò·¥ò·¥Ä G·¥ú Ä Ä·¥á…¥ L·¥Ä…¢·¥Ä…¥…¥
22. A·¥ã·¥Ä·¥ç·¥á …¢·¥Ä K…™ ü ü!
23. S·¥°·¥è Ä·¥Ö A Ä·¥õ O…¥ ü…™…¥·¥á
24. D Ä·¥Ä…¢·¥è…¥ B·¥Ä ü ü
25. N·¥Ä…¥·¥Ä·¥õs·¥ú …¥·¥è T·¥Ä…™·¥¢·¥Ä…™ 
26. L…™·¥õ·¥õ ü·¥á W…™·¥õ·¥Ñ ú A·¥Ñ·¥Ä·¥Ö·¥á·¥ç…™·¥Ä
27. R·¥è·¥ç·¥á·¥è …¥·¥è A·¥è…™ S·¥è Ä·¥Ä
28. S·¥è Ä·¥Ä  è·¥è Ä…™ ·¥ç·¥è T·¥è·¥è…™ B·¥Äs ú·¥è
29. C·¥è·¥° ô·¥è è B·¥á ô·¥è·¥ò
30. S·¥á…¥ ·¥õ·¥è C ú…™ ú…™ Ä·¥è …¥·¥è K·¥Ä·¥ç…™·¥ã·¥Ä·¥ã·¥ús ú…™
31. N·¥ú Ä·¥Ä Ä…™ ú è·¥è…¥ N·¥è M·¥Ä…¢·¥è
32. L·¥è…¢ H·¥è Ä…™·¥¢·¥è…¥
33. T·¥è Ä…™·¥ã·¥è
34. G·¥Ä Ä…¢·¥Ä…¥·¥õ…™·¥Ä ·¥è…¥ ·¥õ ú·¥á V·¥á Ä·¥Ö·¥ú Ä·¥è·¥ús P ü·¥Ä…¥·¥á·¥õ
35. J·¥è·¥ä·¥è‚Äôs B…™·¥¢·¥Ä Ä Ä·¥á A·¥Ö·¥†·¥á…¥·¥õ·¥ú Ä·¥á
36. E·¥ú Ä·¥á·¥ã·¥Ä S·¥á·¥†·¥á…¥
37. B ü·¥Ä·¥Ñ·¥ã L·¥Ä…¢·¥è·¥è…¥
38. D.G Ä·¥Ä è-·¥ç·¥Ä…¥
39. A·¥õ·¥õ·¥Ä·¥Ñ·¥ã ·¥è…¥ T…™·¥õ·¥Ä…¥
40. I…¥·¥úY·¥Äs ú·¥Ä
41. S·¥Ä·¥ç·¥ú Ä·¥Ä…™ C ú·¥Ä·¥ç·¥ò ü·¥è·¥è
42. N·¥è Ä·¥Ä…¢·¥Ä·¥ç…™
43. N·¥è G·¥Ä·¥ç·¥á N·¥è L…™“ì·¥á
44. R·¥Ä·¥Ö…™·¥Ä…¥·¥õ

M·¥á·¥Ñ ú·¥Ä
1. T·¥á…¥…¢·¥á…¥ T·¥è·¥ò·¥ò·¥Ä G·¥ú Ä Ä·¥á…¥ L·¥Ä…¢·¥Ä…¥…¥
2. F·¥ú ü ü M·¥á·¥õ·¥Ä ü P·¥Ä…¥…™·¥Ñ!
3. C Ä·¥èss A…¥…¢·¥á: T·¥á…¥s ú…™ ·¥õ·¥è R è·¥ú·¥ú …¥·¥è R·¥è…¥·¥Ö·¥è
4. N·¥á·¥è…¥ G·¥á…¥·¥ás…™s E·¥†·¥Ä…¥…¢·¥á ü…™·¥è…¥
5. E·¥ú Ä·¥á·¥ã·¥Ä S·¥á·¥†·¥á…¥
6. K·¥Ä·¥ã·¥ú·¥ç·¥á…™·¥ã…™ V·¥Ä ü·¥† Ä·¥Ä·¥†·¥á (V·¥Ä ü·¥† Ä·¥Ä·¥†·¥á ·¥õ ú·¥á L…™ ô·¥á Ä·¥Ä·¥õ·¥è Ä)
7. M·¥è ô…™ ü·¥á S·¥ú…™·¥õ G·¥ú…¥·¥Ö·¥Ä·¥ç 00
8. B·¥ú·¥Ö·¥Ö è C·¥è·¥ç·¥ò ü·¥áx
9. A ü·¥Ö…¥·¥è·¥Ä ú.Z·¥á Ä·¥è
10. C·¥è·¥Ö·¥á G·¥á·¥Äss
11. D·¥Ä·¥õ·¥á A L…™·¥†·¥á
12. G·¥á…¥·¥ás…™s ·¥è“ì Aœô·¥ú·¥Ä Ä…™·¥è…¥ (S·¥è·¥ús·¥á…™ …¥·¥è Aœô·¥ú·¥Ä Ä…™·¥è…¥)
13. V…™s…™·¥è…¥ ·¥è“ì Es·¥Ñ·¥Ä“ì ü·¥è·¥°…¥·¥á 
14. M·¥Ä·¥Ñ Ä·¥èss S·¥á Ä…™·¥ás
15. G ú·¥ès·¥õ …™…¥ ·¥õ ú·¥á S ú·¥á ü ü: S·¥õ·¥Ä…¥·¥Ö A ü·¥è…¥·¥á C·¥è·¥ç·¥ò ü·¥áx
16. R·¥Ä úX·¥á·¥ò ú·¥è…¥
17. Y·¥ú·¥ús ú·¥Ä-O·¥ú G·¥Ä·¥èG·¥Ä…™G·¥Ä Ä
18. FLCL
19. IS: I…¥“ì…™…¥…™·¥õ·¥á S·¥õ Ä·¥Ä·¥õ·¥ès
20. D·¥Ä Ä ü…™…¥…¢ …™…¥ ·¥õ ú·¥á F Ä·¥Ä…¥XX
21. S·¥ú…™s·¥á…™ …¥·¥è G·¥Ä Ä…¢·¥Ä…¥·¥õ…™·¥Ä
22. U…¥·¥Ö·¥á“ì·¥á·¥Ä·¥õ·¥á·¥Ö B·¥Ä ú·¥Ä·¥ç·¥ú·¥õ C ú Ä·¥è…¥…™·¥Ñ ü·¥á
23. H·¥ú…¥·¥Ö Ä·¥á·¥Ö
24. S…™·¥Ö·¥è…¥…™·¥Ä …¥·¥è K…™s ú…™
25. R·¥è ô·¥è·¥õ…™·¥Ñs;N·¥è·¥õ·¥ás
26. H·¥ès ú…™ …¥·¥è K·¥è·¥á
27. G·¥ú…¥·¥Ö·¥Ä·¥ç W…™…¥…¢
28. B·¥è·¥ã·¥ú Ä·¥Ä…¥·¥è
29. M·¥è ô…™ ü·¥áS·¥ú…™·¥õG·¥ú…¥·¥Ö·¥Ä·¥ç:I Ä·¥è…¥-B ü·¥è·¥è·¥Ö·¥á·¥Ö O Ä·¥ò ú·¥Ä…¥s
30. K…¥…™…¢ ú·¥õ‚Äôs & M·¥Ä…¢…™·¥Ñ
31. H·¥á·¥Ä·¥† è O ô·¥ä·¥á·¥Ñ·¥õ
32. S·¥Ä·¥ç·¥ú Ä·¥Ä…™ S·¥á·¥†·¥á…¥
33. C·¥è·¥ç·¥á·¥õ L·¥ú·¥Ñ…™“ì·¥á Ä
34. S·¥õ·¥Ä Ä D Ä…™·¥†·¥á Ä: K·¥Ä…¢·¥Ä è·¥Ä·¥ã…™ …¥·¥è T·¥Ä·¥ã·¥ú·¥õ·¥è
35. As·¥ú Ä·¥Ä C Ä è…™…¥'
36. H·¥á Ä·¥è…™·¥Ñ A…¢·¥á
37. Aœô·¥ú·¥Ä Ä…™·¥è…¥ E·¥†·¥è ü
38. K·¥ú Ä·¥è·¥ç·¥ú·¥ã·¥ú Ä·¥è
39. N·¥è ô·¥ú…¥·¥Ä…¢·¥Ä ·¥õ ú·¥á F·¥è·¥è ü
40. S·¥Ñ ú·¥°·¥Ä Ä·¥¢·¥ás·¥ç·¥Ä Ä·¥ã·¥á…¥
41. T·¥è·¥ò ·¥°·¥è N·¥á Ä·¥Ä·¥á! G·¥ú…¥ ô·¥ús·¥õ·¥á Ä
42. S·¥Ñ Ä·¥Ä·¥ò·¥ò·¥á·¥Ö P Ä…™…¥·¥Ñ·¥áss
43. B Ä·¥á·¥Ä·¥ã B ü·¥Ä·¥Ö·¥á
44. M·¥ú·¥†-L·¥ú·¥† A ü·¥õ·¥á Ä…¥·¥Ä·¥õ…™·¥†·¥á: T·¥è·¥õ·¥Ä ü E·¥Ñ ü…™·¥òs·¥á
45. R·¥Ä·¥ã·¥ú·¥á…¥ Ts·¥ú…™ ú·¥è·¥ú 
46. V·¥Ä…¥·¥Ö Ä·¥á·¥Ä·¥Ö
47. B·¥ú ô·¥ú·¥ã…™ B·¥ú Ä·¥Ä…¥·¥ã…™
48. A·¥ò·¥ò ü·¥ás·¥á·¥á·¥Ö (2004)
49. D Ä·¥Ä…¢·¥è…¥·¥Ä·¥ú·¥õ: T ú·¥á R·¥ás·¥è…¥·¥Ä…¥·¥Ñ·¥á
50. G·¥ú…¥ X S·¥°·¥è Ä·¥Ö

C·¥Ä Äs
1. T·¥Ä·¥ã·¥ú·¥ç…™'s AE86 / I…¥…™·¥õ…™·¥Ä ü D
2. A·¥ã…™·¥è's F·¥Ä…™ Ä L·¥Ä·¥Ö è Z / W·¥Ä…¥…¢·¥Ä…¥ M…™·¥Ö…¥…™…¢ ú·¥õ
3. JP's T Ä·¥Ä…¥s·¥Ä·¥ç / R·¥á·¥Ö ü…™…¥·¥á
4. N…™·¥Ñ·¥è's M·¥á Ä·¥Ñ·¥á·¥Ö·¥ás A-·¥Ñ ü·¥Äss / N·¥áx·¥õ A-·¥Ñ ü·¥Äss
5. K·¥Ä·¥ã·¥á Ä·¥ú's R·¥Ä…™ ü ô…™ Ä·¥Ö / C ú·¥è·¥ús·¥è·¥ã·¥ú H·¥á…¥·¥ã·¥á…™ G è Ä·¥è·¥¢·¥á·¥õ·¥õ·¥á Ä
6. S·¥è…™·¥Ñ ú…™'s L·¥è·¥õ·¥ús S·¥ú·¥ò·¥á Ä 7 / ·¥áX-D Ä…™·¥†·¥á Ä: T ú·¥á ·¥ç·¥è·¥†…™·¥á
7. S ú…™ Ä·¥è's ·¥ç·¥è·¥Ö…™“ì…™·¥á·¥Ö F-1 / T·¥Ä…™ ü·¥á…¥·¥Ö·¥á Äs
8. V…™·¥Ñ·¥á P Ä…™…¥·¥Ñ…™·¥ò·¥Ä ü U·¥Ñ ú…™ è·¥Ä·¥ç·¥Ä·¥Ö·¥Ä's T·¥è è·¥è·¥õ·¥Ä C Ä·¥ás·¥õ·¥Ä / GTO
9. C·¥Ä·¥ò·¥á·¥õ·¥Ä's F·¥è Ä·¥ç·¥ú ü·¥Ä O…¥·¥á / C·¥Ä·¥ò·¥á·¥õ·¥Ä
10. R·¥è·¥ç·¥Ä…¥ ·¥Ä…¥·¥Ö O·¥õ·¥õ·¥è's s ú·¥Ä Ä·¥ã ·¥Ñ·¥Ä Ä / C·¥è·¥ç·¥á·¥õ L·¥ú·¥Ñ…™“ì·¥á Ä

D Ä·¥Ä·¥ç·¥Ä
1. R·¥áLIFE
2. Ts·¥ú·¥ã…™ …¢·¥Ä K…™ Ä·¥á…™
3. A…¥·¥èH·¥Ä…¥·¥Ä
4. S ú…™…¢·¥Ä·¥õs·¥ú ·¥°·¥Ä K…™·¥ç…™ …¥·¥è Us·¥è
5. M·¥Ä·¥Ö·¥á I…¥ A ô èss
6. K…™·¥ç…™ …¥·¥è N·¥Ä·¥°·¥Ä
7. R·¥á: Z·¥á Ä·¥è ·¥ã·¥Ä Ä·¥Ä H·¥Ä·¥ä…™·¥ç·¥á Ä·¥ú Is·¥á·¥ã·¥Ä…™ S·¥á…™·¥ã·¥Ä·¥õs·¥ú
8. F·¥ú ü ü·¥ç·¥á·¥õ·¥Ä ü A ü·¥Ñ ú·¥á·¥ç…™s·¥õ: B Ä·¥è·¥õ ú·¥á Ä ú·¥è·¥è·¥Ö
9. A…¥…¢·¥á ü B·¥á·¥Ä·¥õs
10. C ú·¥ú·¥ú…¥…™ ô è·¥è·¥ú ·¥Ö·¥á·¥ç·¥è K·¥è…™ …¢·¥Ä S ú…™·¥õ·¥Ä…™!
11. C ú·¥Ä Ä ü·¥è·¥õ·¥õ·¥á
12. S·¥Ä·¥ã·¥ú Ä·¥Äs·¥è·¥ú …¥·¥è P·¥á·¥õ …¥·¥Ä K·¥Ä…¥·¥è·¥ä·¥è
13. K·¥ú·¥¢·¥ú …¥·¥è H·¥è…¥·¥ã·¥Ä…™
14. E Ä·¥è·¥ç·¥Ä…¥…¢·¥Ä-s·¥á…¥s·¥á…™
15. A·¥è H·¥Ä Ä·¥ú R…™·¥Ö·¥á
16. K·¥è·¥á …¥·¥è K·¥Ä·¥õ·¥Ä·¥Ñ ú…™
17. S ú…™…¥…¢·¥á·¥ã…™ …¥·¥è K è·¥è·¥ú·¥ä…™…¥
18. C ü·¥Ä…¥…¥·¥Ä·¥Ö
19. W ú…™·¥õ·¥á A ü ô·¥ú·¥ç

F·¥Ä…¥·¥õ·¥Äs è
1. O…¥·¥á P…™·¥á·¥Ñ·¥á
2. M·¥Ä·¥Ö·¥á …™…¥ A ô èss
3. R·¥á:Z·¥á Ä·¥è ·¥ã·¥Ä Ä·¥Ä H·¥Ä·¥ä…™·¥ç·¥á Ä·¥ú Is·¥á·¥ã·¥Ä…™ S·¥á…™·¥ã·¥Ä·¥õs·¥ú
4. D·¥Ä…¥M·¥Ä·¥Ñ ú…™
5. O·¥†·¥á ÄL·¥è Ä·¥Ö
6. S·¥Ä è·¥è…¥·¥Ä Ä·¥Ä …¥·¥è As·¥Ä …¥…™ Y·¥Ä·¥ã·¥ús·¥è·¥ã·¥úh…¥·¥è H·¥Ä…¥·¥Ä ·¥°·¥è 
7. T·¥Ä ü·¥ás ·¥è“ì Z·¥ás·¥õ…™ Ä…™·¥Ä ·¥õ ú·¥á X
8. O·¥è·¥ã·¥Ä·¥ç…™ ·¥õ·¥è K·¥è·¥ús ú…™…¥ Ä è·¥è·¥ú
9. A·¥ã·¥Ä·¥õs·¥ú·¥ã…™ …¥·¥è Y·¥è…¥·¥Ä
10. F·¥ú ü ü·¥ç·¥á·¥õ·¥Ä ü A ü·¥Ñ ú·¥á·¥ç…™s·¥õ: B Ä·¥è·¥õ ú·¥á Ä ú·¥è·¥è·¥Ö
11. L·¥è…¢ H·¥è Ä…™·¥¢·¥è…¥
12. B·¥á Äs·¥á Ä·¥ã
13. N·¥è G·¥Ä·¥ç·¥á N·¥è L…™“ì·¥á
14. N·¥Ä…¥·¥Ä·¥õs·¥ú …¥·¥è T·¥Ä…™·¥¢·¥Ä…™
15. M·¥Ä…¢…™ S·¥á Ä…™·¥ás
16. F·¥Ä…™ Ä è T·¥Ä…™ ü
17. H·¥ú…¥·¥õ·¥á Ä x H·¥ú…¥·¥õ·¥á Ä
18. N·¥Ä·¥õs·¥ú·¥ç·¥á Y·¥ú·¥ú·¥ä…™…¥·¥Ñ ú·¥è·¥ú
19. S·¥è·¥ú ü E·¥Ä·¥õ·¥á Ä
20. F·¥Ä·¥õ·¥á/s·¥õ·¥Ä è …¥…™…¢ ú·¥õ: U…¥ ü…™·¥ç…™·¥õ·¥á·¥Ö B ü·¥Ä·¥Ö·¥á W·¥è Ä·¥ãs
21. Z·¥á·¥õs·¥ú·¥á…¥ …¥·¥è T·¥á·¥ç·¥ò·¥ás·¥õ
22. K·¥á·¥ã·¥ã·¥Ä…™ S·¥á…¥s·¥á…¥
23. K·¥è ô·¥Ä·¥õ·¥è.
24. D Ä…™“ì·¥õ·¥á Äs
25. H·¥Ä…™ ô·¥Ä…¥·¥á R·¥á…¥·¥ç·¥á…™
26. M·¥Ä ú·¥è·¥ú·¥ä…™…¥ G·¥ú Ä·¥ú…¢·¥ú Ä·¥ú
27. G·¥Ä·¥õ·¥á: J…™·¥á…™·¥õ·¥Ä…™ K·¥Ä…¥·¥è·¥Ñ ú…™ N…™·¥õ·¥á, K·¥Ä·¥ã·¥ú T·¥Ä·¥õ·¥Ä·¥ã·¥Ä·¥á Ä…™
28. S ú…™…¥…¢·¥á·¥ã…™ …¥·¥è B·¥Ä ú·¥Ä·¥ç·¥ú·¥õ S·¥á Ä…™·¥ás
29. K·¥è…¥·¥ès·¥ú ô·¥Ä
30. S·¥°·¥è Ä·¥Ö A Ä·¥õ O…¥ ü…™…¥·¥á
31. V…™·¥è ü·¥á·¥õ E·¥†·¥á Ä…¢·¥Ä Ä·¥Ö·¥á…¥
32. M·¥ús ú…™s ú…™
33. H·¥è·¥° ü …¥·¥è U…¢·¥è·¥ã·¥ú S ú…™ Ä·¥è
34. A Ä…™·¥Ä T ú·¥á O Ä…™…¢…™…¥·¥Ä·¥õ…™·¥è…¥
35. K·¥Ä·¥ç…™s·¥Ä·¥ç·¥Ä H·¥Ä·¥ä…™·¥ç·¥á·¥ç·¥Äs ú…™·¥õ·¥Ä
36. H·¥è·¥ús·¥á·¥ã…™ …¥·¥è K·¥ú…¥…™
37. P Ä…™…¥·¥Ñ·¥áss M·¥è…¥·¥è…¥·¥è·¥ã·¥á
38. K·¥á·¥ç·¥è…¥·¥è …¥·¥è S·¥è·¥ú·¥ä·¥Ä E Ä…™…¥
39. Y·¥Ä·¥è…¢·¥ú·¥Ä…™ M…™…¥…¢·¥Ö·¥Ä…¥
40. J·¥ú·¥ú…¥…™ K·¥è·¥ã·¥ú·¥ã…™
41. C·¥Ä Ä·¥Ö·¥Ñ·¥Ä·¥ò·¥õ·¥è Ä S·¥Ä·¥ã·¥ú Ä·¥Ä: C ü·¥á·¥Ä Ä C·¥Ä Ä·¥Ö- ú·¥á…¥
42. K·¥è ô·¥Ä è·¥Äs ú…™-s·¥Ä…¥ C ú…™ …¥·¥è M·¥Ä…™·¥Ö D Ä·¥Ä…¢·¥è…¥
43. U·¥Ñ ú·¥è·¥ú·¥õ·¥á…¥ K·¥Ä·¥¢·¥è·¥ã·¥ú
44. N·¥Ä…¢…™ …¥·¥è As·¥ú·¥ã·¥Ä Ä·¥Ä
45. M·¥Ä ú·¥è·¥ú·¥õs·¥ú·¥ã·¥Ä…™ …¥·¥è Y·¥è·¥ç·¥á
46. L…™·¥õ·¥õ ü·¥á W…™·¥õ·¥Ñ ú A·¥Ñ·¥Ä·¥Ö·¥á·¥ç…™·¥Ä

S·¥Ñ ú·¥è·¥è ü L…™“ì·¥á
1. A·¥è H·¥Ä Ä·¥ú R…™·¥Ö·¥á
2. H è·¥è·¥ú·¥ã·¥Ä
3. C ú·¥Ä Ä ü·¥è·¥õ·¥õ·¥á
4. K·¥è·¥ã·¥è Ä·¥è C·¥è…¥…¥·¥á·¥Ñ·¥õ
5. K·¥Ä Ä·¥Ä·¥ã·¥Ä…™ J·¥è·¥ú·¥¢·¥ú …¥·¥è T·¥Ä·¥ã·¥Ä…¢…™-s·¥Ä…¥
6. B·¥è·¥ã·¥ú D·¥Ä·¥ã·¥á …¢·¥Ä I…¥·¥Ä…™ M·¥Ä·¥Ñ ú…™
7. T·¥è Ä·¥Ä·¥Ö·¥è Ä·¥Ä!
8. Ts·¥ú·¥ã…™ …¢·¥Ä K…™ Ä·¥á…™
9. K è·¥è·¥ú·¥ã·¥Ä…™ …¥·¥è K·¥Ä…¥·¥Ä·¥õ·¥Ä
10. R·¥áLIFE
11. S·¥°·¥è Ä·¥Ö A Ä·¥õ O…¥ ü…™…¥·¥á
12. A…¥·¥èH·¥Ä…¥·¥Ä
13. Iss ú·¥ú·¥ã·¥Ä…¥ F Ä…™·¥á…¥·¥Ös
14. S ú…™…¢·¥Ä·¥õs·¥ú ·¥°·¥Ä K…™·¥ç…™ …¥·¥è Us·¥è
15. K·¥ú·¥¢·¥ú …¥·¥è H·¥è…¥·¥ã·¥Ä…™
16. K…™·¥ç…™ …¥·¥è N·¥Ä·¥°·¥Ä
17. S·¥ú·¥ã…™·¥õ·¥õ·¥á I…™ …¥·¥Ä  è·¥è
18. S·¥Ä·¥ã·¥ú Ä·¥Äs·¥è·¥ú …¥·¥è P·¥á·¥õ …¥·¥Ä K·¥Ä…¥·¥è·¥ä·¥è
19. T·¥è·¥ã è·¥è R·¥Ä·¥†·¥á…¥s
20. H…™·¥ç·¥è·¥ú·¥õ·¥è U·¥ç·¥Ä Ä·¥ú-·¥Ñ ú·¥Ä…¥
21. M·¥Äs·¥Ä·¥ç·¥ú…¥·¥á-·¥ã·¥ú…¥ …¥·¥è R·¥á·¥†·¥á…¥…¢·¥á
22. T Ä…™…¥…™·¥õ è S·¥á·¥†·¥á…¥
23. A…¥…¢·¥á ü B·¥á·¥Ä·¥õs
24. B ü·¥á·¥Ä·¥Ñ ú
25. B ü·¥è·¥è·¥Ö-C
26. H…™…¢ ú S·¥Ñ ú·¥è·¥è ü DxD
27. B·¥è·¥ã·¥ú …¥·¥è H·¥á Ä·¥è A·¥Ñ·¥Ä·¥Ö·¥á·¥ç…™·¥Ä
28. S ú·¥è·¥ã·¥ú…¢·¥á·¥ã…™ …¥·¥è S·¥è·¥ú·¥ç·¥Ä
29. A…¥s·¥Ä·¥õs·¥ú K è·¥è·¥ús ú…™·¥õs·¥ú
30. T·¥è…¥·¥Ä Ä…™ …¥·¥è K·¥Ä…™ ô·¥ú·¥õs·¥ú-·¥ã·¥ú…¥
31. O Ä·¥Ä…¥…¢·¥á
32. K…™·¥ç…™ …¥…™ T·¥è·¥Ö·¥è·¥ã·¥á
33. S·¥Ä·¥ã·¥Ä·¥ç·¥è·¥õ·¥è ·¥Ö·¥ás·¥ú …¢·¥Ä?
34. C ú·¥ú·¥ú…¥…™ ô è·¥è·¥ú ·¥Ö·¥á·¥ç·¥è K·¥è…™ …¢·¥Ä S ú…™·¥õ·¥Ä…™!
35. K·¥ú Ä·¥è·¥ã·¥è …¥·¥è B·¥Äs·¥ú·¥ã·¥á
36. N…™s·¥á·¥ã·¥è…™
37. S·¥Ä·¥á…¥·¥Ä…™ H·¥á Ä·¥è…™…¥·¥á …¥·¥è S·¥è·¥Ö·¥Ä·¥õ·¥á·¥ã·¥Ä·¥õ·¥Ä
38. H…™ ô…™·¥ã·¥á! E·¥ú·¥ò ú·¥è…¥…™·¥ú·¥ç
39. N·¥è…¥ N·¥è…¥ B…™ è·¥è Ä…™
40. G·¥Ä ô Ä…™·¥á ü D Ä·¥è·¥òO·¥ú·¥õ
41. A ú·¥è G…™ Ä ü
42. I·¥õs·¥ú·¥Ö·¥Ä·¥õ·¥õ·¥á B·¥è·¥ã·¥ú Ä·¥Ä …¥·¥è K·¥è…™ ·¥°·¥Ä 10-C·¥á…¥·¥õ…™·¥ç·¥á·¥õ·¥á Äs D·¥Ä·¥õ·¥õ·¥Ä
43. J·¥ús·¥õ B·¥á·¥Ñ·¥Ä·¥ús·¥á!
44. K·¥è·¥á …¥·¥è K·¥Ä·¥õ·¥Ä·¥Ñ ú…™
45. K·¥è·¥ã·¥è Ä·¥è …¢·¥Ä S·¥Ä·¥ã·¥á ô…™·¥õ·¥Ä…¢·¥Ä·¥õ·¥õ·¥á Ä·¥ú…¥·¥Ö·¥Ä

S ü…™·¥Ñ·¥á ·¥è“ì L…™“ì·¥á
1. G·¥á…¥s ú…™·¥ã·¥á…¥
2. S ú…™…¥ Ä è·¥Ä·¥ã·¥ú! I·¥ã·¥Ä M·¥ús·¥ú·¥ç·¥á
3. U·¥Ñ ú·¥è·¥ú·¥õ·¥á…¥ K·¥Ä·¥¢·¥è·¥ã·¥ú
4. K·¥è·¥õ·¥è…¥·¥è ú·¥Ä …¥·¥è N…™·¥°·¥Ä
5. M·¥ús ú…™s ú…™
6. P·¥Ä·¥ò·¥Ä …¥·¥è I·¥ú·¥ã·¥è·¥õ·¥è ·¥°·¥è K…™·¥ã…™…¥·¥Äs·¥Ä…™!
7. A…™ Ä
8. A…¥·¥è H…™ M…™·¥õ·¥Ä H·¥Ä…¥·¥Ä …¥·¥è N·¥Ä·¥ç·¥Ä·¥á ·¥°·¥è B·¥è·¥ã·¥ú·¥õ·¥Ä·¥Ñ ú…™ ·¥°·¥Ä M·¥Ä·¥Ö·¥Ä S ú…™ Ä·¥Ä…¥·¥Ä…™.
9. N·¥Ä·¥õs·¥ú·¥ç·¥á Y·¥ú·¥ú·¥ä…™…¥·¥Ñ ú·¥è·¥ú
10. B·¥Ä Ä·¥Ä·¥ã·¥Ä·¥ç·¥è…¥ ·¥Ö·¥Ä…¥ H·¥Ä…¥·¥Ö·¥Ä-·¥ã·¥ú…¥
11. D·¥Ä…¢·¥Äs ú…™ K·¥Äs ú…™
12. A·¥ç·¥Ä·¥Ä·¥ç·¥Ä ·¥õ·¥è I…¥·¥Ä·¥¢·¥ú·¥ç·¥Ä
13. C ü·¥Ä…¥…¥·¥Ä·¥Ö
14. K·¥è ô·¥Ä è·¥Äs ú…™-s·¥Ä…¥ C ú…™ …¥·¥è M·¥Ä…™·¥Ö D Ä·¥Ä…¢·¥è…¥
15. H…™·¥ç·¥è·¥ú·¥õ·¥è! U·¥ç·¥Ä Ä·¥ú-·¥Ñ ú·¥Ä…¥
16. S·¥Ä·¥ã·¥ú Ä·¥Ä Q·¥ú·¥ás·¥õ
17. M·¥Ä ú·¥è·¥ú·¥õs·¥ú·¥ã·¥Ä…™ …¥·¥è Y·¥è·¥ç·¥á
18. K·¥Ä Ä·¥Ä·¥ã·¥Ä…™ J·¥è·¥ú·¥¢·¥ú …¥·¥è T·¥Ä·¥ã·¥Ä…¢…™-s·¥Ä…¥
19. S·¥è Ä·¥Ä  è·¥è Ä…™ ·¥ç·¥è T·¥è·¥è…™ B·¥Äs ú·¥è
20. S·¥á Ä·¥†·¥Ä…¥·¥õ x S·¥á Ä·¥†…™·¥Ñ·¥á
21. T·¥Ä·¥ç·¥Ä·¥ã·¥è L·¥è·¥†·¥á S·¥õ·¥è Ä è
22. N·¥è…¥ N·¥è…¥ B…™ è·¥è Ä…™
23. Us·¥Ä…¢…™ D Ä·¥è·¥ò
24. N·¥á·¥° G·¥Ä·¥ç·¥á!
25. W·¥è Ä·¥ã…™…¥…¢!! (W·¥Ä…¢…¥·¥Ä Ä…™·¥Ä!!) S·¥á Ä…™·¥ás
26. G·¥è·¥Ñ ú·¥ú·¥ú·¥ç·¥è…¥ ·¥°·¥Ä Us·¥Ä…¢…™ ·¥Ö·¥ás·¥ú ·¥ã·¥Ä??
27. A Ä…™·¥Ä T ú·¥á O Ä…™…¢…™…¥·¥Ä·¥õ…™·¥è…¥
28. U·¥Ñ ú·¥ú·¥ú K è·¥è·¥ú·¥Ö·¥Ä…™
28. N…™·¥Ñ ú…™·¥ä·¥è·¥ú
30. N·¥Ä…¥·¥Ä
31. K·¥á·¥ç·¥è…¥·¥è …¥·¥è S·¥è·¥ú·¥ä·¥Ä E Ä…™…¥
32. N·¥è·¥Ö·¥Ä·¥ç·¥á C·¥Ä…¥·¥õ·¥Ä ô…™ ü·¥á
33. D·¥Ä…¥s ú…™ K·¥è·¥ú·¥ã·¥è·¥ús·¥á…™ …¥·¥è N…™·¥Ñ ú…™·¥ä·¥è·¥ú
34. K-O…¥!
35. Y·¥ú Ä·¥ú C·¥Ä·¥ç·¥ò
36. G…™…¥ …¥·¥è S·¥Ä·¥ä…™
37. H·¥Ä·¥Ñ ú…™·¥ç…™·¥õs·¥ú ·¥õ·¥è C ü·¥è·¥†·¥á Ä
38. S·¥Ä·¥ã·¥ú Ä·¥Äs·¥è·¥ú …¥·¥è P·¥á·¥õ …¥·¥Ä K·¥Ä…¥·¥è·¥ä·¥è
39. R·¥áLIFE
40. K·¥ú Ä·¥Ä…¢·¥á ú…™·¥ç·¥á
41. S ú·¥è·¥ú·¥ä·¥è S ú·¥ú·¥ú·¥ç·¥Ä·¥õs·¥ú R è·¥è·¥ã·¥è·¥ú
42. E·¥†·¥á …¥·¥è J…™·¥ã·¥Ä…¥
43. H è·¥è·¥ú·¥ã·¥Ä
44. I·¥á N·¥Ä·¥ã…™ K·¥è R·¥á·¥ç è
45. T·¥Ä…¥·¥Ä·¥ã·¥Ä-·¥ã·¥ú…¥ ·¥°·¥Ä I·¥õs·¥ú·¥ç·¥è K·¥á·¥Ö·¥Ä Ä·¥ú…¢·¥á
46. S ú…™ Ä·¥è ô·¥Ä·¥ã·¥è
47. G Ä·¥á·¥Ä·¥õ T·¥á·¥Ä·¥Ñ ú·¥á Ä O…¥…™·¥¢·¥ú·¥ã·¥Ä
48. S·¥Ä…™·¥ã…™ K·¥ús·¥ú·¥è …¥·¥è Œ® N·¥Ä…¥
49. V…™·¥è ü·¥á·¥õ E·¥†·¥á Ä…¢·¥Ä Ä·¥Ö·¥á…¥
50. 3-…¢·¥Ä·¥õs·¥ú …¥·¥è L…™·¥è…¥
51. G·¥Ä·¥ã·¥ú·¥á…¥ B·¥Ä ô ès…™·¥õ·¥õ·¥á Äs
52. M…™·¥õs·¥ú ô·¥ès ú…™ C·¥è ü·¥è Äs
53. H…™…¥·¥Ä·¥ç·¥Ä·¥õs·¥ú Ä…™
54. T·¥Ä·¥Ö·¥Ä-·¥ã·¥ú…¥ ·¥°·¥Ä K·¥è…™ ·¥°·¥è S ú…™…¥·¥Ä…™
55. C·¥è·¥ç…™·¥Ñ G…™ Ä üs
56. B è·¥è·¥ús·¥è·¥ã·¥ú 5 C·¥á…¥·¥õ…™·¥ç·¥á·¥õ·¥á Ä
57. H·¥Ä…¥·¥Äs·¥Ä·¥ã·¥ú I Ä·¥è ú·¥Ä
58. D·¥á…¥·¥ò·¥Ä O…¥…¥·¥Ä ·¥õ·¥è S·¥á…™s ú·¥ú…¥ O·¥õ·¥è·¥ã·¥è

S·¥Ä·¥ç·¥ú Ä·¥Ä…™
1. S·¥Ä·¥ç·¥ú Ä·¥Ä…™ 7
2. R·¥ú Ä·¥è·¥ú…¥…™ K·¥á…¥s ú…™…¥
3. S·¥Ä·¥ç·¥ú Ä·¥Ä…™ C ú·¥Ä·¥ç·¥ò ü·¥è·¥è
4. A“ì Ä·¥è S·¥Ä·¥ç·¥ú Ä·¥Ä…™
5. S·¥á…¥…¢·¥è·¥ã·¥ú B·¥Äs·¥Ä Ä·¥Ä: S·¥Ä·¥ç·¥ú Ä·¥Ä…™ K…™…¥…¢s
6. G…™…¥·¥õ·¥Ä·¥ç·¥Ä
7. H·¥Ä·¥ã·¥ú·¥è·¥ú·¥ã…™
8. S·¥°·¥è Ä·¥Ö ·¥è“ì ·¥õ ú·¥á S·¥õ Ä·¥Ä…¥…¢·¥á Ä
9. B ü·¥Ä·¥Ö·¥á ·¥è“ì ·¥õ ú·¥á I·¥ç·¥ç·¥è Ä·¥õ·¥Ä ü
10. R·¥è…¥…™…¥ W·¥Ä Ä Ä…™·¥è Äs
11.S·¥Ä·¥ç·¥ú Ä·¥Ä…™ X

M…™ ü…™·¥õ·¥Ä Ä è
1. F·¥ú ü ü·¥ç·¥á·¥õ·¥Ä ü A ü·¥Ñ ú·¥á·¥ç…™s·¥õ: B Ä·¥è·¥õ ú·¥á Ä ú·¥è·¥è·¥Ö
2. S ú…™…¥…¢·¥á·¥ã…™ …¥·¥è K è·¥è·¥ä…™…¥
3. C·¥è·¥Ö·¥á G·¥á·¥Äss: H·¥Ä…¥…¢ è·¥Ä·¥ã·¥ú …¥·¥è L·¥á ü·¥è·¥ú·¥Ñ ú
4. O·¥°·¥Ä Ä…™ …¥·¥è S·¥á Ä·¥Ä·¥ò ú
5. G·¥Ä·¥õ·¥á: J…™·¥á…™·¥õ·¥Ä…™ K·¥Ä…¥·¥è·¥Ñ ú…™ …¥…™·¥õ·¥á, K·¥Ä·¥ã·¥ú T·¥Ä·¥õ·¥Ä·¥ã·¥Ä·¥á Ä…™
6. A ü·¥Ö…¥·¥è·¥Ä ú .Z·¥á Ä·¥è
7. G·¥è·¥Ö E·¥Ä·¥õ·¥á Ä
8. Y·¥è·¥ú·¥ä·¥è S·¥á…¥·¥ã…™ 
9. SAO A ü·¥õ·¥á Ä…¥·¥Ä·¥õ…™·¥†·¥á: G·¥ú…¥ G·¥Ä ü·¥á O…¥ ü…™…¥·¥á
10. N·¥á·¥ä…™·¥ç·¥Ä·¥ã…™ S·¥á…™ Ä·¥á…™ S·¥á…¥·¥ã…™: T·¥á…¥·¥ã è·¥è·¥ú …¥·¥è A ü·¥Ö·¥á Ä·¥Ä·¥ç…™…¥
11. G…™ Ä üs ·¥ú…¥·¥Ö P·¥Ä…¥·¥¢·¥á Ä
12. K·¥Ä…¥·¥õ·¥Ä…™ C·¥è ü ü·¥á·¥Ñ·¥õ…™·¥è…¥
13. M·¥ú·¥†-L·¥ú·¥† A ü·¥õ·¥á Ä…¥·¥Ä·¥õ…™·¥†·¥á: T·¥è·¥õ·¥Ä ü E·¥Ñ ü…™·¥òs·¥á
14. 07-G ú·¥ès·¥õ
15. M·¥è ô…™ ü·¥á S·¥ú…™·¥õ G·¥ú…¥·¥Ö·¥Ä·¥ç 00
16. K…™…¥…¢·¥Ö·¥è·¥ç
17. K·¥Ä·¥ã·¥ú·¥ç·¥á…™·¥ã…™ V·¥Ä ü·¥† Ä·¥Ä·¥†·¥á
18. S·¥õ Ä…™·¥ã·¥á W…™·¥õ·¥Ñ ú·¥ás
19. M·¥Ä·¥Ñ Ä·¥èss F Ä·¥è…¥·¥õ…™·¥á Ä
20. S·¥è R·¥Ä N·¥è W·¥è T·¥è
21. H·¥á·¥Ä·¥† è O ô·¥ä·¥á·¥Ñ·¥õ
22. S·¥á…¥·¥ä·¥è·¥ú …¥·¥è V·¥Ä ü·¥ã è Ä…™·¥Ä
23. O·¥õ·¥è·¥ç·¥á Y·¥è·¥ú·¥ã·¥Ä…™ Z·¥Ä·¥ã·¥ú Ä·¥è
24. A…¥…¢·¥è ü·¥ç·¥è…™s: G·¥á…¥·¥ã·¥è·¥ú K·¥Äss·¥á…¥·¥ã…™
25. B Ä·¥á·¥Ä·¥ã B ü·¥Ä·¥Ö·¥á
26. H…™…¢ ú S·¥Ñ ú·¥è·¥è ü F ü·¥á·¥á·¥õ
27. T·¥ès ú·¥è·¥ã·¥Ä…¥ S·¥á…¥s·¥è·¥ú
28. S·¥Ä ô·¥Ä…¢·¥á ô·¥ú!
29. T·¥Ä…™·¥ç·¥Ä·¥Ö·¥è·¥ú G·¥Ä·¥ã·¥ú·¥á…¥ 35 S ú…™·¥ã·¥á…¥ S ú·¥è·¥ú·¥õ·¥Ä…™
30. J·¥è·¥ã·¥á Ä G·¥Ä·¥ç·¥á

H…™s·¥õ·¥è Ä…™·¥Ñ·¥Ä ü
1. G…™…¥·¥õ·¥Ä·¥ç·¥Ä
2. M·¥ús ú…™s ú…™
3. D·¥è Ä·¥è Ä·¥è
4. S·¥Ä·¥ç·¥ú Ä·¥Ä…™ C ú·¥Ä·¥ç·¥ò ü·¥è·¥è
5. B·¥Ä·¥Ñ·¥Ñ·¥Ä…¥·¥è!
6. K·¥Ä·¥õ·¥Ä…¥·¥Ä…¢·¥Ä·¥õ·¥Ä Ä…™
7. R·¥ú Ä·¥è·¥ú…¥…™ K·¥á…¥s ú…™…¥: M·¥á…™·¥ä…™ K·¥á…¥·¥ã·¥Ä·¥ã·¥ú R·¥è·¥ç·¥Ä…¥·¥õ·¥Ä…¥
8. G·¥ès…™·¥Ñ·¥ã
9. K…™…¥…¢·¥Ö·¥è·¥ç
10. K·¥ú Ä·¥ès ú…™·¥õs·¥ú·¥ä…™
11. A·¥è…™ B·¥ú…¥…¢·¥Ä·¥ã·¥ú S·¥á Ä…™·¥ás
12. H·¥á·¥õ·¥Ä ü…™·¥Ä Ax…™s P·¥è·¥°·¥á Äs
13. H·¥Ä·¥ã·¥ú·¥è·¥ú·¥ã…™
14. S·¥á…¥…¢·¥è·¥ã·¥ú B·¥Äs·¥Ä Ä·¥Ä
15. J·¥è·¥ã·¥á Ä G·¥Ä·¥ç·¥á
16. K·¥Ä…¢·¥ú è·¥Ä H…™·¥ç·¥á …¥·¥è M·¥è…¥·¥è…¢·¥Ä·¥õ·¥Ä Ä…™
17. E…™·¥ã·¥è·¥ã·¥ú K·¥è…™ M·¥è…¥·¥è…¢·¥Ä·¥õ·¥Ä Ä…™ 

P·¥è ü…™·¥Ñ·¥á
1. T·¥Ä…™ ú·¥è S ú…™·¥Ñ ú·¥Ä·¥ú ·¥¢·¥è
2. G ú·¥ès·¥õ …™…¥ ·¥õ ú·¥á S ú·¥á ü ü
3. K·¥è·¥Ñ ú…™ Ä·¥Ä K·¥Ä·¥õs·¥ús ú…™·¥ã·¥Ä·¥ã·¥ú K·¥Ä·¥ç·¥á·¥Ä Ä…™ K·¥è·¥ú·¥á…¥·¥ç·¥Ä·¥á 
4. H·¥Äs ú·¥ú·¥õs·¥ú·¥ä·¥è
5. Ps è·¥Ñ ú·¥è-P·¥Äss
6. M·¥è ô…™ ü·¥á P·¥è ü…™·¥Ñ·¥á P·¥Ä·¥õ ü·¥Ä ô·¥è Ä
7. M…™ Ä·¥Ä…™ K·¥á…™s·¥Ä·¥õs·¥ú U Ä·¥Äs ú…™·¥ç·¥Ä…¥
8. W…™ ü·¥Ö 7
9. Y·¥ú·¥ús ú·¥Ä K·¥á…™s·¥Ä·¥õs·¥ú J-D·¥á·¥Ñ·¥ã·¥á Ä
10. H…™·¥ç…™·¥õs·¥ú: T ú·¥á R·¥á·¥†·¥á ü·¥Ä·¥õ…™·¥è…¥
11. S·¥Ä·¥ç·¥ú Ä·¥Ä…™ F ü·¥Ä·¥ç·¥á…¥·¥Ñ·¥è
12. B: T ú·¥á B·¥á…¢…™…¥…¥…™…¥…¢
13. J…™…¥-R·¥è ú: T ú·¥á W·¥è ü“ì B Ä…™…¢·¥Ä·¥Ö·¥á
14. O…¥…™ ú·¥á…™
15. K…™·¥Ö·¥è·¥ú K·¥á…™s·¥Ä·¥õs·¥ú P·¥Ä·¥õ ü·¥Ä ô·¥è Ä: O…¥ ·¥õ·¥á ü·¥á·¥†…™s…™·¥è…¥
16. M·¥è·¥ús·¥è·¥ú D·¥Ä…™ Ä…™…¥…™…¥
17. P·¥á·¥Ä·¥Ñ·¥á M·¥Ä·¥ã·¥á Ä K·¥ú Ä·¥è…¢·¥Ä…¥·¥á
18. H è·¥ò·¥á Ä P·¥è ü…™·¥Ñ·¥á

S·¥Ñ…™-“ì…™
1. S·¥õ·¥á…™…¥s;G·¥Ä·¥õ·¥á
2. I…¥·¥ú è·¥Äs ú…™·¥ã…™
3. M·¥Ä·¥Ö·¥á …™…¥ A ô èss
4. C·¥è·¥° ô·¥è è B·¥á ô·¥è·¥ò
5. P ü·¥Äs·¥õ…™·¥Ñ M·¥á·¥ç·¥è Ä…™·¥ás
6. E·¥ú Ä·¥á·¥ã·¥Ä S·¥á·¥†·¥á…¥
7. M·¥Ä ú·¥è·¥ú·¥ã·¥Ä K·¥è·¥ú·¥ã·¥è·¥ú …¥·¥è R·¥á·¥õ·¥õ·¥è·¥ús·¥á…™
8. D…™·¥ç·¥á…¥s…™·¥è…¥ W
9. D·¥Ä Ä ü…™…¥…¢ …™…¥ ·¥õ ú·¥á F Ä·¥Ä…¥XX
10. D·¥á…¥…¥·¥è·¥ú C·¥è…™ ü
11. S·¥ò·¥Ä·¥Ñ·¥á‚òÜD·¥Ä…¥·¥Ö è
12. K…™·¥¢…¥·¥Ä…™·¥†·¥á Ä
13. N·¥á·¥è…¥ G·¥á…¥·¥ás…™s E·¥†·¥Ä…¥…¢·¥á ü…™·¥è…¥
14. R·¥è ô·¥è·¥õ…™·¥Ñs;N·¥è·¥õ·¥ás
15. P·¥Ä·¥ò Ä…™·¥ã·¥Ä
16. M·¥á…¢·¥Ä ü·¥è B·¥èx
17. G ú·¥ès·¥õ …™…¥ ·¥õ ú·¥á S ú·¥á ü ü
18. G·¥Ä·¥õ·¥Ñ ú·¥Ä·¥ç·¥Ä…¥ C Ä·¥è·¥°·¥Ös
19. G·¥Ä·¥ã·¥ús·¥á…¥ T·¥ès ú…™ As·¥õ·¥á Ä…™s·¥ã
20. G…™…¥·¥õ·¥Ä·¥ç·¥Ä
21. S·¥Ä·¥ã·¥Äs·¥Ä·¥ç·¥Ä …¥·¥è P·¥Ä·¥õ·¥á·¥ç·¥Ä
22. E·¥†·¥á …¥·¥è J…™·¥ã·¥Ä…¥
23. Ps è·¥Ñ ú·¥è-P·¥Äss
24. D·¥á…¥·¥ò·¥Ä O…¥…¥·¥Ä ·¥õ·¥è S·¥á…™s ú·¥ú…¥ O·¥õ·¥è·¥ã·¥è
25. M·¥á·¥ã·¥Ä·¥ã·¥ú·¥Ñ…™·¥õ è A·¥Ñ·¥õ·¥è Äs
26. P ü·¥Ä…¥·¥á·¥õ·¥ás
27. B·¥ú·¥Ö·¥Ö è C·¥è·¥ç·¥ò ü·¥áx
28. P·¥á Äs·¥è…¥·¥Ä S·¥á Ä…™·¥ás
29. S·¥è Ä·¥Ä …¥·¥è O·¥õ·¥ès ú…™·¥ç·¥è…¥·¥è

S·¥ò·¥è Ä·¥õ
1. C·¥Ä·¥ò·¥õ·¥Ä…™…¥ Ts·¥ú ô·¥Äs·¥Ä
2. G…™·¥Ä…¥·¥õ K…™ ü ü…™…¥…¢
3. T ú·¥á K…¥…™…¢ ú·¥õ …™…¥ T ú·¥á A Ä·¥á·¥Ä (A Ä·¥á·¥Ä …¥·¥è K…™s ú…™ )
4. A·¥è·¥ã…™ D·¥á…¥s·¥á·¥õs·¥ú S ú·¥è·¥è·¥õ! (B ü·¥ú·¥á L·¥á…¢·¥á…¥·¥Ö S ú·¥è·¥è·¥õ!)
5. D·¥Ä ès
6. W ú…™s·¥õ ü·¥á!
7. O“ì“ìs…™·¥Ö·¥á
8. D Ä·¥Ä…¢·¥è…¥ L·¥á·¥Ä…¢·¥ú·¥á
9. F·¥Ä…¥·¥õ·¥Äs…™s·¥õ·¥Ä S·¥õ·¥á ü ü·¥Ä
10. I…¥·¥Ä·¥¢·¥ú·¥ç·¥Ä E ü·¥á·¥†·¥á…¥
11. G…™…¥…¢·¥Ä ·¥á K…™·¥Ñ·¥ã·¥è“ì“ì!!
12. H·¥ú…¥…¢ Ä è H·¥á·¥Ä Ä·¥õ W…™ ü·¥Ö S·¥õ Ä…™·¥ã·¥á Ä
13. G·¥Ä…¥ ô·¥Ä Ä·¥á K…™·¥Ñ·¥ã·¥á Äs
14. K·¥ú Ä·¥è·¥ã·¥è N·¥è B·¥Äs·¥ã·¥á·¥õ
15. S ü·¥Ä·¥ç D·¥ú…¥·¥ã
16. D·¥á·¥Ä Ä B·¥è ès
17. I‚Äô ü ü/CKBC
18. B·¥ú·¥¢·¥¢·¥á Ä B·¥á·¥Ä·¥õ·¥á Ä
19. B·¥Äsœô·¥ú·¥Äs ú!
20. R·¥è-K è·¥ú-B·¥ú!
21. D·¥Äs ú K·¥Ä·¥ò·¥ò·¥á…™
22. D…™·¥Ä·¥ç·¥è…¥·¥Ö …¥·¥è A·¥Ñ·¥á (A·¥Ñ·¥á ·¥è“ì D…™·¥Ä·¥ç·¥è…¥·¥Ö)
23. P Ä…™…¥·¥Ñ·¥áss N…™…¥·¥á: K…™s·¥Ä Ä·¥Ä…¢…™ J·¥ès ú…™·¥ã·¥è·¥ú Y·¥Ä·¥ã è·¥ú·¥ú ô·¥ú
24. M·¥Ä·¥ä·¥è Ä
25. T·¥è·¥ú·¥Ñ ú
26. H2
27. C Ä·¥èss G·¥Ä·¥ç·¥á
28. T·¥Ä…™s ú·¥è·¥ú Y·¥Ä·¥ã è·¥ú·¥ú M·¥ús·¥ú·¥ç·¥á
29. M·¥ès ú…™·¥Ö·¥è Ä·¥Ä (W ú·¥Ä·¥õ I“ì ·¥Ä F·¥á·¥ç·¥Ä ü·¥á M·¥Ä…¥·¥Ä…¢·¥á Ä ·¥è“ì ·¥Ä H…™…¢ ú S·¥Ñ ú·¥è·¥è ü B·¥Äs·¥á ô·¥Ä ü ü T·¥á·¥Ä·¥ç R·¥á·¥Ä·¥Ö D Ä·¥ú·¥Ñ·¥ã·¥á Ä‚Äôs)
30. O…¥·¥á O·¥ú·¥õs
31. O·¥è·¥ã…™·¥ã·¥ú F·¥ú Ä…™·¥ã·¥Ä ô·¥ú·¥õ·¥õ·¥á (B…™…¢ W…™…¥·¥Ö·¥ú·¥ò!)
32. H·¥Ä…™·¥ã è·¥ú·¥ú
33. A·¥õ·¥õ·¥Ä·¥Ñ·¥ã ·¥è…¥ T·¥è·¥ç·¥è Ä Ä·¥è·¥°
34. A·¥õ·¥õ·¥Ä·¥Ñ·¥ã N·¥è.1
35. A·¥õ·¥õ·¥Ä·¥Ñ·¥ã·¥á Ä Y·¥è·¥ú
36. Y·¥è·¥°·¥Ä·¥ç·¥ús ú…™ P·¥á·¥Ö·¥Ä ü
37. I·¥Ö·¥Ä·¥õ·¥á…¥ J·¥ú·¥ç·¥ò
38. O·¥†·¥á Ä D Ä…™·¥†·¥á
39. N·¥Äs·¥ú: S·¥ú·¥ç·¥ç·¥á Ä …™…¥ A…¥·¥Ö·¥Ä ü·¥ús…™·¥Ä
40. N·¥Äs·¥ú : A M…™…¢ Ä·¥Ä·¥õ·¥è Ä è B…™ Ä·¥Ö ·¥°…™·¥õ ú S·¥ú…™·¥õ·¥Ñ·¥Äs·¥á
41. H·¥Ä·¥ä…™·¥ç·¥á …¥·¥è I·¥ò·¥ò·¥è
42. As ú…™·¥õ·¥Ä …¥·¥è J·¥è·¥á
43. G·¥Ä…¥ ô·¥Ä Ä·¥á G·¥á…¥·¥ã…™
44. N·¥è·¥¢·¥è·¥ç…™ W…™·¥õ·¥Ñ ú·¥ás
45. O…¥·¥á P·¥è·¥ú…¥·¥Ö G·¥ès·¥ò·¥á ü
46. A…™·¥ç “ì·¥è Ä ·¥õ ú·¥á A·¥Ñ·¥á!
47. T ú·¥á P Ä…™…¥·¥Ñ·¥á ·¥è“ì T·¥á…¥…¥…™s
48. B·¥Ä ô è S·¥õ·¥á·¥òs
49. E è·¥ás ú…™·¥á ü·¥Ö 21
50. S·¥ç·¥Äs ú
51. S ú·¥Ä·¥ã·¥ú…¥·¥á·¥õs·¥ú …¥·¥è ·¥õ·¥Ä·¥ã·¥ã è·¥ú·¥ú ·¥ç·¥ús·¥ú·¥ç·¥á
52. A…™ Ä …¢·¥á·¥Ä Ä
53. P Ä…™…¥·¥Ñ·¥á O“ì S·¥õ Ä…™·¥Ö·¥á A ü·¥õ·¥á Ä…¥·¥Ä·¥õ…™·¥†·¥á
54. F Ä·¥á·¥á!
55. K·¥á…¥·¥ã·¥è·¥ú Z·¥á…¥ Ä·¥Ä·¥ã·¥á…™ S·¥ú…™·¥á…™ ô·¥ú U·¥ç…™s ú·¥è·¥ú

M·¥Ä Ä·¥õ…™·¥Ä ü A Ä·¥õ
1. B·¥è Ä·¥ú·¥õ·¥è: N·¥Ä Ä·¥ú·¥õ·¥è N·¥áx·¥õ G·¥á…¥·¥á Ä·¥Ä·¥õ…™·¥è…¥s
2. S ú…™·¥ã·¥Ä ô·¥Ä…¥·¥á H…™·¥ç·¥á: A·¥ã·¥Ä
3. K·¥Ä·¥õ·¥Ä…¥·¥Ä…¢·¥Ä·¥õ·¥Ä Ä…™
4. S ú…™·¥ä·¥è·¥ú S·¥Ä…™·¥ã è·¥è·¥ú …¥·¥è D·¥ás ú…™ K·¥á…¥…™·¥Ñ ú…™ (K·¥á…¥I·¥Ñ ú…™: T ú·¥á M…™…¢ ú·¥õ…™·¥ás·¥õ D…™s·¥Ñ…™·¥ò ü·¥á)
5. M·¥Ä·¥ä…™ ·¥Ö·¥á W·¥Ä·¥õ·¥Äs ú…™ …¥…™ K·¥è…™ S ú…™…¥·¥Äs·¥Ä…™!
6. T·¥Ä ô·¥è·¥è T·¥Ä·¥õ·¥õ·¥è·¥è
7. S·¥á…¥…¢·¥è·¥ã·¥ú B·¥Äs·¥Ä Ä·¥Ä
8. B·¥á…¥-·¥õ·¥è
9. M·¥á·¥Ö·¥Ä·¥ã·¥Ä B·¥èx
10. M·¥ús ú…™ ô·¥ú…¢ è·¥è·¥ú
11. M·¥Ä·¥ã·¥á…¥-·¥ã…™!
12. B ü·¥Ä·¥Ö·¥á & S·¥è·¥ú ü
13. F Ä·¥á·¥á·¥¢…™…¥…¢
14. I·¥ã·¥ã…™·¥õ·¥è·¥ús·¥á…¥ (I·¥ã·¥ã…™ T·¥è·¥ús·¥á…¥)
15. As·¥ú …¥·¥è Y·¥è…™·¥Ñ ú…™!
16. K·¥ú Ä·¥è·¥ã·¥Ä·¥ç…™ T ú·¥á A…¥…™·¥ç·¥Ä·¥õ…™·¥è…¥
17. T·¥è·¥ã è·¥è M·¥Ä·¥ä…™…¥ G·¥Ä·¥ã·¥ú·¥á…¥ K·¥á…¥·¥ò·¥ú·¥Ñ ú·¥è: T·¥è·¥ú
18. T·¥á…¥·¥ä·¥è·¥ú T·¥á…¥…¢·¥á
19. B·¥Ä·¥ã…™ (2018)
20. K·¥è…™ ú…™·¥ç·¥á ‚Ä†M·¥ús·¥è·¥ú
21. D Ä·¥Ä…¢·¥è…¥ B·¥Ä ü ü

M·¥ús…™·¥ã
1. S ú…™…¢·¥Ä·¥õs·¥ú ·¥°·¥Ä K…™·¥ç…™ …¥·¥è Us·¥è
2. H…™ ô…™·¥ã·¥á! E·¥ú·¥ò ú·¥è…¥…™·¥ú·¥ç
3. Z·¥è·¥ç ô…™·¥á ü·¥Ä…¥·¥Ö S·¥Ä…¢·¥Ä
4. K-O…¥!
5. N·¥è·¥Ö·¥Ä·¥ç·¥á C·¥Ä…¥·¥õ·¥Ä ô…™ ü·¥á
6. S·¥è R·¥Ä N·¥è W·¥è T·¥è
7. B·¥á·¥Ñ·¥ã
8. B·¥Ä…¥G D Ä·¥á·¥Ä·¥ç!
9. T ú·¥á …™DOLM@STER
10. L·¥è·¥†·¥á L…™·¥†·¥á! S·¥Ñ ú·¥è·¥è ü I·¥Ö·¥è ü P Ä·¥è·¥ä·¥á·¥Ñ·¥õ
11. D·¥á·¥õ Ä·¥è…™·¥õ M·¥á·¥õ·¥Ä ü C…™·¥õ è
12. N·¥Ä…¥·¥Ä
13. IDOL…™SH7
14. S·¥Ä·¥ã·¥Ä·¥ç…™·¥Ñ ú…™ …¥·¥è A·¥ò·¥è ü ü·¥è…¥
15. K…™…¥…™ Ä·¥è …¥·¥è C·¥è Ä·¥Ö·¥Ä
16. M·¥Ä…¢…™·¥Ñ-K è·¥ú…¥! R·¥á…¥·¥Ä…™ss·¥Ä…¥·¥Ñ·¥á
17. P…™·¥Ä…¥·¥è …¥·¥è M·¥è Ä…™
18. F·¥ú ü ü M·¥è·¥è…¥ ·¥°·¥è S·¥Ä…¢·¥Äs ú…™·¥õ·¥á
19. W ú…™·¥õ·¥á A ü ô·¥ú·¥ç
20. W·¥Ä·¥ã·¥á U·¥ò, G…™ Ä üs!
21. T·¥Ä Ä…™ T·¥Ä Ä…™
22. G Ä·¥Ä·¥†…™·¥õ·¥Ä·¥õ…™·¥è…¥
23. M·¥Ä·¥Ñ Ä·¥èss S·¥á Ä…™·¥ás
24. ·¥á“ì: A T·¥Ä ü·¥á ·¥è“ì M·¥á·¥ç·¥è Ä…™·¥ás.
25. K·¥Ä·¥Ñ ú·¥è·¥ú O·¥ú·¥ä…™
26. L…™·¥¢ ·¥õ·¥è A·¥è…™ T·¥è Ä…™
27. Y·¥è·¥Ä·¥ã·¥á Ts·¥ú…¢·¥á Ä·¥ú L·¥ú …¥·¥è U·¥õ·¥Ä
28. A…™·¥ã·¥Ä·¥õs·¥ú!
29. S·¥õ·¥Ä Ä·¥ç è·¥ú
30. F·¥ú·¥ú·¥ã·¥Ä
31. S ú·¥á ü·¥õ·¥á Ä
32. AKB0048
33. S ú·¥è·¥° B è R·¥è·¥Ñ·¥ã!!
34. S è·¥ç·¥ò ú·¥è…¢·¥á·¥Ä Ä 

H·¥Ä Ä·¥á·¥ç
1. D·¥Ä·¥õ·¥á ·¥Ä L…™·¥†·¥á
2.M·¥Ä è·¥è C ú…™·¥ã…™!
3. M·¥è…¥s·¥õ·¥á Ä M·¥ús·¥ú·¥ç·¥á N·¥è I Ä·¥ú N…™·¥Ñ ú…™·¥ä·¥è·¥ú
4. T·¥Ä…™·¥ç·¥Ä·¥Ö·¥è·¥ú G·¥Ä·¥ã·¥ú·¥á…¥ 35 S ú·¥è·¥ú·¥õ·¥Ä…™
5. T ú·¥á W·¥è Ä ü·¥Ö G·¥è·¥Ö O…¥ ü è K…¥·¥è·¥°s
6. D·¥á…¥·¥ò·¥Ä K è·¥è·¥ús ú…™
7. K·¥è Ä·¥á W·¥Ä Z·¥è·¥ç ô…™·¥á D·¥ás·¥ú·¥ã·¥Ä
8. M·¥è…¥·¥è…¢·¥Ä·¥õ·¥Ä Ä…™ S·¥á Ä…™·¥ás
9. O Ä·¥áI·¥ç·¥è
10. Z·¥á Ä·¥è …¥·¥è Ts·¥ú·¥ã·¥Ä…™·¥ç·¥Ä
11. M·¥Ä ú·¥è·¥ú S·¥á…¥s·¥á…™ N·¥á…¢…™·¥ç·¥Ä!
12. Is·¥á·¥ã·¥Ä…™ …¥·¥è S·¥á…™·¥ã…™s ú…™ M·¥è…¥·¥è…¢·¥Ä·¥õ·¥Ä Ä…™
13. M·¥Ä…¥…¢·¥Ä·¥ã·¥Ä-s·¥Ä…¥ ·¥õ·¥è Ass…™s·¥õ·¥Ä…¥·¥õ-s·¥Ä…¥ ·¥õ·¥è T ú·¥á A…¥…™·¥ç·¥Ä·¥õ…™·¥è…¥
14. I·¥Ñ ú…™…¢·¥è 100%
15. H·¥Ä…™ è·¥è Ä·¥á! N è·¥Ä Ä·¥ú·¥ã·¥è-s·¥Ä…¥
16. S·¥°·¥è Ä·¥Ö A Ä·¥õ O…¥ ü…™…¥·¥á
17. C·¥Ä·¥ç·¥ò…™·¥è…¥·¥á!
18. G Ä…™s·¥Ä…™·¥Ä S·¥á Ä…™·¥ás
19. F Ä·¥á·¥á·¥¢…™…¥…¢
20. MM!
21. N·¥è·¥úC·¥è·¥ç·¥á
22. A ú, M è G·¥è·¥Ö·¥Ö·¥áss
23. L·¥è·¥†·¥á H…™…¥·¥Ä
24. H…™…¢ ú S·¥Ñ ú·¥è·¥è ü ·¥è“ì ·¥õ ú·¥á D·¥á·¥Ä·¥Ö
25. K…™ss x s…™s
26. H·¥á…¥·¥õ·¥Ä…™ O·¥ú·¥ä…™ ·¥õ·¥è W·¥Ä Ä·¥Ä·¥°·¥Ä…¥·¥Ä…™ N·¥á·¥ã·¥è.
27. S ú…™…¥·¥ç·¥Ä…™ M·¥Ä·¥è·¥ú …¥·¥è T·¥ás·¥õ·¥Ä·¥ç·¥á…¥·¥õ
28. S·¥á·¥ã…™ Ä·¥á…™
29. G·¥Ä·¥ã·¥ús·¥á…¥ T·¥ès ú…™ As·¥õ·¥á Ä…™s·¥ã
30. S·¥Ä·¥á…¥·¥Ä…™ H·¥á Ä·¥è…™…¥·¥á …¥·¥è S·¥è·¥Ö·¥Ä·¥õ·¥á·¥ã·¥Ä·¥õ·¥Ä
31. M·¥Äs·¥Ä·¥ç·¥ú…¥·¥á-·¥ã·¥ú…¥ …¥·¥è R·¥á·¥†·¥á…¥…¢·¥á
32. O Ä·¥á …¥·¥è K·¥Ä…¥·¥è·¥ä·¥è ·¥õ·¥è Os·¥Ä…¥·¥Ä…¥·¥Ä·¥ä…™·¥ç…™ …¢·¥Ä S ú·¥ú Ä·¥Ä ô·¥Ä S·¥ú…¢…™ Ä·¥ú
33. S ú·¥ú“ì“ì ü·¥á!
34. N è·¥Ä…¥ K·¥è…™!
35. O·¥ú·¥õ ô Ä·¥á·¥Ä·¥ã C·¥è·¥ç·¥ò·¥Ä…¥ è
36. M·¥Ä·¥Ö·¥Ä…¥ …¥·¥è O·¥ú ·¥õ·¥è V·¥Ä…¥·¥Ä·¥Ö…™s
37. M·¥Ä·¥ä…™ ·¥Ö·¥á W·¥Ä·¥õ·¥Äs ú…™ …¥…™ K·¥è…™ S ú…™…¥·¥Äs·¥Ä…™!
38. P Ä…™…¥·¥Ñ·¥áss L·¥è·¥†·¥á Ä!
29. S·¥á…™·¥ã·¥á…¥ Ts·¥ú·¥ã·¥Ä…™ …¥·¥è W·¥è Ä ü·¥Ö B Ä·¥á·¥Ä·¥ã
40. R·¥è·¥ã·¥ú·¥ä·¥è·¥ú·¥ç·¥Ä …¥·¥è S ú…™…¥ Ä è·¥Ä·¥ã·¥ús ú·¥Ä!?
41. H…™…¢ ú S·¥Ñ ú·¥è·¥è ü DxD
42. N…™s·¥á·¥ã·¥è…™
43. B·¥è·¥ã·¥ú ·¥°·¥Ä T·¥è·¥ç·¥è·¥Ö·¥Ä·¥Ñ ú…™ …¢·¥Ä S·¥ú·¥ã·¥ú…¥·¥Ä…™
44. R·¥ès·¥Ä Ä…™·¥è ·¥õ·¥è V·¥Ä·¥ç·¥ò…™ Ä·¥á
45. IS: I…¥“ì…™…¥…™·¥õ·¥á S·¥õ Ä·¥Ä·¥õ·¥ès
46. T·¥è LOVE-R·¥ú S·¥á Ä…™·¥ás
47. S·¥è Ä·¥Ä …¥·¥è O·¥õ·¥ès ú…™·¥ç·¥è…¥·¥è
48. T Ä…™…¥…™·¥õ è S·¥á·¥†·¥á…¥
49. Y·¥Ä·¥ç·¥Ä·¥Ö·¥Ä-·¥ã·¥ú…¥ ·¥õ·¥è 7-…¥…™…¥ …¥·¥è M·¥Ä·¥ä·¥è
50. I·¥Ñ ú…™ ô·¥Ä…¥ Us ú…™ Ä·¥è …¥·¥è D·¥Ä…™·¥ç·¥Ä·¥è·¥ú

R·¥á·¥†·¥á Äs·¥á H·¥Ä Ä·¥á·¥ç
1. H·¥Ä…¥·¥Äs·¥Ä·¥ã·¥á Ä·¥ú S·¥á…™s ú·¥è·¥ú…¥·¥á…¥
2. U·¥õ·¥Ä …¥·¥è‚òÜP Ä…™…¥·¥Ñ·¥á-s·¥Ä·¥ç·¥Ä‚ô™
3. H·¥Ä·¥ã·¥ú·¥è·¥ú·¥ã…™
4. Y·¥Ä·¥ç·¥Ä·¥õ·¥è N·¥Ä·¥Ö·¥ás ú…™·¥ã·¥è S ú…™·¥Ñ ú…™ H·¥á…¥…¢·¥á
5. A·¥ã·¥Ä·¥õs·¥ú·¥ã…™ …¥·¥è Y·¥è…¥·¥Ä
6. F·¥ús ú…™…¢…™ Y·¥ú·¥ú…¢…™ (M ès·¥õ·¥á Ä…™·¥è·¥ús P ü·¥Ä è)
7. D…™·¥Ä ô·¥è ü…™·¥ã L·¥è·¥†·¥á Äs
8. A Ä·¥Ñ·¥Ä…¥·¥Ä F·¥Ä·¥ç…™…¢ ü…™·¥Ä
9. B Ä·¥è·¥õ ú·¥á Äs C·¥è…¥“ì ü…™·¥Ñ·¥õ
10. D·¥Ä…¥·¥Ñ·¥á ·¥°…™·¥õ ú D·¥á·¥†…™ üs
11. O·¥ú Ä·¥Ä…¥ H…™…¢ ú S·¥Ñ ú·¥è·¥è ü H·¥ès·¥õ C ü·¥ú ô
12. K·¥Ä·¥ç…™s·¥Ä·¥ç·¥Ä H·¥Ä·¥ä…™·¥ç·¥á·¥ç·¥Äs ú…™·¥õ·¥Ä
13. A·¥ç…¥·¥ás…™·¥Ä
14. B·¥è…¥·¥ä·¥è·¥ú Ä S·¥°·¥á·¥á·¥õ L·¥è·¥†·¥á P·¥Ä·¥õ…™ss·¥á Ä…™·¥á
15. K·¥Ä·¥ç…™…¢·¥Ä·¥ç…™ …¥·¥è As·¥è ô…™
16. H…™…™ Ä·¥è …¥·¥è K·¥Ä·¥ã·¥á Ä·¥Ä

R·¥è·¥ç·¥Ä…¥·¥Ñ·¥á
1 C ü·¥Ä è & M·¥Ä Ä…™·¥Ä
2. W ú…™·¥õ·¥á A ü ô·¥ú·¥ç 
3. C ü·¥Ä…¥…¥·¥Ä·¥Ö A“ì·¥õ·¥á Ä S·¥õ·¥è Ä è
4. A…¥…¢·¥á ü B·¥á·¥Ä·¥õs
5. Is ú·¥ú·¥ú·¥ã·¥Ä…¥ F Ä…™·¥á…¥·¥Ös.
6. S ú…™…¢·¥Ä·¥õs·¥ú ·¥°·¥Ä K…™·¥ç…™ …¥·¥è Us·¥è
7. N…™s·¥á·¥ã·¥è…™
8. G·¥è ü·¥Ö·¥á…¥ T…™·¥ç·¥á
9. N·¥Ä…¢…™ …¥·¥è As·¥ú·¥ã·¥Ä Ä·¥Ä
10. A·¥è H·¥Ä Ä·¥ú R…™·¥Ö·¥á
11. O Ä·¥á M·¥è…¥·¥è…¢·¥Ä·¥õ·¥Ä Ä…™
12. S·¥Ä·¥á…¥·¥Ä…™ H·¥á Ä·¥è…™…¥·¥á N·¥è S·¥è·¥Ö·¥Ä·¥õ·¥á·¥ã·¥Ä
13. G·¥á·¥ã·¥ã·¥Ä…¥ S ú·¥è·¥ä·¥è·¥ú N·¥è·¥¢·¥Ä·¥ã…™-K·¥ú…¥
14. S·¥Ä…¥·¥ã·¥Ä Ä·¥á·¥Ä
15. K·¥è·¥ã·¥è Ä·¥è C·¥è…¥…¥·¥á·¥Ñ·¥õ
16. A·¥ç·¥Ä…¢·¥Ä·¥ç…™ SS
17. K·¥è·¥õ·¥è·¥ú Ä·¥Ä-s·¥Ä…¥ (M·¥Äs·¥ú·¥ã…™…¥ D·¥Ä“ì·¥õ·¥Ä Ä C·¥Ä·¥Ö·¥Ä…¥…¢·¥Ä…¥ A·¥ä·¥Ä ú)
18. H·¥á…¥·¥õ·¥Ä…™ O·¥ú·¥ä…™ ·¥õ·¥è W·¥Ä Ä·¥Ä·¥°·¥Ä…¥·¥Ä…™ N·¥á·¥ã·¥è
19. T·¥è…¥·¥Ä Ä…™ …¥·¥è K·¥Ä…™ ô·¥ú·¥õs·¥ú-·¥ã·¥ú…¥
20. K·¥Ä…™·¥Ñ ú·¥è·¥ú ·¥°·¥Ä M·¥Ä…™·¥Ö-s·¥Ä·¥ç·¥Ä!
21. P ü·¥Äs·¥õ…™·¥Ñ M·¥á·¥ç·¥è Ä…™·¥ás
22. T·¥è Ä·¥Ä·¥Ö·¥è Ä·¥Ä!
23. A…¥·¥è H…™ M…™·¥õ·¥Ä H·¥Ä…¥·¥Ä
24. Z·¥á Ä·¥è …¥·¥è Ts·¥ú·¥ã·¥Ä…™·¥ç·¥Ä
25. B·¥è·¥ã·¥ú Ä·¥Ä ·¥°·¥Ä M…™…¥…¥·¥Ä K·¥Ä·¥°·¥Ä…™s·¥è·¥ú
26. I·¥õ·¥Ä·¥¢·¥ú Ä·¥Ä …¥·¥Ä K…™ss
27. Y·¥Ä·¥ç·¥Ä·¥Ö·¥Ä-·¥ã·¥ú…¥ ·¥õ·¥è 7 …¥…™…¥ …¥·¥è M·¥Ä·¥ä·¥è
28. A·¥ã·¥Ä·¥õs·¥ú·¥ã…™ N·¥è Y·¥è…¥·¥Ä
29. O Ä·¥á …¥·¥è K·¥Ä…¥·¥è·¥ä·¥è ·¥õ·¥è Os·¥Ä…¥·¥Ä…¥·¥Ä·¥ä…™·¥ç…™ …¢·¥Ä S ú·¥ú Ä·¥Ä ô·¥Ä S·¥ú…¢…™ Ä·¥ú
30. Y·¥ès·¥ú…¢·¥Ä …¥·¥è S·¥è Ä·¥Ä
31. S·¥°·¥è Ä·¥Ö A Ä·¥õ O…¥ ü…™…¥·¥á
32. A…¥·¥è N·¥Ä·¥õs·¥ú ·¥Ö·¥á M·¥Ä·¥õ·¥õ·¥á Ä·¥ú
33. N·¥Ä Ä·¥ú·¥õ·¥è S ú…™·¥ò·¥ò·¥ú·¥Ö·¥á…¥ : T ú·¥á L·¥Äs·¥õ
34. K…™·¥ç…™ …¥…™ T·¥è·¥Ö·¥è·¥ã·¥á
35. G·¥ès…™·¥Ñ·¥ã
36. N·¥Ä…¢·¥Ä·¥õ·¥è Y·¥ú·¥ã…™-C ú·¥Ä…¥ …¥·¥è S·¥è·¥ús ú…™·¥õs·¥ú (G·¥Ä·¥ç ô·¥Ä Ä ·¥Ö·¥Ä Ä…™ S·¥¢·¥ú·¥ç…™ è·¥Ä H·¥Ä Ä·¥ú ú…™ …¥·¥è S·¥è·¥ús ú…™·¥õs·¥ú)
37. K·¥Ä·¥ç…™s·¥Ä·¥ç·¥Ä H·¥Ä·¥ä…™·¥ç·¥á·¥ç·¥Äs ú…™·¥õ·¥Ä
38. O Ä·¥á…¢·¥Ä…™ Ä·¥ú
39. S·¥è Ä·¥á·¥Ö·¥á·¥ç·¥è S·¥á·¥ã·¥Ä…™ ·¥°·¥Ä U·¥õs·¥ú·¥ã·¥ús ú…™…™
42. S·¥á Ä·¥†·¥Ä…¥·¥õ x S·¥á Ä·¥†…™·¥Ñ·¥á
43. W·¥è Ä·¥ã…™…¥…¢
44. A·¥ã·¥Ä…¢·¥Ä·¥ç…™ …¥·¥è S ú…™ Ä·¥Ä è·¥ú·¥ã…™ H…™·¥ç·¥á
45. D·¥á…¥·¥ò·¥Ä O…¥…¥·¥Ä ·¥õ·¥è S·¥á…™s ú·¥ú…¥ O·¥õ·¥è·¥ã·¥è
46. T·¥Äs·¥è…¢·¥Ä Ä·¥á O·¥õ·¥è·¥ç·¥á x A·¥ç…¥·¥ás…™·¥Ä
47. NHK N…™ Y·¥è·¥ú·¥ã·¥ès·¥è
48. B·¥è·¥ã·¥ú D·¥Ä·¥ã·¥á …¢·¥Ä I…¥·¥Ä…™ M·¥Ä·¥Ñ ú…™
49. I…¥·¥ú x B·¥è·¥ã·¥ú S·¥á·¥Ñ Ä·¥á·¥õ S·¥á Ä·¥†…™·¥Ñ·¥á
50. N·¥Ä·¥¢·¥è …¥·¥è K·¥Ä…¥·¥è·¥ä·¥è X
51. S·¥ò·¥á·¥Ñ…™·¥Ä ü A
52. L·¥è·¥†·¥á ü è C·¥è·¥ç·¥ò ü·¥áx
53. S·¥ú·¥ã…™·¥õ·¥õ·¥á I…™ …¥·¥Ä  è·¥è
54. E…™·¥ã·¥è·¥ã·¥ú K·¥è…™ M·¥è…¥·¥è…¢·¥Ä·¥õ·¥Ä Ä…™ E·¥ç·¥ç·¥Ä
55. N·¥Ä…¥·¥Ä
56. R·¥è·¥ç·¥á·¥è x J·¥ú ü…™·¥á·¥õ
57. H·¥Ä·¥Ñ ú…™·¥ç…™·¥õs·¥ú ·¥õ·¥è C ü·¥è·¥†·¥á Ä
58. B è·¥è·¥ús·¥è·¥ã·¥ú 5 C·¥á…¥·¥õ…™·¥ç·¥á·¥õ·¥á Ä
59. B·¥è·¥ã·¥ú Ä·¥Ä …¢·¥Ä I·¥õ·¥Ä
60. K·¥è…™ K·¥Ä·¥¢·¥á
61. O·¥è·¥ã·¥Ä·¥ç…™ ·¥õ·¥è K·¥è·¥ús ú…™…¥ Ä è·¥è·¥ú
62. N·¥è·¥Ö·¥Ä·¥ç·¥á C·¥Ä…¥·¥õ·¥Ä ô…™ ü·¥á 
63. H·¥è·¥õ·¥Ä Ä·¥ú ô…™ …¥·¥è M·¥è Ä…™ ·¥á
64. K…™·¥ç…™ …¥·¥è N·¥Ä W·¥Ä?
65. H·¥è Ä…™-s·¥Ä…¥ ·¥õ·¥è M…™ è·¥Ä·¥ç·¥ú Ä·¥Ä-·¥ã·¥ú…¥
66. R·¥á·¥Ñ
67. C ú…™ ú·¥Ä è·¥Ä“ì·¥ú Ä·¥ú
68. M·¥Äs ú…™ Ä·¥è-…™ Ä·¥è S è·¥ç·¥ò ú·¥è…¥ è
70. C Ä·¥èss G·¥Ä·¥ç·¥á
71. T Ä·¥ú·¥á T·¥á·¥Ä Äs
72. M·¥Äs·¥Ä·¥ç·¥ú…¥·¥á-·¥ã·¥ú…¥ …¥·¥è R·¥á·¥†·¥á…¥…¢·¥á 
73. S·¥á…™ Ä·¥á…¥ 
74. R·¥áLIFE
75. H·¥ès ú…™·¥¢·¥è Ä·¥Ä ·¥á K·¥Ä·¥ã·¥Ä Ä·¥ú H·¥Äs ú…™
76. E Ä·¥è·¥ç·¥Ä…¥…¢·¥Ä-S·¥á…¥s·¥á…™
77. K·¥è·¥á …¥·¥è K·¥Ä·¥õ·¥Ä·¥Ñ ú…™
78. N·¥è…¢…™·¥¢·¥Ä·¥ã·¥Ä H·¥Ä Ä·¥ú·¥ã·¥Ä …¥·¥è H…™·¥ç…™·¥õs·¥ú
79. K…™·¥¢…¥·¥Ä…™·¥†·¥á Ä
80. G·¥ú…™ ü·¥õ è C Ä·¥è·¥°…¥
81. O Ä·¥Ä…¥…¢·¥á
82. Ts·¥ú·¥ã…™ …¢·¥Ä K…™ Ä·¥á…™
83. G·¥Ä·¥ç·¥á Äs
84. S·¥Ä·¥ã·¥ú Ä·¥Äs·¥è·¥ú …¥·¥è ·¥ò·¥á·¥õ …¥·¥Ä ·¥ã·¥Ä…¥·¥è·¥ä·¥è·¥ú
85. O Ä·¥á …¥·¥è I·¥ç·¥è·¥ú·¥õ·¥è …¢·¥Ä K·¥è…¥…¥·¥Ä…¥…™ K·¥Ä·¥°·¥Ä…™…™ W·¥Ä·¥ã·¥á …¢·¥Ä N·¥Ä…™`, text, tescuk, cr)
					break
				case 'amv':
				client.updatePresence(from, Presence.composing) 
				if (isBanned) return reply(ind.baned())
				 if (!isRegistered) return reply(ind.noregis())
		                if (isLimit(sender)) return reply(ind.limitend(pusname))
				 reply(`sedang diproses 2+ menit, btw yang buat Xptn/ownerüóø`)
				 data = fs.readFileSync('./src/amv.js');
		                 jsonData = JSON.parse(data);
		                 randIndex = Math.floor(Math.random() * jsonData.length);
	                	 randKey = jsonData[randIndex];
	                	buffer = await getBuffer(randKey.result)
        		        client.sendMessage(from, buffer, video, {mimetype: 'video/mp4', quoted: mek})
				break
				case 'p':
				case 'asli':
					client.sendMessage(from, '’è·é™·è¶·ÇÆ·é°·é™ Gans', text, { quoted: mek })
					break
				case 'rulestext':
                                        client.sendMessage(from, '*üìçRULES BOT ’è·é™·è¶·ÇÆ·é°·é™ üìç*\n*‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ*\n*‚îÉ*\n*‚î£‚û£Patuhi Aturan yaüçÅ*\n*‚îÉ*\n*‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ*\n*[1]DILARANG SPAM‚ùå*\n*[2]DILARANG VC\NELPON‚ùå*\n*[3]DILARANG MEMBANDING BOT‚ùå*\n*[4]WAJIB SV NOMOR OWNER‚≠ï*\n*[5]DILARANG NGATAIN BOT‚ùå*\n*‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ*\n*_NOTE:JANGAN LUPA DONASI DENGAN KETIK ,DONASI_*', text, { quoted: mek })
                                        break
				if (text.includes('P')){
                  client.sendMessage(id, 'Sama sama, semoga harimu menyenangkan :)' ,MessageType.text, {quoted: mek});
                   }
				case 'jadian':
				if (isBanned) return reply(ind.baned())
				    if (!isRegistered) return reply(ind.noregis())
		                if (isLimit(sender)) return reply(ind.limitend(pusname))
					jds = []
					const jdii = groupMembers
					const koss = groupMembers
					const akuu = jdii[Math.floor(Math.random() * jdii.length)]
					const diaa = koss[Math.floor(Math.random() * koss.length)]
					teks = `Ciee.. yang lagi jadian @${akuu.jid.split('@')[0]} ‚ô•Ô∏è @${diaa.jid.split('@')[0]} `
					jds.push(akuu.jid)
					jds.push(diaa.jid)
					mentions(teks, jds, true)
					await limitAdd(sender)
					break	
				case 'artinama':
		if (isBanned) return reply(ind.baned())
                if (!isRegistered) return reply(ind.noregis())
                if (isLimit(sender)) return reply(ind.limitend(pusname))
					if (args.length < 1) return reply('Apa yang mau dicari um?')
					anu = await fetchJson(`https://mnazria.herokuapp.com/api/arti?nama=${body.slice(10)}`, {method: 'get'})
					reply('Menurut nama:\n\n'+anu.result)
					await limitAdd(sender)
				break
				case 'readmore':
					if (isBanned) return reply(ind.baned())
					if (!isRegistered) return reply(ind.noregis())
					if (args.length < 1) return reply('*teks nya mana kak?*')
					var kls = body.slice(9)
					var has = kls.split("|")[0];
					var kas = kls.split("|")[1];
					if (args.length < 1) return reply(mess.blank)
				client.sendMessage(from, `${has}‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé‚Äé${kas}` , text, { quoted: mek })
					break
				case 'kodenuklir':
					if (isBanned) return reply(ind.baned())
					if (!isGroup) return reply(ind.groupo())
                                        if (!isNsfw) return reply(ind.nsfwoff())
                                        if (!isRegistered) return reply(ind.noregis())
                                        if (isLimit(sender)) return reply(ind.limitend(pusname))
					costum( kodenuklir(), text, tescuk, cr)
					break
				case 'nekopoi':
					if (isBanned) return reply(ind.baned())
					if (!isGroup) return reply(ind.groupo())
                                if (!isRegistered) return reply(ind.noregis())
                                        if (isLimit(sender)) return reply(ind.limitend(pusname))
					client.sendMessage(from, nekopoi() , text, tescuk, cr)
					break
				case 'kpop':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
                                        reply(ind.wait())
                                        anu = await fetchJson(`https://tobz-api.herokuapp.com/api/randomkpop?apikey=${TobzKey}`, {method: 'get'})
                                        if (anu.error) return reply(anu.error)
                                        buffer = await getBuffer(anu.result)
                                        randomkpop = `*PLASTIQUE:V*`
                                        client.sendMessage(from, buffer, image, {quoted: mek, caption: randomkpop})
                                        await limitAdd(sender)
                                        break
				case 'asupan':
				client.updatePresence(from, Presence.composing) 
				 if (!isOwner) return reply(ind.ownerb())
				 data = fs.readFileSync('./src/asupan.js');
		                 jsonData = JSON.parse(data);
                		 randIndex = Math.floor(Math.random() * jsonData.length);
		                 randKey = jsonData[randIndex];
		                buffer = await getBuffer(randKey.result)
		                client.sendMessage(from, buffer, video, {mimetype: 'video/mp4', quoted: mek})
				break
				case 'naruto':
					if (isBanned) return reply(ind.baned())
					if (!isGroup) return reply(ind.groupo())
				if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					reply(ind.wait())
					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=Naruto`, {method: 'get'})
					naru = JSON.parse(JSON.stringify(anu));
					to =  naru[Math.floor(Math.random() * naru.length)];
					nye = await getBuffer(to)
					client.sendMessage(from, nye, image, { caption: '**UZUMAKI NARUTO*', quoted: mek })
					await limitAdd(sender)
					break 
				case 'minato':
				if (isBanned) return reply(ind.baned())
				if (!isGroup) return reply(ind.groupo())
				if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					reply(ind.wait())
					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=Minato`, {method: 'get'})
					min = JSON.parse(JSON.stringify(anu));
					ato =  min[Math.floor(Math.random() * min.length)];
					nye = await getBuffer(ato)
					client.sendMessage(from, nye, image, { caption: '*MINATO NAMIKAZE*', quoted: mek })
					await limitAdd(sender)
					break 
				case 'boruto':
				if (isBanned) return reply(ind.baned())
				if (!isGroup) return reply(ind.groupo())
				if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					reply(ind.wait())
					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=Boruto`, {method: 'get'})
					bor = JSON.parse(JSON.stringify(anu));
					uto =  bor[Math.floor(Math.random() * bor.length)];
					nye = await getBuffer(uto)
					client.sendMessage(from, nye, image, { caption: '*UZUMAKI BORUTO*', quoted: mek })
					await limitAdd(sender)
					break 
				case 'hinata':
				if (isBanned) return reply(ind.baned())
				if (!isGroup) return reply(ind.groupo())
				if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					reply(ind.wait())
					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=Hinata`, {method: 'get'})
					hina = JSON.parse(JSON.stringify(anu));
					ta =  hina[Math.floor(Math.random() * hina.length)];
					nye = await getBuffer(ta)
					client.sendMessage(from, nye, image, { caption: '*HINATA HYOUGA*', quoted: mek })
					await limitAdd(sender)
					break 
				case 'sasuke':
				if (isBanned) return reply(ind.baned())
				if (!isGroup) return reply(ind.groupo())
				if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					reply(ind.wait())
					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=sasuke`, {method: 'get'})
					sasu = JSON.parse(JSON.stringify(anu));
					ke =  sasu[Math.floor(Math.random() * sasu.length)];
					nye = await getBuffer(ke)
					client.sendMessage(from, nye, image, { caption: '*SASUKE UCIHA', quoted: mek })
					await limitAdd(sender) 
					break 
				case 'sakura':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					reply(ind.wait())
					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=sakura`, {method: 'get'})
					sak = JSON.parse(JSON.stringify(anu));
					kura =  sak[Math.floor(Math.random() * sak.length)];
					nye = await getBuffer(kura)
					client.sendMessage(from, nye, image, { caption: '*SAKURA*', quoted: mek })
					await limitAdd(sender) 
					break 
				case 'rem':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(limits.limitend(pushname2))
					reply(ind.wait())
					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=rem`, {method: 'get'})
					sasu = JSON.parse(JSON.stringify(anu));
					ke =  sasu[Math.floor(Math.random() * sasu.length)];
					nye = await getBuffer(ke)
					client.sendMessage(from, nye, image, { caption: '*REM-CHAN*', quoted: mek })
					await limitAdd(sender) 
					break
				case 'chika':
				if (isBanned) return reply(ind.baned())
                                if (!isRegistered) return reply(ind.noregis())
                                if (isLimit(sender)) return reply(limits.limitend(pushname2))
					reply(ind.wait())
					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=FujiwaraChika`, {method: 'get'})
					sasu = JSON.parse(JSON.stringify(anu));
					ke =  sasu[Math.floor(Math.random() * sasu.length)];
					nye = await getBuffer(ke)
					client.sendMessage(from, nye, image, { caption: '*CHIKA-SAN*', quoted: mek })
					await limitAdd(sender) 
					break
				case 'kaneki':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					reply(ind.wait())
					anu = await fetchJson(`https://api.vhtear.com/pinterest?query=kaneki&apikey=${apikey}`, {method: 'get'})
					var ka = JSON.parse(JSON.stringify(anu.result));
					var ne =  ka[Math.floor(Math.random() * ka.length)];
					ki = await getBuffer(ne)
					client.sendMessage(from, ki, image, { caption: '*KANEKI-KUN*', quoted: mek })
					await limitAdd(sender) 
					break 
				case 'toukachan':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					reply(ind.wait())
					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=anime+touka`, {method: 'get'})
					tou = JSON.parse(JSON.stringify(anu));
					ka =  tou[Math.floor(Math.random() * tou.length)];
					nye = await getBuffer(ka)
					client.sendMessage(from, nye, image, { caption: '*TOUKA-CHAN*', quoted: mek })
					await limitAdd(sender) 
					break 
				case 'rize':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					reply(ind.wait())
					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=anime+rize`, {method: 'get'})
					ri = JSON.parse(JSON.stringify(anu));
					ze =  ri[Math.floor(Math.random() * ri.length)];
					nye = await getBuffer(ze)
					client.sendMessage(from, nye, image, { caption: '*RIZE-CHAN*', quoted: mek })
					await limitAdd(sender) 	
					break 
				case 'akira':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					reply(ind.wait())
					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=anime+akira`, {method: 'get'})
					ak = JSON.parse(JSON.stringify(anu));
					ara =  ak[Math.floor(Math.random() * ak.length)];
					nye = await getBuffer(ara)
					client.sendMessage(from, nye, image, { caption: 'AKIRA-CHAN', quoted: mek })
					await limitAdd(sender) 
					break 
				case 'itori':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					reply(ind.wait())
					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=anime+itori`, {method: 'get'})
					it = JSON.parse(JSON.stringify(anu));
					ori =  it[Math.floor(Math.random() * it.length)];
					nye = await getBuffer(ori)
					client.sendMessage(from, nye, image, { caption: 'ITORI-CHAN', quoted: mek })
					await limitAdd(sender) 
					break 
				case 'kurumi':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					reply(ind.wait())
					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=anime+karumi`, {method: 'get'})
					kur = JSON.parse(JSON.stringify(anu));
					imi =  kur[Math.floor(Math.random() * kur.length)];
					nye = await getBuffer(imi)
					client.sendMessage(from, nye, image, { caption: 'KURUMI-CHAN', quoted: mek })
					await limitAdd(sender) 
					break 
				case 'miku':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					reply(ind.wait())
					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=anime+miku`, {method: 'get'})
					mi = JSON.parse(JSON.stringify(anu));
					ku =  mi[Math.floor(Math.random() * mi.length)];
					nye = await getBuffer(ku)
					client.sendMessage(from, nye, image, { caption: '*I LOVE MIKU‚ô•*', quoted: mek })
					await limitAdd(sender) 
					break 
				case 'howgay':
					anug = getRegisteredRandomId(_registered).replace('@s.whatsapp.net','')
                                        client.sendMessage(from, '*Si Tukang Gay Adalah:*\nwa.me/${anug}', text, { quoted: mek })
                                        break
				case 'neko':
		if (isBanned) return reply(ind.baned())
                if (!isRegistered) return reply(ind.noregis())
                if (isLimit(sender)) return reply(ind.limitend(pusname))
						res = await fetchJson(`https://tobz-api.herokuapp.com/api/nekonime?apikey=${TobzKey}`, {method: 'get'})
						buffer = await getBuffer(res.result)
						client.sendMessage(from, buffer, image, {quoted: mek, caption: '*Nih neko mu*'})
					await limitAdd(sender)
					break
				case 'darkjokes':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))   
				 data = fs.readFileSync('./src/darkjokes.js');
                 jsonData = JSON.parse(data);
                 randIndex = Math.floor(Math.random() * jsonData.length);
                 randKey = jsonData[randIndex];
                hasil = await getBuffer(randKey.result)
                sendImage(hasil, mek, '*TOLONGG GELAP BANGET KA*')
				break	
				case 'antilinkgrup':
					if (!isGroup) return reply(ind.groupo())
					if (!isGroupAdmins) return reply(ind.admin())
					if (!isBotGroupAdmins) return reply(ind.badmin())					
					if (args.length < 1) return reply('ketik 1 untuk mengaktifkan')
					if (Number(args[0]) === 1) {
						if (isAntiLink) return reply('EMANG MATI?')
						antilink.push(from)
						fs.writeFileSync('./database/group/antilink.json', JSON.stringify(antilink))
						reply('*[SUKSES]MENGAKTIFKAN ANTI LINK DI GROUP*')
						client.sendMessage(from,`ALLERT!!! Jika bukan admin jangan kirim link grup`, text)
					} else if (Number(args[0]) === 0) {
						if (!isAntiLink) return reply('EMANG AKTIF?')
						var ini = anti.botLangsexOf(from)
						antilink.splice(ini, 1)
						fs.writeFileSync('./database/group/antilink.json', JSON.stringify(antilink))
						reply('*[SUKSES]MEMATIKAN ANTI LINK DI GROUP*')
					} else {
						reply('1 untuk mengaktifkan, 0 untuk menonaktifkan')
					}
					break		
				case 'family100':
		if (isBanned) return reply(ind.baned())
                if (!isRegistered) return reply(ind.noregis())
		if (isLimit(sender)) return reply(ind.limitend(pusname))
		if (!isGroup) return reply(ind.groupo())
					anu = await fetchJson(`https://api.vhtear.com/family100&apikey=${apivhtear}`, {method: 'get'})
					family = `*${anu.result.soal}*`
					setTimeout( () => {
					client.sendMessage(from, '*‚û∏ Jawaban :* '+anu.result.jawaban, text, {quoted: mek}) // ur cods
					}, 30000) // 1000 = 1s,
					setTimeout( () => {
					client.sendMessage(from, '_10 Detik lagi... cepet kak!_', text) // ur cods
					}, 20000) // 1000 = 1s,
					setTimeout( () => {
					client.sendMessage(from, '_20 Detik lagi... cepetan woe!_', text) // ur cods
					}, 10000) // 1000 = 1s,
					setTimeout( () => {
					client.sendMessage(from, '_30 Detik lagi... cepet!_', text) // ur cods
					}, 2500) // 1000 = 1s,
					setTimeout( () => {
					client.sendMessage(from, family, text, {quoted: mek }) // ur cods
					}, 0) // 1000 = 1s,
					await limitAdd(sender) 
					break 
				case 'tebakin':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
					anu = await fetchJson(`https://api.vhtear.com/tebakgambar&apikey=${VhtearKey}`, {method: 'get'})
					ngebuff = await getBuffer(anu.result.soalImg)
					tebak = `‚û∏ Jawaban : *${anu.result.jawaban}*`
					setTimeout( () => {
					client.sendMessage(from, tebak, text, {quoted: mek})
					}, 30000) // 1000 = 1s,
					setTimeout( () => {
					client.sendMessage(from, '_10 Detik lagi..._', text) // ur cods
					}, 20000) // 1000 = 1s,
					setTimeout( () => {
					client.sendMessage(from, '_20 Detik lagi..._', text) // ur cods
					}, 10000) // 1000 = 1s,
					setTimeout( () => {
					client.sendMessage(from, '_30 Detik lagi..._', text) // ur cods
					}, 2500) // 1000 = 1s,
					setTimeout( () => {
					client.sendMessage(from, ngebuff, image, { caption: '_Tebak kak gk bisa jawab ke kick:v_', quoted: mek }) // ur cods
					}, 0) // 1000 = 1s,
					await limitAdd(sender) 
					break
				case 'afk':
                                        tels = body.slice(4)
                                        if (args.length < 1) return reply('kakak afk karena apa?')
                                        if (!isRegistered) return reply(ind.noregis())
                                        nom = mek.participant
                                        const tag = {
                                                text: `@${nom.split("@s.whatsapp.net")[0]} *SEDANG AFK ${tels} JANGAN GANGGU YA*`,
                                                contextInfo: { mentionedJid: [nom] }
                                        }
                                        client.sendMessage(from, tag, text, {quoted: mek})
                                        break
				case 'bokep':
				client.updatePresence(from, Presence.composing) 
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(limitend(pushname2))
				if (!isGroup) return reply(ind.groupo())
				 data = fs.readFileSync('./src/18.js');
                 jsonData = JSON.parse(data);
                 randIndex = Math.floor(Math.random() * jsonData.length);
                 randKey = jsonData[randIndex];
                 randBokep = await getBuffer(randKey.image)
                 reply('*JANGAN SANGEAN YA!*')
                 randTeks = randKey.teks
                 client.sendMessage(from, randBokep, image, {quoted: mek, caption: randTeks})
				break
				case 'asupan':
					if (!isGroup) return reply(ind.groupo())
                if (!isRegistered) return reply(ind.noregis())
                if (isLimit(sender)) return reply(ind.limitend(pusname))
                reply(ind.wait())
                anu = await fetchJson(`http://itsmeikygans.my.id/asupan?apikey=${apikey}`)
                asup = await getBuffer(anu.result)
                client.sendMessage(from, asup, video, {mimetype: 'video/mp4', filename: `asupan_bangsa.mp4`, quoted: mek, caption: 'Asupannya Tuan:v'})
                await limitAdd(sender) 
                break
				case 'kalkulator':
					if (!isRegistered) return reply(ind.noregis())
                                if (isLimit(sender)) return reply(ind.limitend(pusname))
				     if (args.length < 1) return reply(`[‚ùó] Kirim perintah *${prefix}kalkulator [ Angka ]*\nContoh : ${prefix}kalkulator 12*12\n*NOTE* :\n- Untuk Perkalian Menggunakan *\n- Untuk Pertambahan Menggunakan +\n- Untuk Pengurangan Mennggunakan -\n- Untuk Pembagian Menggunakan /`)
				    mtk = `${body.slice(12)}`
				    anu = await fetchJson(`https://api.vhtear.com/calculator?value=${mtk}&apikey=${VthearApi}`, {method: 'get'})
				    client.sendMessage(from, `*${anu.result.data}*`, text, {quoted: mek})
				    await limitAdd(sender) 	
				    break 
				case 'setlimit':
					if (args.length < 1) return
					if (!isOwner) return reply(mess.only.ownerB)
					limitt = args[0]
					reply(`Limit berhasil di ubah menjadi : ${limitt}`)
					break
				case 'memeindo':
				if (isBanned) return reply(ind.baned())
                                if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(limitend(pushname2))
				reply(ind.wait())
					memein = await fetchJson(`https://api.zeks.xyz/api/memeindo?apikey=${ZeksApi}`)
					buffer = await getBuffer(memein.result)
					client.sendMessage(from, buffer, image, {quoted: mek, caption: '*MEME*'})
					await limitAdd(sender)
					break
				case 'caklontong':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
					anu = await fetchJson(`https://api.vhtear.com/funkuis&apikey=${VhtearKey}`, {method: 'get'})
					caklontong = `*${anu.result.soal}*`
					lontong = `[üîé] Jawaban : *${anu.result.jawaban}* \n‚û∏ Penjelasan : *${anu.result.desk}*`
					setTimeout( () => {
					client.sendMessage(from, lontong, text, {quoted: mek})					
					}, 30000) // 1000 = 1s,
					setTimeout( () => {
					client.sendMessage(from, '_10 Detik lagi‚Ä¶ cepetan!!_', text)
					}, 20000) // 1000 = 1s,
					setTimeout( () => {
					client.sendMessage(from, '_20 Detik lagi... cepett!!_', text)
					}, 10000) // 1000 = 1s,
					setTimeout( () => {
					client.sendMessage(from, '_30 Detik lagi..._', text)
					}, 2500) // 1000 = 1s,
					setTimeout( () => {
					client.sendMessage(from, caklontong, text, {quoted: mek})
					}, 0) // 1000 = 1s,
					await limitAdd(sender) 
					break 
				case 'emoji':
				if (isBanned) return reply(ind.baned())
				anu = await fetchJson(`https://docs-jojo.herokuapp.com/api/emoji2png?emoji=%F0%9F%98%82&type=aple`, {method: 'get'})
				jes = await getBuffer(anu)
				client.sendMessage(from, jes, image,{quoted : mek, caption : 'DONE'})
				break
				case 'tiktok':
				anu = await fetchJson (`https://docs-jojo.herokuapp.com/api/tiktok_nowm?url=${args[0]}`, {method : 'get' })
				if (anu.error) return reply(anu.error)
					teks = `*From* : ${anu.result.from}\n*Judul* : ${anu.result.title}\n*Upload* : ${anu.result.uploaded}`
					thumb = await getBuffer(anu.result.thumb)
					client.sendMessage(from, thumb, image, {quoted: mek, caption: teks})
					buffer = await getBuffer(anu.result.url)
					client.sendMessage(from, buffer, video, {mimetype: 'video/mp4', filename: `${anu.title}.mp4`, quoted: mek})
					break
				case 'profile':
				if (isBanned) return reply(ind.baned())
    				if (!isRegistered) return reply(ind.noregis())
				reply(ind.wait())
    				try {
					profil = await client.getProfilePicture(`${sender.split('@')[0]}@s.whatsapp.net`)
					} catch {
					profil = 'https://i0.wp.com/www.gambarunik.id/wp-content/uploads/2019/06/Top-Gambar-Foto-Profil-Kosong-Lucu-Tergokil-.jpg'
					}
					 profile = `‚ï≠‚îÄ„Äå *PROFILE ANDA* „Äç\n‚îÇ‚Ä¢ *Name:* ${pushname}\n‚îÇ‚Ä¢ *User Terdaftar:* ‚úÖ\n‚îÇ‚Ä¢ *Link:* wa.me/${sender.split("@")[0]}\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`
					prof = await getBuffer(anu.result.profil)
		 			client.sendMessage(from, buff, image, {quoted: mek, caption: profile})
					break
				case 'nulis2':
				case 'tulis2':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
				if (args.length < 1) return reply('Teksnya mana kak? Contoh : ${prefix}nulis2 Ramlan baik hati')
				laysha = body.slice(8)
				reply('√£‚Ç¨≈í√¢‚Äî√£‚Ç¨WAIT BRO GUE NULIS DUMLU YAKAN')
				buff = await getBuffer(`https://api.xteam.xyz/magernulis3?text=${laysha}&APIKEY=${XteamKey}`)
				client.sendMessage(from, buff, image, {quoted: mek, caption: 'Lebih baik nulis sendiri ya kak :*'})
				await limitAdd(sender)
				break
				case 'nulis':
				case 'tulis':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
                                if (!isGroup) return reply(ind.groupo())
					if (args.length < 1) return reply('Yang mau di tulis apa kak?')
					tulis = body.slice(6)
					reply(ind.wait())
					buffer4 = await getBuffer(`https://api.vhtear.com/write?text=${tulis}&apikey=${VhtearKey}`, {method: 'get'})
					client.sendMessage(from, buffer4, image, {quoted: mek, caption: 'Awas Ketahuan guru'})
					break
				case 'jadwaltv':
						if (isBanned) return reply(ind.baned())
			        	       client.updatePresence(from, Presence.composing) 
		        	               data = await fetchJson(`https://mhankbarbars.herokuapp.com/api/jdtv?ch=${body.slice(10)}&apiKey=${apiKey}`)
					       if (data.error) return reply(data.error)
					       reply(data.result)
					       break
				case 'assalamualaikum':
		               			client.reply(from, `Waalaikumsalam ${pushname2}:)`)
		                		break
				case 'lirik':
				if (isBanned) return reply(ind.baned())
		                if (!isRegistered) return reply(ind.noregis())
                                if (isLimit(sender)) return reply(ind.limitend(pusname))
			                reply(ind.wait())
					teks = body.slice(7)
					anu = await fetchJson(`http://scrap.terhambar.com/lirik?word=${teks}`, {method: 'get'})
					reply('*Lirik dari lagu '+teks+' adalah* :\n\n'+anu.result.lirik)
					await limitAdd(sender) 
					break
		   		 case 'wa.me':
				  case 'wame':
  					client.updatePresence(from, Presence.composing) 
				        options = {
			                text: `„Äå *SELF WHATSAPP* „Äç\n\n_Request by_ : *@${sender.split("@s.whatsapp.net")[0]}\n\nYour link WhatsApp : *https://wa.me/${sender.split("@s.whatsapp.net")[0]}*\n*Or ( / )*\n*https://api.whatsapp.com/send?phone=${sender.split("@")[0]}*`,
			                contextInfo: { mentionedJid: [sender] }
				        }
                case 'chord':
                anu = await fetchJson(`https://tobz-api.herokuapp.com/api/chord?q=${body.slice(7)}&apikey=BotWeA`)
                client.sendMessage(from, anu.result, text, {quoted:mek})
                break
				case 'leaderboard':
				case 'lb’è·é™·è¶·ÇÆ·é°·é™ ':
				_level.sort((a, b) => (a.xp < b.xp) ? 1 : -1)
				uang.sort((a, b) => (a.uang < b.uang) ? 1 : -1)
                let leaderboardlvl = '-----[ *LEADERBOARD LEVEL BOT* ]----\n\n'
                let leaderboarduang = '-----[ *LEADERBOARD UANG BOT* ]----\n\n'
                let nom = 0
                try {
                    for (let i = 0; i < 10; i++) {
                        nom++
                        leaderboardlvl += `*[${nom}]* wa.me/${_level[i].id.replace('@s.whatsapp.net', '')}\n‚îó‚ä± *XP*: ${_level[i].xp} *Level*: ${_level[i].level}\n`
                        leaderboarduang += `*[${nom}]* wa.me/${uang[i].id.replace('@s.whatsapp.net', '')}\n‚î£‚ä± *Uang*: _Rp${uang[i].uang}_\n‚îó‚ä± *Limit*: ${limitawal - _limit[i].limit}\n`
                    }
                    await reply(leaderboardlvl)
                    await reply(leaderboarduang)
                } catch (err) {
                    console.error(err)
                    await reply(`minimal 10 user untuk bisa mengakses database`)
                }
				break
				case 'mutual':
		if (isBanned) return reply(ind.baned())
                if (!isRegistered) return reply( ind.noregis())
                if (isGroup) return  reply( 'Command ini tidak bisa digunakan di dalam grup!')
                anug = getRegisteredRandomId(_registered).replace('@s.whatsapp.net','')
                await reply('Mencari Parter ’è·é™·è¶·ÇÆ·é°·é™ ')
                await reply(`wa.me/${anug}`)
                await reply( `Partner Ketemuüòâ: üóø\n*${prefix}next* ‚Äî New partner ’è·é™·è¶·ÇÆ·é°·é™ `)
            break
		case 'report':
                     const pesan = body.slice(8)
                      if (pesan.length > 300) return client.sendMessage(from, 'Maaf Teks Terlalu Panjang, Maksimal 300 Teks', msgType.text, {quoted: mek})
                        var nomor = mek.participant
                       const teks1 = `*[REPORT]*\nNomor : @${nomor.split("@s.whatsapp.net")[0]}\nPesan : ${pesan}`

                      var options = {
                         text: teks1,
                         contextInfo: {mentionedJid: [nomor]},
                     }
                    client.sendMessage('62895355566000@s.whatsapp.net', options, text, {quoted: mek})
                    reply('*üçÅDEAR USERüçÅ*\n*‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ*\nMasalah telah di laporkan ke owner BOT ’è·é™·è¶·ÇÆ·é°·é™ , laporan palsu/main¬≤ tidak akan ditanggapi.\n*‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ*')
                    break
            case 'next':
		if (isBanned) return reply(ind.baned())
                if (!isRegistered) return reply( ind.noregis())
                if (isGroup) return  reply( 'Command ini tidak bisa digunakan di dalam grup!')
                anug = getRegisteredRandomId(_registered).replace('@s.whatsapp.net','')
                await reply('Mencari Parter ’è·é™·è¶·ÇÆ·é°·é™ ')
                await reply(`wa.me/${anug}`)
                await reply( `Partner Ketemuüòâ: üóø\n*${prefix}next* ‚Äî  new partner ’è·é™·è¶·ÇÆ·é°·é™ `)
            break
				case 'transfer':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
				if (!q.includes('|')) return  reply(ind.wrongf())
                const tujuan = q.substring(0, q.indexOf('|') - 1)
                const jumblah = q.substring(q.lastIndexOf('|') + 1)
                if (checkATMuser(sender) < jumblah) return reply(`uang mu tidak mencukupi untuk melakukan transfer`)
                const tujuantf = `${tujuan.replace("@", '')}@s.whatsapp.net`
                fee = 0.005 *  jumblah
                hasiltf = jumblah - fee
                addKoinUser(tujuantf, hasiltf)
                confirmATM(sender, jumblah)
                addKoinUser('62895355566000@s.whatsapp.net', fee)
                reply(`*„Äå SUKSES CUY „Äç*\n\npengiriman uang telah sukses\ndari : +${sender.split("@")[0]}\nke : +${tujuan}\njumblah transfer : ${jumblah}\npajak : ${fee}\nNote:Jangan Lupa Donasi:)`)
                break
				case 'bank':
				if (!isRegistered) return reply(ind.noregis())
				const kantong = checkATMuser(sender)
				reply(ind.uangkau(pushname, sender, kantong))
				break
				case 'buylimit':
				if (!isRegistered) return reply(ind.noregis())
				payout = body.slice(10)
				const koinPerlimit = 30
				const total = koinPerlimit * payout
				if ( checkATMuser(sender) <= total) return reply(`maaf uang kamu belum mencukupi. silahkan kumpulkan dan beli nanti`)
				if ( checkATMuser(sender) >= total ) {
					confirmATM(sender, total)
					bayarLimit(sender, payout)
					await reply(`*„Äå PEMBAYARAN SUKES „Äç*\n\n*pengirim* : Admin\n*penerima* : ${pushname}\n*nominal pembelian* : ${payout} \n*harga limit* : ${koinPerlimit}/limit\n*sisa uang mu* : ${checkATMuser(sender)}\n\nproses berhasil dengan nomer pembayaran\n${createSerial(15)}`)
				} 
				break
		case 'memeindo':  
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(limitend(pushname2))
				reply(ind.wait())
					memein = await fetchJson(`https://api.zeks.xyz/api/memeindo?apikey=${ZeksApi}`)
					buffer = await getBuffer(memein.result)
					client.sendMessage(from, buffer, image, {quoted: mek, caption: '*MEME*'})
					await limitAdd(sender)
					break 
		case 'waifu':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
					if (!isGroup) return reply(mess.only.group)
					reply(ind.wait())
					anu = await fetchJson(`https://api.vhtear.com/pinterest?query=waifukawai&apikey=${VthearApi}`, {method: 'get'})
					var mi = JSON.parse(JSON.stringify(anu.result));
					var ku =  mi[Math.floor(Math.random() * mi.length)];
					nye = await getBuffer(ku)
					client.sendMessage(from, nye, image, { caption: '*DARLING OHAYOU!*', quoted: mek })
					break
		case 'infogc':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
				if (!isGroup) return reply(ind.groupo())
	     	                   client.updatePresence(from, Presence.composing)
                	       	   ppUrl = await client.getProfilePicture(from)
	                	   reply(ind.wait())
	      		           buffer = await getBuffer(ppUrl)
			           client.sendMessage(from, buffer, image, {quoted: mek, caption: `*NAME* : ${groupName}\n*MEMBER* : ${groupMembers.length}\n*ADMIN* : ${groupAdmins.length}\n*DESK* : ${groupDesc}`})
	                	   break
                case 'moddroid':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
			data = await fetchJson(`https://tobz-api.herokuapp.com/api/moddroid?q=${body.slice(10)}&apikey=BotWeA`)
			hepi = data.result[0] 
			teks = `*Nama*: ${data.result[0].title}\n*publisher*: ${hepi.publisher}\n*mod info:* ${hepi.mod_info}\n*size*: ${hepi.size}\n*latest version*: ${hepi.latest_version}\n*genre*: ${hepi.genre}\n*link:* ${hepi.link}\n*download*: ${hepi.download}`
			buffer = await getBuffer(hepi.image)
			client.sendMessage(from, buffer, image, {quoted: mek, caption: `${teks}`})
			await limitAdd(sender)
			break
			case 'happymod':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
			data = await fetchJson(`https://tobz-api.herokuapp.com/api/happymod?q=${body.slice(10)}&apikey=BotWeA`)
			hupo = data.result[0] 
			teks = `*Nama*: ${data.result[0].title}\n*version*: ${hupo.version}\n*size:* ${hupo.size}\n*root*: ${hupo.root}\n*purchase*: ${hupo.price}\n*link*: ${hupo.link}\n*download*: ${hupo.download}`
			buffer = await getBuffer(hupo.image)
			client.sendMessage(from, buffer, image, {quoted: mek, caption: `${teks}`})
			await limitAdd(sender)
			break
            case 'bitly':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
               client.updatePresence(from, Presence.composing) 
                data = await fetchJson(`https://tobz-api.herokuapp.com/api/bitly?url=${args[0]}&apikey=BotWeA`)
                hasil = `link : ${args[0]}\n\nOutput : ${data.result}`
                reply(hasil)
                await limitAdd(sender)
                break
                case 'nangis':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
					ranp = getRandom('.gif')
					rano = getRandom('.webp')
					anu = await fetchJson('https://tobz-api.herokuapp.com/api/cry?apikey=BotWeA', {method: 'get'})
					if (anu.error) return reply(anu.error)
					exec(`wget ${anu.result} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
						fs.unlinkSync(ranp)
						if (err) return reply(ind.stikga())
						buffer = fs.readFileSync(rano)
						client.sendMessage(from, buffer, sticker, {quoted: mek})
						fs.unlinkSync(rano)
					})
					await limitAdd(sender)
					break
		case 'randomhentai':
                                        gatauda = body.slice(6)
					if (isBanned) return reply(ind.baned())
					if (!isGroup) return reply(ind.groupo())
		                        if (!isNsfw) return reply(ind.nsfwoff())
                                        if (!isRegistered) return reply(ind.noregis())
                                        if (isLimit(sender)) return reply(ind.limitend(pusname))
					if (!isGroupAdmins) return reply(ind.admin())
                                        reply(ind.wait())
                                        anu = await fetchJson(`https://tobz-api.herokuapp.com/api/hentai?apikey=BotWeA`, {method: 'get'})
                                        buffer = await getBuffer(anu.result)
                                        client.sendMessage(from, buffer, image, {quoted: mek})
                                        await limitAdd(sender)
                                        break
		case 'pornhub':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
					var gh = body.slice(9)
					var alan2 = gh.split("&")[0];
					var alan3 = gh.split("&")[1];
					if (args.length < 1) return reply(ind.wrongf())
					reply(ind.wait())
					buffer = await getBuffer(`https://api.vhtear.com/pornlogo?text1=${alan2}&text2=${alan3}&apikey=${VhtearKey}`)
					client.sendMessage(from, buffer, image, {quoted: mek})
					await limitAdd(sender)
					break
		case 'hentai':
				    try {
				    if (isBanned) return reply(ind.baned())
				    if (!isRegistered) return reply(ind.noregis())
				   if (!isGroup) return reply(ind.groupo())
                                      if (!isGroupAdmins) return reply(ind.admin())
				    if (isLimit(sender)) return reply(limitend(pushname2))
						if (!isNsfw) return reply(' *FALSE* ')
						res = await fetchJson(`https://ferdiz-api.herokuapp.com/api/anime/hentai`, {method: 'get'})
						buffer = await getBuffer(res.result)
						client.sendMessage(from, buffer, image, {quoted: mek, caption: 'hati hati ketawan bisa ke ben '})
					} catch (e) {
						console.log(`Error :`, color(e,'red'))
						reply(' *ERROR* ')
					}
		case 'shota':
			if (isBanned) return reply(ind.baned())
			if (!isRegistered) return reply(ind.noregis())
			if (isLimit(sender)) return reply(ind.limitend(pusname))
                        if (!isGroup) return reply(ind.groupo())
                        if (!isNsfw) return reply(ind.nsfwoff())
	    		     res = await fetchJson(`https://tobz-api.herokuapp.com/api/randomshota?apikey=${TobzKey}`)
 		             buffer = await getBuffer(res.image)
			     client.sendMessage(from, buffer, image, {quoted: mek, caption: '>_<'})
			     await limitAdd(sender)
			     break
		case 'loli':
			if (isBanned) return reply(ind.baned())
			if (!isRegistered) return reply(ind.noregis())
			if (isLimit(sender)) return reply(ind.limitend(pusname))
                   if (!isGroup) return reply(ind.groupo())
                   if (!isNsfw) return reply(ind.nsfwoff())
			gatauda = body.slice(6)
			reply(ind.wait())
			anu = await fetchJson(`https://api.vhtear.com/randomloli&apikey=${VhtearKey}`, {method: 'get'})
			buffer = await getBuffer(anu.result.result)
			client.sendMessage(from, buffer, image, {quoted: mek, caption: '*LOLINYA NGAB*'})
			await limitAdd(sender)
			break
		case 'nekonime':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
                                if (!isGroup) return reply(ind.groupo())
             		        if (!isNsfw) return reply(ind.nsfwoff())
		   		      gatauda = body.slice(10)
				      reply(ind.wait())
			   	      anu = await fetchJson(`https://api.vhtear.com/randomnekonime&apikey=${VhtearKey}`, {method: 'get'})
				      buffer = await getBuffer(anu.result.result)
			    	      client.sendMessage(from, buffer, image, {quoted: mek, caption: '*KUCINGNYA NI OM:V*'})
				      await limitAdd(sender)
				      break
                case 'blowjob':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
				if (!isGroup) return reply(ind.groupo())
				if (!isGroupAdmins) return reply(ind.admin())
				   if (!isNsfw) return reply(ind.nsfwoff())
					ranp = getRandom('.gif')
					rano = getRandom('.webp')
					anu = await fetchJson('https://tobz-api.herokuapp.com/api/nsfwblowjob?apikey=BotWeA', {method: 'get'})
				        reply('[‚ùó] Awas Ketawan Owner Bisa Ke block/kick')
					if (anu.error) return reply(anu.error)
					exec(`wget ${anu.result} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
						fs.unlinkSync(ranp)
						if (err) return reply(ind.stikga())
						buffer = fs.readFileSync(rano)
						client.sendMessage(from, buffer, sticker, {quoted: mek})
						fs.unlinkSync(rano)
					})
					await limitAdd(sender)
					break
					case 'loli':
					loli.getSFWLoli(async (err, res) => {
						if (err) return reply('‚ùå *ERROR* ‚ùå')
						buffer = await getBuffer(res.url)
						client.sendMessage(from, buffer, image, {quoted: mek, caption: '*AWAS ADA FBI*'})
					})
					case 'cium':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
					ranp = getRandom('.gif')
					rano = getRandom('.webp')
					anu = await fetchJson('https://tobz-api.herokuapp.com/api/kiss?apikey=BotWeA', {method: 'get'})
					if (anu.error) return reply(anu.error)
					exec(`wget ${anu.result} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
						fs.unlinkSync(ranp)
						if (err) return reply(ind.stikga())
						buffer = fs.readFileSync(rano)
						client.sendMessage(from, buffer, sticker, {quoted: mek})
						fs.unlinkSync(rano)
					})
					await limitAdd(sender)
					break
					case 'peluk':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
					ranp = getRandom('.gif')
					rano = getRandom('.webp')
					anu = await fetchJson('https://tobz-api.herokuapp.com/api/hug?apikey=BotWeA', {method: 'get'})
					if (anu.error) return reply(anu.error)
					exec(`wget ${anu.result} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
						fs.unlinkSync(ranp)
						if (err) return reply(ind.stikga())
						buffer = fs.readFileSync(rano)
						client.sendMessage(from, buffer, sticker, {quoted: mek})
						fs.unlinkSync(rano)
					})
					await limitAdd(sender)
					break
		      case 'ttp':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
		    	        if (isLimit(sender)) return reply(ind.limitend(pusname))
					if (args.length < 1) return reply('*PARAMETER SALAH‚ùå*\nContoh= ${prefix}ttp ’è·é™·è¶·ÇÆ·é°·é™  chan')
					ranp = getRandom('.png')
					rano = getRandom('.webp')
					teks = body.slice(4).trim()
					anu = await fetchJson(`https://mhankbarbar.tech/api/text2image?text=${teks}&apiKey=${BarBarKey}`, {method: 'get'})
					if (anu.error) return reply(anu.error)
					exec(`wget ${anu.result} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=20 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
						fs.unlinkSync(ranp)
						if (err) return reply(ind.stikga())
						client.sendMessage(from, fs.readFileSync(rano), sticker, {quoted: mek})
						fs.unlinkSync(rano)
						})
                      case 'qrcode':
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
					const tex = encodeURIComponent(body.slice(8))
					if (!tex) return client.sendMessage(from, '*PARAMETERSALAH‚ùå*\nContoh= ${prefix}qrcode ’è·é™·è¶·ÇÆ·é°·é™  bot', text, {quoted: mek})
					const buff = await getBuffer(`https://api.qrserver.com/v1/create-qr-code/?size=500x500&data=${tex}`)
					client.sendMessage(from, buff, image, {quoted: mek})
					await limitAdd(sender)
					break
		case 'dadu':
			if (isBanned) return reply(ind.baned())
			if (!isRegistered) return reply(ind.noregis())
			if (isLimit(sender)) return reply(ind.limitend(pusname))
			ranp = getRandom('.png')
			rano = getRandom('.webp')
		        random = `${Math.floor(Math.random() * 6)}`
                    hasil = 'https://www.random.org/dice/dice' + random + '.png'
			exec(`wget ${hasil} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
			fs.unlinkSync(ranp)
			if (err) return reply(mess.error.stick)
			buffer = fs.readFileSync(rano)
			client.sendMessage(from, buffer, sticker, {quoted: mek})
			fs.unlinkSync(rano)
			})
			break
		case 'fake':
			costum('kamu gay', '0@s.whatsapp.net', `njir`, {quoted: mek})
			break
		case 'delete':
		case 'del':
		case 'd':
			if (!isRegistered) return reply(ind.noregis())
                        if (isLimit(sender)) return reply(ind.limitend(pusname))
			if (!isGroup)return reply(mess.only.group)
			if (!isGroupAdmins)return reply(mess.only.admin)
			client.deleteMessage(from, { id: mek.message.extendedTextMessage.contextInfo.stanzaId, remoteJid: from, fromMe: true })
			break
		case 'wibu':
			if (isBanned) return reply(ind.baned())
			if (!isRegistered) return reply(ind.noregis())
			if (isLimit(sender)) return reply(ind.limitend(pusname))
                   if (!isGroup) return reply(ind.groupo())
                   if (!isNsfw) return reply(ind.nsfwoff())
			data = await fetchJson(`https://api.vhtear.com/randomwibu&apikey=${VhtearKey}`)
			buffer = await getBuffer(data.result.foto)
			client.sendMessage(from, buffer, image, {quoted: mek, caption: '*IH WIBU*'})
			await limitAdd(sender)
			break
                case 'husbu':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
				    try {
						res = await fetchJson(`https://tobz-api.herokuapp.com/api/husbu?apikey=BotWeA`)
						buffer = await getBuffer(res.image)
						client.sendMessage(from, buffer, image, {quoted: mek, caption: '*HUSBU FROM ’è·é™·è¶·ÇÆ·é°·é™  BOT*'})
					} catch (e) {
						console.log(`Error :`, color(e,'red'))
						reply('*ERROR* ‚ùå')
					}
					await limitAdd(sender)
					break
		case 'randomhentong':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
                   if (!isGroup) return reply(ind.groupo())
                   if (!isNsfw) return reply(ind.nsfwoff())
					gatauda = body.slice(15)
					reply(ind.wait())
					anu = await fetchJson(`https://api.vhtear.com/randomhentai?apikey=${VhtearKey}`, {method: 'get'})
					buffer = await getBuffer(anu.result.url)
					client.sendMessage(from, buffer, image, {quoted: mek})
					await limitAdd(sender)
					break
                case 'ranime':
		case 'randomanime':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
					gatauda = body.slice(8)
					reply(ind.wait())
					anu = await fetchJson(`https://tobz-api.herokuapp.com/api/randomanime?apikey=BotWeA`, {method: 'get'})
					buffer = await getBuffer(anu.result)
					client.sendMessage(from, buffer, image, {quoted: mek ,caption:'*RANIMENYA BANG*'})
					await limitAdd(sender)
					break
	                        case 'gacha cewek':
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
                   var cewe =['ullzang girl','cewe cantik','hijab cantik','korean girl','cewe sexy']
                   anu = await fetchJson('https://api.fdci.se/rep.php?gambar= '+ cewe,)
                   var n = JSON.parse(JSON.stringify(anu));
                   var nimek =  n[Math.floor(Math.random() * n.length)];
					reply(ind.wait())
					pok = await getBuffer(nimek)
					client.sendMessage(from, pok, image, { quoted: mek })
					await limitAdd(sender)
					break
                case 'gacha cowok':
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
                   var cewe =['cowo ganteng', 'cogan', 'korean boy', 'chinese boy', 'japan boy']
                   anu = await fetchJson('https://api.fdci.se/rep.php?gambar= '+ cewe,)
                   var n = JSON.parse(JSON.stringify(anu));
                   var nimek =  n[Math.floor(Math.random() * n.length)];
					reply(ind.wait())
					pok = await getBuffer(nimek)
					client.sendMessage(from, pok, image, { quoted: mek })
					await limitAdd(sender)
					break
		case 'kickbeban':
			if (!isRegistered) return reply(ind.noregis())
                                if (isLimit(sender)) return reply(ind.limitend(pusname))
                                if (!isGroup) return reply(ind.groupo())
                                if (!isGroupAdmins) return reply(ind.admin())
					if (mek.message.extendedTextMessage === undefined || mek.message.extendedTextMessage === null) return reply('Tag target yang ingin di tendang!')
					mentioned = mek.message.extendedTextMessage.contextInfo.mentionedJid
					if (mentioned.length > 1) {
						teks = 'Perintah di terima, mengeluarkan beban grup :\n'
						for (let _ of mentioned) {
							teks += `@${_.split('@')[0]}\n`
						}
						mentions(teks, mentioned, true)
						client.groupRemove(from, mentioned)
					} else {
						setTimeout( () => {
						mentions(`*otw kick kita!,kasih waktu dlu yamkanüòÇ : @${mentioned[0].split('@')[0]}*`, mentioned, true)
						}, 0) // 100 = 5s,
					setTimeout( () => {
					client.groupRemove(from, mentioned, {quoted: mek}) // ur cods
					}, 30000) // 1000 = 5s,
					setTimeout( () => {
					client.sendMessage(from, '*Sayonara Beban GrupüëãüòÇ*', text) // ur cods
					}, 20000) // 1000 = 5s,
					setTimeout( () => {
					client.sendMessage(from, '*2 Sabarr...üòÇ*', text) // ur cods
					}, 10000) // 1000 = 5s,
					setTimeout( () => {
					client.sendMessage(from, '*3üóø*', text) // ur cods
					}, 1000) // 1000 = 10s,
					setTimeout( () => {
					client.sendMessage(from, '*Bissmillah hedshot ü§æ‚Äç‚ôÇ*', text, { quoted: mek }) // ur cods
					}, 0) // 1000 = 10s,
					}
					break
		case 'kpop':
		if (isBanned) return reply(ind.baned())
              if (!isRegistered) return reply(ind.noregis())
                                if (isLimit(sender)) return reply(ind.limitend(pusname))
                   if (!isGroup) return reply(ind.groupo())
                   if (!isNsfw) return reply(ind.nsfwoff())
              anu = await fetchJson(`https://tobz-api.herokuapp.com/api/randomkpop?apikey=${tobzapi}`, {method: 'get'})
              buffte = await getBuffer(anu.result)
              client.sendMessage(from, buffte, image, {quoted: mek, caption: '*Ih gay*'})
              break 
	       case 'hartatahta':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
				if (args.length < 1) return reply('Contoh : ${prefix}hartatahta botwea')
				har = body.slice(12)
					reply('*[üîé]Error kak ............*')
					buffer = await getBuffer(`https://api.vhtear.com/hartatahta?text=${har}&apikey=${VhtearKey}`)
					client.sendMessage(from, buffer, image, {quoted: mek})
					await limitAdd(sender)
					break
                case 'joox':
				if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
				if (!isGroupAdmins) return reply(ind.admin())
				if (!isGroup) return reply(ind.groupo())
                data = await fetchJson(`https://tobz-api.herokuapp.com/api/joox?q=${body.slice(6)}&apikey=BotWeA`, {method: 'get'})
               if (data.error) return reply(data.error)
                 infomp3 = `*Lagu Berhasil Ditemukan!!!*\nJudul : ${data.result.judul}\nAlbum : ${data.result.album}\nDipublikasi : ${data.result.dipublikasi}\n*Note: LAGU BENTAR LAGI DIKIRIM JDI JAN SPAM*`
                buffer = await getBuffer(data.result.thumb)
                lagu = await getBuffer(data.result.mp3)
                reply('[‚è≥] Orang Sabar Disayang Dajjal')
		client.sendMessage(from, buffer, image, {quoted: mek, caption: infomp3})
                client.sendMessage(from, lagu, audio, {mimetype: 'audio/mp4', filename: `${data.result.title}.mp3`, quoted: mek})
                await limitAdd(sender)
                break
                case 'play':
                  if (isBanned) return reply(ind.baned())
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname)) 
                reply(ind.wait())
                anu = await fetchJson(`https://api.vhtear.com/ytmp3?query=${body.slice(6)}&apikey=${VhtearKey}`)
               if (anu.error) return reply(anu.error)
                 infomp3 = `*„ÄåüçÅ„ÄçLagu Ditemukan*\n‚û∏ Judul : ${anu.result.title}\n‚û∏ Durasi : ${anu.result.duration}\n‚û∏ Size : ${anu.result.size}\n\n*[WAIT] Sabar Ya kak Sekitar 1 Menit*`
                buffer = await getBuffer(anu.result.image)
                lagu = await getBuffer(anu.result.mp3)
                client.sendMessage(from, buffer, image, {quoted: mek, caption: infomp3})
                client.sendMessage(from, lagu, audio, {mimetype: 'audio/mp4', quoted: mek})
                break			
				case 'quotesanime':
				    try {
					if (!isRegistered) return reply(ind.noregis())
                                if (isLimit(sender)) return reply(ind.limitend(pusname))
                   if (!isGroup) return reply(ind.groupo())
                   if (!isNsfw) return reply(ind.nsfwoff())
						res = await fetchJson(`https://tobz-api.herokuapp.com/api/randomquotes`, {method: 'get'})
						buffer = await getBuffer(res.result)
						client.sendMessage(from, buffer, image, {quoted: mek, caption: 'hug'})
					} catch (e) {
						console.log(`Error :`, color(e,'red'))
						sa = await getBuffer(`https://i.ibb.co/JcSjmNY/IMG-20210107-WA0052.jpg`)
						client.sendMessage(from, sa, image, {quoted: mek, caption: 'Error Kak!!'})
					}
					break
					case 'waifu':
			if (isBanned) return reply(ind.baned())
                        if (!isRegistered) return reply(ind.noregis())
                                if (isLimit(sender)) return reply(ind.limitend(pusname))
                   if (!isGroup) return reply(ind.groupo())
                   if (!isNsfw) return reply(ind.nsfwoff())
                                        reply(ind.wait())
                                        anu = await fetchJson(`https://tobz-api.herokuapp.com/api/waifu?apikey=BotWeA`, {method: 'get'})
                                        if (anu.error) return reply(anu.error)
                                        buffer = await getBuffer(anu.image)
                                        waifu = `*${anu.desc}`
                                        client.sendMessage(from, buffer, image, {quoted: mek, caption: waifu})
                                        break
				case 'limit':
				   if (!isRegistered) return reply(ind.noregis())
				   checkLimit(sender)
					break
                 case 'avengers':
                 if (!isRegistered) return reply(ind.noregis())
                 if (isLimit(sender)) return reply(ind.limitend(pusname))
					if (args.length < 1) return reply(ind.wrongf())
					if (!q.includes('|')) return  reply(ind.wrongf())
                   const aruga1 = q.substring(0, q.indexOf('|') - 0)
                    const aruga2 = q.substring(q.lastIndexOf('|') + 1)
					reply(ind.wait())
					aruga = await getBuffer(`https://arugaz.my.id/api/textpro/avengers?text1=${aruga1}&text2=${aruga2}`)
					reply('[‚ùó] Menunya Rusak')
					client.sendMessage(from, aruga, image, {caption: 'Nih kak', quoted: mek})
					await limitAdd(sender)
					break 
					case 'wolfmetal':
					if (!isRegistered) return reply(ind.noregis())
                 if (isLimit(sender)) return reply(ind.limitend(pusname))
					if (args.length < 1) return reply('*teksnya mana kak?*')
					wometal = body.slice(10)
					reply(ind.wait())
					anu = await fetchJson(`https://tobz-api.herokuapp.com/api/photooxy?theme=wolf_metal&text=${wometal}&apikey=BotWeA`, {method: 'get'})
					buffer = await getBuffer(anu.result)
					client.sendMessage(from, buffer, image, {quoted: mek})
					break
					case 'pubg':
                			if (!isRegistered) return reply(ind.noregis())
		                 if (isLimit(sender)) return reply(ind.limitend(pusname))
					var gh = body.slice(5)
					var tels5 = gh.split("|")[0];
					var tels6 = gh.split("|")[1];
					if (args.length < 1) return reply(mess.blank)
					reply(ind.wait())
					anu = await fetchJson(`https://tobz-api.herokuapp.com/api/photooxy?theme=pubg&text1=${tels5}&text2=${tels6}&apikey=BotWeA`, {method: 'get'})
					buffer = await getBuffer(anu.result)
					client.sendMessage(from, buffer, image, {quoted: mek})
					break
					case '8bit':
	        	        	if (!isRegistered) return reply(ind.noregis())
        	        	 if (isLimit(sender)) return reply(ind.limitend(pusname))
					var gh = body.slice(5)
					var tels8 = gh.split("|")[0];
					var tels7 = gh.split("|")[1];
					if (args.length < 1) return reply(mess.blank)
					reply(ind.wait())
					anu = await fetchJson(`https://tobz-api.herokuapp.com/api/photooxy?theme=bit8&text1=${tels8}&text2=${tels7}&apikey=BotWeA`, {method: 'get'})
					buffer = await getBuffer(anu.result)
					client.sendMessage(from, buffer, image, {quoted: mek})
					break
					case 'goldbutton':
					if (!isRegistered) return reply(ind.noregis())
	                                if (isLimit(sender)) return reply(ind.limitend(pusname))
					gol = body.slice(12)
					if (args.length < 1) return reply('Teksnya mana um')
					reply(mess.wait)
					anu = await fetchJson(`https://api-zeks.harispoppy.com/api/gplaybutton?text=${gol}&apikey=apivinz`, {method: 'get'})
					gools = await getBuffer(anu.result)
					client.sendMessage(from, gools, image, {quoted: mek})
					break
					case 'halloweentext':
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))				
				if (args.length < 1) return reply(ind.wrongf())
				ween = body.slice(15)
				if (ween.length > 10) return reply('Teksnya kepanjangan, maksimal 9 karakter')
				reply(ind.wait())
				buffer = await getBuffer(`https://api.xteam.xyz/textpro/helloweenfire?text=${ween}&APIKEY=${XteamKey}`)
		    client.sendMessage(from, buffer, image, {quoted: mek})
		    await limitAdd(sender)	
		    break
					case 'summer':
					if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					if (args.length < 1) return reply(ind.wrongf())
					aruga = body.slice(8)
					reply(ind.wait())
					aruga = await getBuffer(`https://arugaz.my.id/api/textpro/sandsummer?text=${aruga}`)
					reply('[‚ùó] Menunya Rusak')
					client.sendMessage(from, aruga, image, {caption: 'Nih kak', quoted: mek})
					await limitAdd(sender)
					break
					case 'sandwrite':
					if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					if (args.length < 1) return reply(ind.wrongf())
					aruga = body.slice(11)
					reply(ind.wait())
					aruga = await getBuffer(`https://arugaz.my.id/api/textpro/sandwrite?text=${aruga}`)
					reply('[‚ùó] Menunya Rusak')
					client.sendMessage(from, aruga, image, {caption: 'Nih kak', quoted: mek})
					await limitAdd(sender)
					break 
					case 'metaldark':
					if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					if (args.length < 1) return reply(ind.wrongf())
					aruga = body.slice(11)
					reply(ind.wait())
					aruga = await getBuffer(`https://arugaz.my.id/api/textpro/metaldark?text=${aruga}`)
					reply('[‚ùó] Menunya Rusak')
					client.sendMessage(from, aruga, image, {caption: 'Nih kak', quoted: mek})
					await limitAdd(sender)
					break 
					case 'dropwater':
					if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					if (args.length < 1) return reply(ind.wrongf())
					aruga = body.slice(11)
					reply(ind.wait())
					aruga = await getBuffer(`https://arugaz.my.id/api/textpro/dropwater?text=${aruga}`)
					reply('[‚ùó] Menunya Rusak')
					client.sendMessage(from, aruga, image, {caption: 'Nih kak', quoted: mek})
					await limitAdd(sender)
					break 
					case 'grenneon':
					if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					if (args.length < 1) return reply(ind.wrongf())
					aruga = body.slice(10)
					reply(ind.wait())
					aruga = await getBuffer(`https://arugaz.my.id/api/textpro/greenneon?text=${aruga}`)
					reply('[‚ùó] Menunya Rusak')
					client.sendMessage(from, aruga, image, {caption: 'Nih kak', quoted: mek})
					await limitAdd(sender)
					break 
					case 'neontext':
					if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					if (args.length < 1) return reply(ind.wrongf())
					aruga = body.slice(10)
					reply(ind.wait())
					aruga = await getBuffer(`https://arugaz.my.id/api/textpro/neontext?text=${aruga}`)
					reply('[‚ùó] Menunya Rusak')
					client.sendMessage(from, aruga, image, {caption: 'Nih kak', quoted: mek})
					await limitAdd(sender)
					break 
					case 'toxic':
					if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					if (args.length < 1) return reply(ind.wrongf())
					aruga = body.slice(7)
					reply(ind.wait())
					aruga = await getBuffer(`https://arugaz.my.id/api/textpro/toxictext?text=${aruga}`)
					reply('[‚ùó] Menunya Rusak')
					client.sendMessage(from, aruga, image, {caption: 'Nih kak', quoted: mek})
					await limitAdd(sender)
					break
					case 'sumery':
					if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					if (args.length < 1) return reply(ind.wrongf())
					aruga = body.slice(8)
					reply(ind.wait())
					aruga = await getBuffer(`https://arugaz.my.id/api/textpro/sandsummery?text=${aruga}`)
					reply('[‚ùó] Menunya Rusak')
					client.sendMessage(from, aruga, image, {caption: 'Nih kak', quoted: mek})
					await limitAdd(sender)
					break
					case 'blood':
					if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					if (args.length < 1) return reply(ind.wrongf())
					aruga = body.slice(7)
					reply(ind.wait())
					aruga = await getBuffer(`https://arugaz.my.id/api/textpro/bloodtext?text=${aruga}`)
					reply('[‚ùó] Menunya Rusak')
					client.sendMessage(from, aruga, image, {caption: 'Nih kak', quoted: mek})
					await limitAdd(sender)
					break
					case 'firework':
					if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					if (args.length < 1) return reply(ind.wrongf())
					arugazzz = body.slice(10)
					reply(ind.wait())
					arugazzz = await getBuffer(`https://arugaz.my.id/api/textpro/firework?text=${arugazzz}`)
					reply('[‚ùó] Menunya Rusak')
					client.sendMessage(from, arugazzz, image, {caption: 'Nih kak', quoted: mek})
					await limitAdd(sender)
					break
					case 'lava':
					if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					if (args.length < 1) return reply(ind.wrongf())
					aruga = body.slice(6)
					reply(ind.wait())
					aruga = await getBuffer(`https://arugaz.my.id/api/textpro/lavatext?text=${aruga}`)
					reply('[‚ùó] Menunya Rusak')
					client.sendMessage(from, aruga, image, {caption: 'Nih kak', quoted: mek})
					await limitAdd(sender)
					break
		case 'iri':
const irimp3 = fs.readFileSync('./assets/iri.mp3');
client.sendMessage(from, irimp3, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})
break
		case 'oyasumi':
const oyasumi = fs.readFileSync('./assets/oyasumi');
client.sendMessage(from, oyasumi, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})
break
		case 'bot':
const bot = fs.readFileSync('./assets/bot');
client.sendMessage(from, bot, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})
break
case 'yamete':
const yamete = fs.readFileSync('./assets/yamete');
client.sendMessage(from, yamete, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})
break
				case 'ban':
					if (!isOwner) return reply(ind.ownerb())
					bnnd = body.slice(6)
					ban.push(`${bnnd}@s.whatsapp.net`)
					fs.writeFileSync('./database/user/banned.json', JSON.stringify(ban))
					reply(`Nomor wa.me/${bnnd} telah dibanned !`)
					break
				case 'unban':
					if (!isOwner) return reply(ind.ownerb())
					bnnd = body.slice(8)
					ban.splice(`${bnnd}@s.whatsapp.net`, 1)
					fs.writeFileSync('./database/user/banned.json', JSON.stringify(ban))
					reply(`Nomor wa.me/${bnnd} telah di unban!`)
					break
                case '1cak':
				    try {
			    	            if (!isRegistered) return reply(ind.noregis())
				            if (isLimit(sender)) return reply(ind.limitend(pusname))
					    if (!isGroup) return reply(ind.groupo())
					    if (!isNsfw) return reply(ind.nsfwoff())
						res = await fetchJson(`https://st4rz.herokuapp.com/api/1cak`, {method: 'get'})
						buffer = await getBuffer(res.result)
						client.sendMessage(from, buffer, image, {quoted: mek, caption: 'ni anjim'})
					} catch (e) {
						console.log(`Error :`, color(e,'red'))
						reply(ind.wrongf())
					}
					await limitAdd(sender)
					break
                case 'quotes':
					if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					anu = await fetchJson(`https://docs-jojo.herokuapp.com/api/quotesnime/random`, {method: 'get'})
					reply(anu.data.quote)
					await limitAdd(sender)
					break		
					case 'infonomor':
					if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
                    if (args.length < 1) return reply(`Masukan Nomor\nContoh : ${prefix}infonomor 0812345678`)
                data = await fetchJson(`https://docs-jojo.herokuapp.com/api/infonomor?no=${body.slice(11)}`)
                if (data.error) return reply(data.error)
                if (data.result) return reply(data.result)
                hasil = `‚ï†‚û• internasional : ${data.international}\n‚ï†‚û• nomor : ${data.nomor}\n‚ï†‚û• operator : ${data.op}\n‚ï†‚û• Note:Jangan Lupa Donasi:D`
                reply(hasil)
                await limitAdd(sender)
					break 
                case 'slap':
                    kapankah = body.slice(1)
                    if (isLimit(sender)) return reply(ind.limitend(pusname))
					const slap =['anjing','babi lu','anak anjing','udah tolol nub Lagi','muka lo kek monyet','udah jomblo sendirian lagi dirumah tolol','so so an mau punya pacar muka aja kek monyet lepass dari kandang','ganteng doang di toxic aja dibilang baperan','pantek kau','bangsat kau','ku entod kalian nangis kau','memek lu semua','lihat anak anjing lagi baca','ganteng doang jemput cewe dipanggang','kamu cantik beb bullshit anjing cowo buaya','anak dajjal','puki lu','anjing ngajak gelud','sama hantu takut cupu ngentod','cupu cupu aja gausah bacot','kontol lu semua','bocah lu semua kontol','3 Hari Lagi']
					const ple = slap[Math.floor(Math.random() * slap.length)]
					pod = await getBuffer(`https://media.giphy.com/media/S8507sBJm1598XnsgD/source.gif`)
					client.sendMessage(from, pod, image, { quoted: mek, caption: '*Toxic*\n\n'+ ple })
					await limitAdd(sender)
					break
					case 'tampar':
					if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					ranp = getRandom('.gif')
					rano = getRandom('.webp')
					buffer = await getBuffer('https://media.giphy.com/media/S8507sBJm1598XnsgD/source.gif', {method: 'get'})
					exec(`wget ${buffer.result} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
						fs.unlinkSync(ranp)
						if (err) return reply(ind.stikga())
						buffer = fs.readFileSync(rano)
						client.sendMessage(from, buffer, sticker, {quoted: mek})
						fs.unlinkSync(rano)
					})
					await limitAdd(sender)
					break
                case 'beritahoax':
                     if (!isRegistered) return reply(ind.noregis())
                     if (isLimit(sender)) return reply(ind.limitend(pusname))
                    client.updatePresence(from, Presence.composing) 
					data = await fetchJson(`https://docs-jojo.herokuapp.com/api/infohoax`, {method: 'get'})
					teks = '=================\n'
					for (let i of data.result) {
						teks += `*Gambar* : ${i.image}\n*Title* : ${i.title}\n*link* : ${i.link}\n*tag* : ${i.tag}\n=================\n`
					}
					reply(teks.trim())
					await limitAdd(sender)
					break 
					case 'setppbot':
					if (!isOwner) return reply(ind.ownerb())
				    client.updatePresence(from, Presence.composing) 
					if (!isQuotedImage) return reply(`Kirim gambar dengan caption ${prefix}setbotpp atau tag gambar yang sudah dikirim`)
					enmedia = JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo
					media = await client.downloadAndSaveMediaMessage(enmedia)
					await client.updateProfilePicture(botNumber, media)
					reply('Makasih beb profil barunyaüòâ')
					break 
					case 'brainly':
					if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
                    brien = body.slice(9)
					brainly(`${brien}`).then(res => {
					teks = '‚ùâ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùâ\n'
					for (let Y of res.data) {
						teks += `\n*„Äå _BRAINLY_ „Äç*\n\n*‚û∏ Pertanyaan:* ${Y.pertanyaan}\n\n*‚û∏ Jawaban:* ${Y.jawaban[0].text}\n‚ùâ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùâ\n`
					}
					client.sendMessage(from, teks, text, {quoted: mek, detectLinks: false})
                        console.log(res)
                    })
					await limitAdd(sender)
					break 
				case 'bcgc':
				     if (!isOwner) return reply(ind.ownerb())
					if (args.length < 1) return reply('.......')
					anu = await groupMembers
					nom = mek.participant
					if (isMedia && !mek.message.videoMessage || isQuotedImage) {
						const encmedia = isQuotedImage ? JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo : mek
						buff = await client.downloadMediaMessage(encmedia)
						for (let _ of anu) {
							client.sendMessage(_.jid, buff, image, {caption: `*„Äå BC GROUP „Äç*\n\nDari Grup : ${groupName}\nPengirim : wa.me/${(sender.split('@')[0])}\nPesan : ${body.slice(6)}`})
						}
						reply('')
					} else {
						for (let _ of anu) {
							sendMess(_.jid, `*„Äå BC GROUP ’è·é™·è¶·ÇÆ·é°·é™  „Äç*\n\nDari Grup : ${groupName}\nPengirim : wa.me/${(sender.split('@')[0])}\nPesan : ${body.slice(6)}\nNote:Jangan Lupa Donasi:D`)
						}
						reply('Sukses broadcast group')
					}
					break 
	      				case 'pinterest':
					if (!isRegistered) return reply(ind.noregis())
					if (isLimit(sender)) return reply(ind.limitend(pusname))
					client.updatePresence(from, Presence.composing) 
					data = await fetchJson(`https://api.fdci.se/rep.php?gambar=${body.slice(11)}`, {method: 'get'})
					reply(ind.wait())
					n = JSON.parse(JSON.stringify(data));
					nimek =  n[Math.floor(Math.random() * n.length)];
					pok = await getBuffer(nimek)
					client.sendMessage(from, pok, image, { quoted: mek, caption: `*PINTEREST ’è·é™·è¶·ÇÆ·é°·é™  BOT*`})
					await limitAdd(sender)
					break 
					case 'resepmasakan':
					if (!isRegistered) return reply(ind.noregis())
                   anu = await fetchJson(`https://mnazria.herokuapp.com/api/resep?key=${body.slice(14)}`, {method: 'get'})
                   if (anu.error) return reply(anu.error)
                   buff = await getBuffer(anu.thumb_item)
                   hasil = `*title* \n ${anu.title} *item_name* \n ${anu.item_name} *ingredient* \n${anu.ingredient} *step* \n${anu.step}`
                   client.sendMessage(from, buff, image, {quoted: mek, caption: hasil})
                   await limitAdd(sender)
					break 
                   case 'igstalk':
   				if (!isRegistered) return reply(ind.noregis())
                                if (isLimit(sender)) return reply(ind.limitend(pusname))
					data = await fetchJson(`https://ferdiz-api.herokuapp.com/api/stalkig/user/name=${body.slice(9)}`, {method: 'get'})
					buffer = await getBuffer(data.img)
					reply(ind.wait())
					hasil = `*username* : ${data.username}\n*Fullname* : ${data.fullname}\n*pengikut* : ${data.followers}\n*Mengikuti* : ${data.following}\n*POSTS* : ${data.posts}\n*bio* :\n ${data.bio}`
					client.sendMessage(from, buffer, image, {quoted: mek, caption: hasil})
		                        await limitAdd(sender) 
		                        break
                    case 'kickall':
                    if (!isOwner) return reply(ind.ownerb())
			        members_id = []
					teks = (args.length > 1) ? body.slice(8).trim() : ''
					teks += '\n\n'
					for (let mem of groupMembers) {
						teks += `*üòò* ${mem.jid.split('@')[0]}\n`
						members_id.push(mem.jid)
					}
					mentions(teks, members_id, true)
					client.groupRemove(from, members_id)
					break 
					case 'setreply':
					if (!isOwner) return reply(ind.ownerb())
                    client.updatePresence(from, Presence.composing) 
					if (args.length < 1) return
					cr = body.slice(10)
					reply(`reply berhasil di ubah menjadi : ${cr}`)
					await limitAdd(sender)
					break 
					case 'grouplist':
					if (!isRegistered) return reply(ind.noregis())
					client.updatePresence(from, Presence.composing) 
					teks = `\`\`\`Ini adalah list GROUP BOT ’è·é™·è¶·ÇÆ·é°·é™  :\n\n\`\`\``
					no = 0
					for (let hehehe of groupId) {
						no += 1
						teks += `\`\`\`[${no.toString()}]\`\`\` @${hehehe.split('@')[0]}\n`
					}
					teks += `\n\`\`\`Total grup : ${groupId.length}\`\`\``
					client.sendMessage(from, teks.trim(), extendedText, {quoted: mek})
					break
				case 'daftar':
                if (isRegistered) return  reply(ind.rediregis())
                if (!q.includes('|')) return  reply(ind.wrongf())
                const namaUser = q.substring(0, q.indexOf('|') - 0)
                const umurUser = q.substring(q.lastIndexOf('|') + 1)
                const serialUser = createSerial(20)
                if(isNaN(umurUser)) return await reply('*Umur harus berupa angka!*')
                if (namaUser.length >= 30) return reply(`why is your name so long it's a name or a train`)
                if (umurUser > 20) return reply(`*UMUR KAMU TERLALU TUA UNTUK MENJADI TEMAN ’è·é™·è¶·ÇÆ·é°·é™ *`)
                if (umurUser < 10) return reply(`*UMUR KAMU TERLALU MUDA UNTUK MRNJADI TEMAN ’è·é™·è¶·ÇÆ·é°·é™ *`)
                veri = sender
                if (isGroup) {
                    addRegisteredUser(sender, namaUser, umurUser, time, serialUser)
                    await reply(ind.registered(namaUser, umurUser,  serialUser, time, sender))
                    reply('Terima Kasih Sudah Daftar')
		    addATM(sender)
                    addLevelingId(sender)
                    console.log(color('[REGISTER]'), color(time, 'yellow'), 'Name:', color(namaUser, 'cyan'), 'Age:', color(umurUser, 'cyan'), 'Serial:', color(serialUser, 'cyan'), 'in', color(sender || groupName))
                } else {
                    addRegisteredUser(sender, namaUser, umurUser, time, serialUser)
                    await reply(ind.registered(namaUser, umurUser, serialUser, time, sender))
		    reply('Terima Kasih Sudah Daftar')
                    addATM(sender)
                    addLevelingId(sender)
                    console.log(color('[REGISTER]'), color(time, 'yellow'), 'Name:', color(namaUser, 'cyan'), 'Age:', color(umurUser, 'cyan'), 'Serial:', color(serialUser, 'cyan'))
                }
					break
            	case 'mining':
                      if (!isRegistered) return reply(ind.noregis())
                      if (isLimit(sender)) return reply(ind.limitend(pushname))
                      if (!isEventon) return reply(`maaf ${pushname} event mining tidak di aktifkan oleh owner`)
                      if (isOwner) {
                      const one = 99999999999999999999999
                      addLevelingXp(sender, one)
                      addLevelingLevel(sender, 99)
                      reply(`karena kamu owner bot ’è·é™·è¶·ÇÆ·é°·é™  ini ${one}Xp untuk kamuüòâ`)
                      }else{
                      const mining = Math.ceil(Math.random() * 10000)
                      addLevelingXp(sender, mining)
                      await reply(`*selamat* ${pushname} kamu mendapatkan *${mining}Xp*`)
                      }
                    await limitAdd(sender)
					break
				case 'bisakah':
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
					bisakah = body.slice(1)
					const bisa =['Bisa','Tidak Bisa','Coba Ulangi']
					const keh = bisa[Math.floor(Math.random() * bisa.length)]
					client.sendMessage(from, 'Pertanyaan : *'+bisakah+'*\n\nJawaban : '+ keh, text, { quoted: mek })
					await limitAdd(sender)
					break
				case 'kapankah':
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
					kapankah = body.slice(1)
					const kapan =['Besok','Lusa','Tadi','4 Hari Lagi','5 Hari Lagi','6 Hari Lagi','1 Minggu Lagi','2 Minggu Lagi','3 Minggu Lagi','1 Bulan Lagi','2 Bulan Lagi','3 Bulan Lagi','4 Bulan Lagi','5 Bulan Lagi','6 Bulan Lagi','1 Tahun Lagi','2 Tahun Lagi','3 Tahun Lagi','4 Tahun Lagi','5 Tahun Lagi','6 Tahun Lagi','1 Abad lagi','3 Hari Lagi']
					const koh = kapan[Math.floor(Math.random() * kapan.length)]
					client.sendMessage(from, 'Pertanyaan : *'+kapankah+'*\n\nJawaban : '+ koh, text, { quoted: mek })
					await limitAdd(sender)
					break
           case 'apakah':
           if (!isRegistered) return reply(ind.noregis())
           if (isLimit(sender)) return reply(ind.limitend(pusname))
					apakah = body.slice(1)
					const apa =['Iya','Tidak','Bisa Jadi','Coba Ulangi']
					const kah = apa[Math.floor(Math.random() * apa.length)]
					client.sendMessage(from, 'Pertanyaan : *'+apakah+'*\n\nJawaban : '+ kah, text, { quoted: mek })
					await limitAdd(sender)
					break
				const katailham = [
				'lu bacod anying\nKatailham'
				]
				case 'seberapagay':
		                if (!isRegistered) return reply(ind.noregis())
		                if (isLimit(sender)) return reply(ind.limitend(pusname))
					teks = body.slice(1)
		     		        anu = await fetchJson(`https://arugaz.herokuapp.com/api/howgay`, {method: 'get'})
	   		        	hasil = `Nih Liat Data Gay Si ${teks}\n\n\nPersentase Gay : ${res.data.persen}%\nAlert!!! : ${res.data.desc}`
		         	        reply(hasil)
				        await limitAdd(sender)
					break
				case 'hobby':
		                if (!isRegistered) return reply(ind.noregis())
		                if (isLimit(sender)) return reply(ind.limitend(pusname))
					hobby = body.slice(1)
					const hob =['Desah Di Game','Ngocokin Doi',`Jual Cewe`,`Sholat Bercandaan`,'Stalking sosmed nya mantan','Kau kan gak punya hobby awokawok','Memasak','Membantu Atok','Mabar','Nobar','Sosmedtan','Membantu Orang lain','Nonton Anime','Nonton Drakor','Naik Motor','Nyanyi','Menari','Bertumbuk','Menggambar','Foto fotoan Ga jelas','Maen Game','Berbicara Sendiri']
					const by = hob[Math.floor(Math.random() * hob.length)]
					client.sendMessage(from, 'Pertanyaan : *'+hobby+'*\n\nJawaban : '+ by, text, { quoted: mek })
					await limitAdd(sender)
					break
				case 'rate':
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
					rate = body.slice(1)
					const ra =['4','9','17','28','34','48','59','62','74','83','97','100','29','94','75','82','41','39']
					const te = ra[Math.floor(Math.random() * ra.length)]
					client.sendMessage(from, 'Pertanyaan : *'+rate+'*\n\nJawaban : '+ te+'%', text, { quoted: mek })
					await limitAdd(sender)
					break
          case 'ping':
          		if (!isRegistered) return reply(ind.noregis())
           		 await client.sendMessage(from, `Pong!!!!\nSpeed: ${processTime(time, moment())} _Second_`)
					break
               case 'help': 
				case 'menu':
				if (!isRegistered) return reply(ind.noregis())
				    const reqXp  = 5000 * (Math.pow(2, getLevelingLevel(sender)) - 1)
				    const uangku = checkATMuser(sender)
					await costum(ind.menu(pushname, prefix, getLevelingLevel, getLevelingXp, sender, reqXp, _registered, uangku, role), text, tescuk, cr)
					break
				case 'donasi':
				case 'donate':
				if (!isRegistered) return reply(ind.noregis())
					client.sendMessage(from, donasi(), text)
					break
                case 'level':
                if (!isRegistered) return reply(ind.noregis())
                if (!isLevelingOn) return reply(ind.lvlnoon())
                if (!isGroup) return reply(ind.groupo())
                const userLevel = getLevelingLevel(sender)
                const userXp = getLevelingXp(sender)
                if (userLevel === undefined && userXp === undefined) return reply(ind.lvlnul())
                const requiredXp = 5000 * (Math.pow(2, userLevel) - 1)
                resul = `‚îè‚îÅ‚îÅ‚ùâ *LEVEL AKUN* ‚ùâ‚îÅ‚îÅ\n‚î£‚ä± *Nama* : ${pushname}\n‚î£‚ä± Nomor : wa.me/${sender.split("@")[0]}\n‚î£‚ä± User XP :  ${userXp}/${requiredXp}\n‚î£‚ä± User Level : ${userLevel}\n‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`
               client.sendMessage(from, resul, text, { quoted: mek})
                .catch(async (err) => {
                        console.error(err)
                        await reply(`Error!\n${err}`)
                    })
					break
				case 'info':
					me = client.user
					uptime = process.uptime()
					teks = `*Nama bot* : ${me.name}\n*OWNER* : *’è·é™·è¶·ÇÆ·é°·é™*\n*AUTHOR* : ’è·é™·è¶·ÇÆ·é°·é™\n*Nomor Bot* : @${me.jid.split('@')[0]}\n*Prefix* : ${prefix}\n*Total Block Contact* : ${blocked.length}\n*BOT AKTIF SELAMA* : ${kyun(uptime)}`
					buffer = await getBuffer(me.imgUrl)
					client.sendMessage(from, buffer, image, {caption: teks, contextInfo:{mentionedJid: [me.jid]}})
					break
				case 'blocklist': 
					teks = 'ùóïùóüùó¢ùóñùóû ùóüùóúùó¶ùóß :\n'
					for (let block of blocked) {
						teks += `‚î£‚û¢ @${block.split('@')[0]}\n`
					}
					teks += `ùóßùóºùòÅùóÆùóπ : ${blocked.length}`
					client.sendMessage(from, teks.trim(), extendedText, {quoted: mek, contextInfo: {"mentionedJid": blocked}})
					break
                case 'hidetag':
                if (!isRegistered) return reply(ind.noregis())
                if (isLimit(sender)) return reply(ind.limitend(pusname))
					if (!isGroup) return reply(ind.groupo())
					if (!isGroupAdmins) return reply(ind.admin())
					var value = body.slice(9)
					var group = await client.groupMetadata(from)
					var member = group['participants']
					var mem = []
					member.map( async adm => {
					mem.push(adm.id.replace('c.us', 's.whatsapp.net'))
					})
					var options = {
					text: value,
					contextInfo: { mentionedJid: mem },
					quoted: mek
					}
					client.sendMessage(from, options, text)
					await limitAdd(sender)
					break
                case 'quotemaker':
                if (!isRegistered) return reply(ind.noregis())
                if (isLimit(sender)) return reply(ind.limitend(pusname))
                var gh = body.slice(12)
					var quote = gh.split("|")[0];
					var wm = gh.split("|")[1];
					const pref = `Usage: \n${prefix}quotemaker teks|watermark\n\nEx :\n${prefix}quotemaker ini contoh|bicit`
					if (args.length < 1) return reply(pref)
					reply(ind.wait())
					anu = await fetchJson(`https://terhambar.com/aw/qts/?kata=${quote}&author=${wm}&tipe=random`, {method: 'get'})
					buffer = await getBuffer(anu.result)
					client.sendMessage(from, buffer, image, {caption: 'Nih anjim', quoted: mek})
					await limitAdd(sender)
					break
                    case 'truth':
                if (!isRegistered) return reply(ind.noregis())
                if (isLimit(sender)) return reply(ind.limitend(pusname))
                const trut =['Pernah suka sama siapa aja? berapa lama?','Kalau boleh atau kalau mau, di gc/luar gc siapa yang akan kamu jadikan sahabat?(boleh beda/sma jenis)','apa ketakutan terbesar kamu?','pernah suka sama orang dan merasa orang itu suka sama kamu juga?','Siapa nama mantan pacar teman mu yang pernah kamu sukai diam diam?','pernah gak nyuri uang nyokap atau bokap? Alesanya?','hal yang bikin seneng pas lu lagi sedih apa','pernah cinta bertepuk sebelah tangan? kalo pernah sama siapa? rasanya gimana brou?','pernah jadi selingkuhan orang?','hal yang paling ditakutin','siapa orang yang paling berpengaruh kepada kehidupanmu','hal membanggakan apa yang kamu dapatkan di tahun ini','siapa orang yang bisa membuatmu sange','siapa orang yang pernah buatmu sange','(bgi yg muslim) pernah ga solat seharian?','Siapa yang paling mendekati tipe pasangan idealmu di sini','suka mabar(main bareng)sama siapa?','pernah nolak orang? alasannya kenapa?','Sebutkan kejadian yang bikin kamu sakit hati yang masih di inget','pencapaian yang udah didapet apa aja ditahun ini?','kebiasaan terburuk lo pas di sekolah apa?']
					const ttrth = trut[Math.floor(Math.random() * trut.length)]
					truteh = await getBuffer(`https://i.ibb.co/305yt26/bf84f20635dedd5dde31e7e5b6983ae9.jpg`)
					client.sendMessage(from, truteh, image, { caption: '*Truth*\n\n'+ ttrth, quoted: mek })
					await limitAdd(sender)
					break
				case 'dare':
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
				const dare =['Kirim pesan ke mantan kamu dan bilang "aku masih suka sama kamu','telfon crush/pacar sekarang dan ss ke pemain','pap ke salah satu anggota grup','Bilang "KAMU CANTIK BANGET NGGAK BOHONG" ke cowo','ss recent call whatsapp','drop emot "ü¶Ñüí®" setiap ngetik di gc/pc selama 1 hari','kirim voice note bilang can i call u baby?','drop kutipan lagu/quote, terus tag member yang cocok buat kutipan itu','pake foto sule sampe 3 hari','ketik pake bahasa daerah 24 jam','ganti nama menjadi "gue anak lucinta luna" selama 5 jam','chat ke kontak wa urutan sesuai %batre kamu, terus bilang ke dia "i lucky to hv you','prank chat mantan dan bilang " i love u, pgn balikan','record voice baca surah al-kautsar','bilang "i hv crush on you, mau jadi pacarku gak?" ke lawan jenis yang terakhir bgt kamu chat (serah di wa/tele), tunggu dia bales, kalo udah ss drop ke sini','sebutkan tipe pacar mu!','snap/post foto pacar/crush','teriak gajelas lalu kirim pake vn kesini','pap mukamu lalu kirim ke salah satu temanmu','kirim fotomu dengan caption, aku anak pungut','teriak pake kata kasar sambil vn trus kirim kesini','teriak " anjimm gabutt anjimmm " di depan rumah mu','ganti nama jadi " BOWO " selama 24 jam','Pura pura kerasukan, contoh : kerasukan maung, kerasukan belalang, kerasukan kulkas, dll']
					const der = dare[Math.floor(Math.random() * dare.length)]
					tod = await getBuffer(`https://i.ibb.co/305yt26/bf84f20635dedd5dde31e7e5b6983ae9.jpg`)
					client.sendMessage(from, tod, image, { quoted: mek, caption: '*Dare*\n\n'+ der })
					await limitAdd(sender)
					break				
				case 'ssweb':
                if (!isRegistered) return reply(ind.noregis())
                if (isLimit(sender)) return reply(ind.limitend(pusname))
                
					if (args.length < 1) return reply('Urlnya mana om')
					teks = body.slice(7)
					reply(ind.wait())
					anu = await fetchJson(`https://mnazria.herokuapp.com/api/screenshotweb?url=${teks}`)
					buff = await getBuffer(anu.gambar)
					client.sendMessage(from, buff, image, {quoted: mek})
					await limitAdd(sender)
					break
                case 'pokemon':
                if (!isRegistered) return reply(ind.noregis())
                if (isLimit(sender)) return reply(ind.limitend(pusname))
                   if (!isGroup) return reply(ind.groupo())
                   if (!isNsfw) return reply(ind.nsfwoff())
					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=pokemon`, {method: 'get'})
					reply(ind.wait())
					var n = JSON.parse(JSON.stringify(anu));
					var nimek =  n[Math.floor(Math.random() * n.length)];
					pok = await getBuffer(nimek)
					client.sendMessage(from, pok, image, { quoted: mek })
					await limitAdd(sender)
					break
                case 'anjing':
                if (!isRegistered) return reply(ind.noregis())
                if (isLimit(sender)) return reply(ind.limitend(pusname))
                   if (!isGroup) return reply(ind.groupo())
                   if (!isNsfw) return reply(ind.nsfwoff())
					anu = await fetchJson(`https://api.fdci.se/rep.php?gambar=anjing`, {method: 'get'})
					reply(ind.wait())
					var n = JSON.parse(JSON.stringify(anu));
					var nimek =  n[Math.floor(Math.random() * n.length)];
					pok = await getBuffer(nimek)
					client.sendMessage(from, pok, image, { quoted: mek })
					await limitAdd(sender)
					break
                     case 'ytmp4':
    		if (!isRegistered) return reply(ind.noregis())
                if (isLimit(sender)) return reply(ind.limitend(pusname))
					if (args.length < 1) return reply('Urlnya mana gan?')
					if (!isUrl(args[0]) && !args[0].includes('youtu.be')) return reply(ind.error.Iv)
					anu = await fetchJson(`https://api.vhtear.com/ytdl?link=${args[0]}&apikey=${apivhtear}`, {method: 'get'})
					if (anu.error) return reply(anu.error)
					ytt = `„Äå *YOUTUBE MP4 DOWNLOADER* „Äç\n\n‚Ä¢ Title : *${anu.result.title}*\n‚Ä¢ *Size:* ${anu.result.size}\n‚Ä¢ *Link:* https://www.youtu.be/${anu.result.id}\n\n Tunggu Sebentar 1 menit Mungkin Agak Lama Karna Mendownload Video`
					buff = await getBuffer(anu.result.imgUrl)
					reply(ind.wait)
					buffer = await getBuffer(anu.result.UrlVideo)
					client.sendMessage(from, buff, image, {quoted: mek, caption: ytt})
					client.sendMessage(from, buffer, video, {mimetype: 'video/mp4', filename: `${anu.result.title}.mp4`, quoted: mek, caption: 'Nih Anjim'})
					await limitAdd(sender) 
					break 
                case 'text3d':
                if (!isRegistered) return reply(ind.noregis())
                if (isLimit(sender)) return reply(ind.limitend(pusname))
              	    if (args.length < 1) return reply('teksnya mana kak?')
                    teks = `${body.slice(8)}`
                    if (teks.length > 10) return client.sendMessage(from, 'Teksnya kepanjangan, Maksimal 10 kalimat', text, {quoted: mek})
                    buff = await getBuffer(`https://docs-jojo.herokuapp.com/api/text3d?text=${teks}`, {method: 'get'})
                    reply('[‚ùó] Menunya Rusak')
		    client.sendMessage(from, buff, image, {quoted: mek, caption: `${teks}`})
			     	await limitAdd(sender)
					break
			    case 'fototiktok':
			if (!isRegistered) return reply(ind.noregis())
			if (isLimit(sender)) return reply(ind.limitend(pusname))
                    gatauda = body.slice(12)
                    anu = await fetchJson(`https://docs-jojo.herokuapp.com/api/tiktokpp?user=${gatauda}` , {method: 'get'})
			        buff = await getBuffer(anu.result)
                    reply(buff)
			        await limitAdd(sender)
					break
			    case 'map':
			if (!isRegistered) return reply(ind.noregis())
			if (isLimit(sender)) return reply(ind.limitend(pusname))
                anu = await fetchJson(`https://mnazria.herokuapp.com/api/maps?search=${body.slice(5)}`, {method: 'get'})
                buffer = await getBuffer(anu.gambar)
                client.sendMessage(from, buffer, image, {quoted: mek, caption: `${body.slice(5)}`})
				await limitAdd(sender)
					break
                case 'kbbi':
                if (!isRegistered) return reply(ind.noregis())
                if (isLimit(sender)) return reply(ind.limitend(pusname))
					if (args.length < 1) return reply('Apa yang mau dicari um?')
					anu = await fetchJson(`https://mnazria.herokuapp.com/api/kbbi?search=${body.slice(6)}`, {method: 'get'})
					reply('Menurut Kbbi:\n\n'+anu.result)
					await limitAdd(sender)
					break
                case 'artinama':
                if (!isRegistered) return reply(ind.noregis())
                if (isLimit(sender)) return reply(ind.limitend(pusname))
					if (args.length < 1) return reply('Apa yang mau dicari um?')
					anu = await fetchJson(`https://mnazria.herokuapp.com/api/arti?nama=${body.slice(10)}`, {method: 'get'})
					reply('Menurut nama:\n\n'+anu.result)
					await limitAdd(sender)
					break
				case 'ocr': 
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
				if ((isMedia && !mek.message.videoMessage || isQuotedImage) && args.length == 0) {
						const encmedia = isQuotedImage ? JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo : mek
						const media = await client.downloadAndSaveMediaMessage(encmedia)
						reply(ind.wait())
						await recognize(media, {lang: 'eng+ind', oem: 1, psm: 3})
							.then(teks => {
								reply(teks.trim())
								fs.unlinkSync(media)
							})
							.catch(err => {
								reply(err.message)
								fs.unlinkSync(media)
							})
					} else {
						reply('ùó∏ùó∂ùóøùó∂ùó∫ ùó≥ùóºùòÅùóº ùó±ùó≤ùóªùó¥ùóÆùóª ùó∞ùó≤ùóΩùòÅùó∂ùóºùóª ${prefix}ùóºùó∞ùóø')
					}
					await limitAdd(sender)
					break
				case 'stiker': 
				case 'sticker':
				case 's':
				    if (isLimit(sender)) return reply(ind.limitend(pusname))
                    await limitAdd(sender)
					if ((isMedia && !mek.message.videoMessage || isQuotedImage) && args.length == 0) {
						const encmedia = isQuotedImage ? JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo : mek
						const media = await client.downloadAndSaveMediaMessage(encmedia)
						ran = getRandom('.webp')
						await ffmpeg(`./${media}`)
							.input(media)
							.on('start', function (cmd) {
								console.log(`Started : ${cmd}`)
							})
							.on('error', function (err) {
								console.log(`Error : ${err}`)
								fs.unlinkSync(media)
								reply(ind.stikga())
							})
							.on('end', function () {
								console.log('Finish')
								buffer = fs.readFileSync(ran)
								client.sendMessage(from, buffer, sticker, {quoted: mek})
								fs.unlinkSync(media)
								fs.unlinkSync(ran)
							})
							.addOutputOptions([`-vcodec`,`libwebp`,`-vf`,`scale='min(320,iw)':min'(320,ih)':force_original_aspect_ratio=decrease,fps=15, pad=320:320:-1:-1:color=white@0.0, split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse`])
							.toFormat('webp')
							.save(ran)
					} else if ((isMedia && mek.message.videoMessage.seconds < 11 || isQuotedVideo && mek.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage.seconds < 11) && args.length == 0) {
						const encmedia = isQuotedVideo ? JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo : mek
						const media = await client.downloadAndSaveMediaMessage(encmedia)
						ran = getRandom('.webp')
						reply(ind.wait())
						await ffmpeg(`./${media}`)
							.inputFormat(media.split('.')[1])
							.on('start', function (cmd) {
								console.log(`Started : ${cmd}`)
							})
							.on('error', function (err) {
								console.log(`Error : ${err}`)
								fs.unlinkSync(media)
								tipe = media.endsWith('.mp4') ? 'video' : 'gif'
								reply(ind.stikga())
							})
							.on('end', function () {
								console.log('Finish')
								buffer = fs.readFileSync(ran)
								reply('*Here You Sticker~*')
								client.sendMessage(from, buffer, sticker, {quoted: mek})
								fs.unlinkSync(media)
								fs.unlinkSync(ran)
							})
							.addOutputOptions([`-vcodec`,`libwebp`,`-vf`,`scale='min(320,iw)':min'(320,ih)':force_original_aspect_ratio=decrease,fps=15, pad=320:320:-1:-1:color=white@0.0, split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse`])
							.toFormat('webp')
							.save(ran)
							} else {
						reply(`Kirim gambar dengan caption ${prefix}sticker atau reply/tag gambar`)
					}
					break
				case 'tts':
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
				if (args.length < 1) return client.sendMessage(from, 'Diperlukan kode bahasa!!', text, {quoted: mek})
					const gtts = require('./lib/gtts')(args[0])
					if (args.length < 2) return client.sendMessage(from, 'Textnya mana om', text, {quoted: mek})
					dtt = body.slice(8)
					ranm = getRandom('.mp3')
					rano = getRandom('.ogg')
					dtt.length > 600
					? reply('Textnya kebanyakan om')
					: gtts.save(ranm, dtt, function() {
						exec(`ffmpeg -i ${ranm} -ar 48000 -vn -c:a libopus ${rano}`, (err) => {
							fs.unlinkSync(ranm)
							buffer = fs.readFileSync(rano)
							if (err) return reply('Gagal om:(')
							client.sendMessage(from, buffer, audio, {quoted: mek, ptt:true})
							fs.unlinkSync(rano)
						})
					})
					await limitAdd(sender)
					break
				case 'setprefix':
					if (args.length < 1) return
					if (!isOwner) return reply(ind.ownerb())
                    prefix = args[0]
                    reply(`Ganti Prefix ${prefix} SUCCESS!`)
					break 
				case 'setmemlimit':
					if (args.length < 1) return
					if (!isOwner) return reply(ind.ownerb())
					if (isNaN(args[0])) return reply('limit harus angka')
                    memberlimit = args[0]
                    reply(`Mengubah Peraturan Member Menjadi ${memberlimit} SUCCESS!`)
					break 
				case 'tiktokstalk':
				if (!isRegistered) return reply(ind.noregis())
				if (isLimit(sender)) return reply(ind.limitend(pusname))
				try {
						if (args.length < 1) return client.sendMessage(from, 'ùòÇùòÄùó≤??ùóªùóÆùó∫ùó≤ ùó∫ùóÆùóªùóÆ ?', text, {quoted: mek})
						let { user, stats } = await tiktod.getUserProfileInfo(args[0])
						reply(ind.wait())
						teks = `*ID* : ${user.id}\n*Username* : ${user.uniqueId}\n*Nickname* : ${user.nickname}\n*Followers* : ${stats.followerCount}\n*Followings* : ${stats.followingCount}\n*Posts* : ${stats.videoCount}\n*Luv* : ${stats.heart}\n`
						buffer = await getBuffer(user.avatarLarger)
						client.sendMessage(from, buffer, image, {quoted: mek, caption: teks})
					} catch (e) {
						console.log(`Error :`, color(e,'red'))
						reply('[ùóòùó•ùó•ùó¢ùó•] ùó∏ùó≤ùó∫ùòÇùóªùó¥ùó∏ùó∂ùóªùóÆùóª ùòÇùòÄùó≤ùóøùóªùóÆùó∫ùó≤ ùòÅùó∂ùó±ùóÆùó∏ ùòÉùóÆùóπùó∂ùó±')
					}
					await limitAdd(sender)
					break
                 case 'linkgc':
				    if (!isGroup) return reply(ind.groupo())
				    if (isLimit(sender)) return reply(ind.limitend(pusname))
				    if (!isBotGroupAdmins) return reply(ind.badmin())
				    linkgc = await client.groupInviteCode (from)
				    yeh = `https://chat.whatsapp.com/${linkgc}\n\nlink Group *${groupName}*`
				    client.sendMessage(from, yeh, text, {quoted: mek})
			        await limitAdd(sender)
					break
				case 'ownergrup':
				  case 'ownergroup':
			               client.updatePresence(from, Presence.composing) 
			               options = {
			               text: `*Owner di Group ini adalah : @${from.split("-")[0]} Tadaaa*`,
			               contextInfo: { mentionedJid: [from] }
			               }
			               client.sendMessage(from, options, text, { quoted: mek } )
			     	       break
				case 'tagall':
					if (!isGroup) return reply(ind.groupo())
					if (!isGroupAdmins) return reply(ind.admin())
					members_id = []
					teks = (args.length > 1) ? body.slice(8).trim() : ''
					teks += '\n\n'
					for (let mem of groupMembers) {
						teks += ` ‚ùÆ *TAG ALL ’è·é™·è¶·ÇÆ·é°·é™ * ‚ùØ\n‚î£‚û• @${mem.jid.split('@')[0]}\n‚ïë`
						members_id.push(mem.jid)
					}
					mentions(teks, members_id, true)
					break
				case 'clearall':
					if (!isOwner) return reply(ind.ownerb())
					anu = await client.chats.all()
					client.setMaxListeners(25)
					for (let _ of anu) {
						client.deleteChat(_.jid)
					}
					reply(ind.clears())
					break
			       case 'block':
				 client.updatePresence(from, Presence.composing) 
				 client.chatRead (from)
					if (!isGroup) return reply(ind.groupo())
					if (!isOwner) return reply(ind.ownerb())
					client.blockUser (`${body.slice(7)}@c.us`, "add")
					client.sendMessage(from, `perintah Diterima, memblokir ${body.slice(7)}@c.us`, text)
					break
                    case 'unblock':
					if (!isGroup) return reply(ind.groupo())
					if (!isOwner) return reply(ind.ownerb())
				    client.blockUser (`${body.slice(9)}@c.us`, "remove")
					client.sendMessage(from, `*perintah diterima* , ùó∫ùó≤ùó∫ùóØùòÇùó∏ùóÆ block ${body.slice(9)}@c.us`, text)
					break
				case 'leave': 
				if (!isGroup) return reply(ind.groupo())
					if (!isOwner) return reply(ind.ownerb())
				await reply(from, 'bye').then(() => client.groupLeave(groupId))
					break
				case 'bc': 
					if (!isOwner) return reply(ind.ownerb()) 
					if (args.length < 1) return reply('.......')
					anu = await client.chats.all()
					if (isMedia && !mek.message.videoMessage || isQuotedImage) {
						const encmedia = isQuotedImage ? JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo : mek
						buff = await client.downloadMediaMessage(encmedia)
						for (let _ of anu) {
							client.sendMessage(_.jid, buff, image, {caption: `‚ùÆ *BROADCAST ’è·é™·è¶·ÇÆ·é°·é™ * ‚ùØ\n\n${body.slice(4)}`})
						}
						reply('ùô®ùô™ùôòùôòùôöùô®ùô® ùôóùôßùô§ùôñùôôùôòùôñùô®ùô© ')
					} else {
						for (let _ of anu) {
							sendMess(_.jid, `*„Äå BROADCAST BOT „Äç*\n\n${body.slice(4)}`)
						}
						reply('ùô®ùô™ùôòùôòùôöùô®ùô® ùôóùôßùô§ùôñùôôùôòùôñùô®ùô© ')
					}
					break
			   	case 'setpp': 
                        if (!isGroup) return reply(ind.groupo())
                       if (!isGroupAdmins) return reply(ind.admin())
                        if (!isBotGroupAdmins) return reply(ind.badmin())
                       media = await client.downloadAndSaveMediaMessage(mek)
                         await client.updateProfilePicture (from, media)
                        reply('*SUKSES MENGGANTI PP GRUP')
					break						
				case 'add':
					if (!isGroup) return reply(ind.groupo())
					if (!isGroupAdmins) return reply(ind.admin())
					if (!isBotGroupAdmins) return reply(ind.badmin())
					if (args.length < 1) return reply('Yang mau di add jin ya?')
					if (args[0].startsWith('08')) return reply('Gunakan kode negara mas')
					try {
						num = `${args[0].replace(/ /g, '')}@s.whatsapp.net`
						client.groupAdd(from, [num])
					} catch (e) {
						console.log('Error :', e)
						reply('Gagal menambahkan , Mungkin Abis left di grup')
					}
					break
					case 'grup':
					case 'group':
					if (!isGroup) return reply(ind.groupo())
					if (!isGroupAdmins) return reply(ind.admin())
					if (!isBotGroupAdmins) return reply(ind.badmin())
					if (args[0] === 'buka') {
					    reply(`*BERHASIL MEMBUKA GROUP*‚ùó`)
						client.groupSettingChange(from, GroupSettingChange.messageSend, false)
					} else if (args[0] === 'tutup') {
						reply(`*BERHASIL MENUTUP GROUP*‚ùó`)
						client.groupSettingChange(from, GroupSettingChange.messageSend, true)
					}
					break      
            case 'admin':
            case 'owner':
            case 'creator':
                  client.sendMessage(from, {displayname: "Jeff", vcard: vcard}, MessageType.contact, { quoted: mek})
                  client.sendMessage(from, 'Tuh kontak owner aku:), jangan spam atau ku block kamu‚ùó','save nomornya jan lupaüòâ',MessageType.text, { quoted: mek} )
					break    
           case 'setname':
                if (!isGroup) return reply(ind.groupo())
			    if (!isGroupAdmins) return reply(ind.admin())
				if (!isBotGroupAdmins) return reply(ind.badmin())
                client.groupUpdateSubject(from, `${body.slice(9)}`)
                client.sendMessage(from, 'Succes, Ganti Nama Grup', text, {quoted: mek})
					break
                case 'setdesc':
                if (!isGroup) return reply(ind.groupo())
			    if (!isGroupAdmins) return reply(ind.admin())
				if (!isBotGroupAdmins) return reply(ind.badmin())
                client.groupUpdateDescription(from, `${body.slice(9)}`)
                client.sendMessage(from, 'Succes, Ganti Deskripsi Grup', text, {quoted: mek})
					break
           case 'demote':
					if (!isGroup) return reply(ind.groupo())
					if (!isGroupAdmins) return reply(ind.admin())
					if (!isBotGroupAdmins) return reply(ind.badmin())
					if (mek.message.extendedTextMessage === undefined || mek.message.extendedTextMessage === null) return reply('ùóßùóÆùó¥ ùòÅùóÆùóøùó¥ùó≤ùòÅ ùòÜùóÆùóªùó¥ ùó∂ùóªùó¥ùó∂ùóª ùó±ùó∂ ùòÅùó≤ùóªùó±ùóÆùóªùó¥!')
					mentioned = mek.message.extendedTextMessage.contextInfo.mentionedJid
					if (mentioned.length > 1) {
						teks = ''
						for (let _ of mentioned) {
							teks += `*YAH GK JDI ADMIN LAGI MAKANYA JADI ADMIN JANGAN NAKAL*ü§£üëã :\n`
							teks += `@_.split('@')[0]`
						}
						mentions(teks, mentioned, true)
						client.groupDemoteAdmin(from, mentioned)
					} else {
						mentions(`*@${mentioned[0].split('@')[0]} YAH GK JDI ADMIN LAGI:)*`, mentioned, true)
						client.groupDemoteAdmin(from, mentioned)
					}
					break
				case 'promote':
					if (!isGroup) return reply(ind.groupo())
					if (!isGroupAdmins) return reply(ind.admin())
					if (!isBotGroupAdmins) return reply(ind.badmin())
					if (mek.message.extendedTextMessage === undefined || mek.message.extendedTextMessage === null) return reply('ùóßùóÆùó¥ ??ùóÆ??ùó¥ùó≤ùòÅ ùòÜùóÆùóªùó¥ ùó∂ùóªùó¥ùó∂ùóª ùó±ùó∂ ùòÅùó≤ùóªùó±ùóÆùóªùó¥!')
					mentioned = mek.message.extendedTextMessage.contextInfo.mentionedJid
					if (mentioned.length > 1) {
						teks = ''
						for (let _ of mentioned) {
							teks += `ùó¶ùó≤ùóπùóÆùó∫ùóÆùòÅü•≥ ùóÆùóªùó±ùóÆ ùóªùóÆùó∂ùó∏ ùó∫ùó≤ùóªùó∑ùóÆùó±ùó∂ ùóÆùó±ùó∫ùó∂ùóª ùó¥ùóøùóºùòÇùóΩ (+_+) :\n`
							teks += `@_.split('@')[0]`
						}
						mentions(teks, mentioned, true)
						client.groupMakeAdmin(from, mentioned)
					} else {
						mentions(`*SELAMAT @${mentioned[0].split('@')[0]} KAMU JADI ADMIN GRUP* ü•≥`, mentioned, true)
						client.groupMakeAdmin(from, mentioned)
					}
					break	
			     	case 'kick':
					if (!isGroup) return reply(ind.groupo())
					if (!isGroupAdmins) return reply(ind.admin())
					if (!isBotGroupAdmins) return reply(ind.badmin())
					if (mek.message.extendedTextMessage === undefined || mek.message.extendedTextMessage === null) return reply('ùóßùóÆùó¥ ùòÅùóÆùóøùó¥ùó≤ùòÅ ??ùóÆùóªùó¥ ùó∂ùóªùó¥ùó∂ùóª ùó±?? ùòÅùó≤ùóªùó±ùóÆùóªùó¥!')
					mentioned = mek.message.extendedTextMessage.contextInfo.mentionedJid
					if (mentioned.length > 1) {
						teks = ''
						for (let _ of mentioned) {
							teks += `ùóîùòÄùó≤ùó∏ ùó±ùóÆùóΩùóÆùòÅ ùó∫ùóÆùó∏ùóÆùóªùóÆùóª,ùóºùòÅùòÑ ùó∏ùó∂ùó∞ùó∏ üèÉ :\n`
							teks += `@_.split('@')[0]`
						}
						mentions(teks, mentioned, true)
						client.groupRemove(from, mentioned)
					} else {
						mentions(`*ASEEK BEBAN GRUP DI KICK* @${mentioned[0].split('@')[0]} üëã`, mentioned, true)
						client.groupRemove(from, mentioned)
					}
					break
				case 'listadmin':
					if (!isGroup) return reply(ind.groupo())
					teks = `ùóüùó∂ùòÄùòÅ ùóÆùó±ùó∫ùó∂ùóª ùóºùó≥ ùó¥ùóøùóºùòÇùóΩ *${groupMetadata.subject}*\nùóßùóºùòÅùóÆùóπ : ${groupAdmins.length}\n\n`
					no = 0
					for (let admon of groupAdmins) {
						no += 1
						teks += `[${no.toString()}] @${admon.split('@')[0]}\n`
					}
					mentions(teks, groupAdmins, true)
					break
				case 'toimg':
				if (!isRegistered) return reply(ind.noregis())
				if (!isQuotedSticker) return reply('ùó•ùó≤ùóΩùóπùòÜ/ùòÅùóÆùó¥ ùòÄùòÅùó∂ùó∞ùó∏ùó≤ùóø !')
					reply(ind.wait())
					encmedia = JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo
					media = await client.downloadAndSaveMediaMessage(encmedia)
					ran = getRandom('.png')
					exec(`ffmpeg -i ${media} ${ran}`, (err) => {
						fs.unlinkSync(media)
						if (err) return reply(ind.stikga())
						buffer = fs.readFileSync(ran)
						client.sendMessage(from, buffer, image, {quoted: mek, caption: '*Udah Jadi Nih*'})
						fs.unlinkSync(ran)
					})
					await limitAdd(sender)
					break
                 case 'simi':
					if (args.length < 1) return reply('Textnya mana um?')
					teks = body.slice(5)
					anu = await simih(teks) //fetchJson(`https://mhankbarbars.herokuapp.com/api/samisami?text=${teks}`, {method: 'get'})
					//if (anu.error) return reply('Simi ga tau kak')
					reply(anu)
					break
				case 'simih':
					if (!isGroup) return reply(ind.groupo())
					if (!isGroupAdmins) return reply(ind.admin())
					if (args.length < 1) return reply(':v')
					if (Number(args[0]) === 1) {
						if (isSimi) return reply('ùòÄùòÇùó±ùóÆùóµ ùóÆùó∏ùòÅùó∂ùó≥‚ùó')
						samih.push(from)
						fs.writeFileSync('./database/bot/simi.json', JSON.stringify(samih))
						reply('*‚ù¨ ùó¶ùó®ùóûùó¶ùóòùó¶ ‚ù≠ Mengaktifkan Fitur Simih‚ùó*')
					} else if (Number(args[0]) === 0) {
						samih.splice(from, 1)
						fs.writeFileSync('./database/bot/simi.json', JSON.stringify(samih))
						reply('‚ù¨ * SUKES* ‚ù≠ ùó†ùó≤ùóªùóºùóªùóÆùó∏ùòÅùó∂ùó≥ùó∏ùóÆùóª ùó≥ùó∂ùòÅùòÇùóø ùòÄùó∂ùó∫ùó∂ ùó±ùó∂ ùó¥ùóøùóºùòÇùóΩ ùó∂ùóªùó∂Ô∏èÔ∏è‚ùó')
					} else {
						reply(ind.satukos())
					}
					break
				case 'nsfw':
					if (!isGroup) return reply(ind.groupo())
					if (!isGroupAdmins) return reply(ind.admin())
					if (args.length < 1) return reply(':D')
					if (Number(args[0]) === 1) {
						if (isNsfw) return reply(' *sudah aktif*‚ùó')
						nsfw.push(from)
						fs.writeFileSync('./database/bot/nsfw.json', JSON.stringify(nsfw))
						reply('‚ù¨ ùó¶ùó®ùóûùó¶ùóòùó¶ ‚ù≠ ùó†ùó≤ùóªùó¥ùóÆùó∏ùòÅùó∂ùó≥ùó∏ùóÆùóª ùó≥ùó∂ùòÅùòÇùóø ùóªùòÄùó≥ùòÑ ùó±ùó∂ ùó¥ùóøùóºùòÇùóΩ ùó∂ùóªùó∂‚ùó')
					} else if (Number(args[0]) === 0) {
						nsfw.splice(from, 1)
						fs.writeFileSync('./database/bot/nsfw.json', JSON.stringify(nsfw))
						reply('‚ù¨ ùó¶ùó®ùóûùó¶ùóòùó¶ ‚ù≠ ùó†ùó≤ùóªùóºùóªùóÆùó∏ùòÅùó∂ùó≥ùó∏ùóÆùóª ùó≥ùó∂ùòÅùòÇùóø ùóªùòÄùó≥ùòÑ ùó±ùó∂ ùó¥ùóøùóºùòÇùóΩ ùó∂ùóªùó∂Ô∏è‚ùó')
					} else {
						reply(ind.satukos())
					}
					break
                case 'leveling':
                if (!isGroup) return reply(ind.groupo())
                if (!isGroupAdmins) return reply(ind.admin())
                if (args.length < 1) return reply(':D')
                if (args[0] === 'enable') {
                    if (isLevelingOn) return reply('*fitur level sudah aktif sebelum nya‚ùó*')
                    _leveling.push(from)
                    fs.writeFileSync('./database/group/leveling.json', JSON.stringify(_leveling))
                     reply(ind.lvlon())
                } else if (args[0] === 'disable') {
                    _leveling.splice(from, 1)
                    fs.writeFileSync('./database/group/leveling.json', JSON.stringify(_leveling))
                     reply(ind.lvloff())
                } else {
                    reply(ind.satukos())
                }
					break
                 case 'block':
					client.updatePresence(from, Presence.composing) 
					if (!isGroup) return reply(ind.groupo())
					if (!isOwner) return reply(ind.ownerb())
					client.blockUser (`${body.slice(8)}@c.us`, "add")
					client.sendMessage(from, `perintah Diterima, memblokir wa.me${body.slice(8)}@c.us`, text)
					break
				case 'unblock':
					client.updatePresence(from, Presence.composing) 
					if (!isGroup) return reply(ind.group())
					if (!isOwner) return reply(ind.ownerb())
					client.blockUser (`${body.slice(10)}@c.us`, "remove")
					client.sendMessage(from, `perintah Diterima, membuka blokir wa.me/${body.slice(10)}`, text)
					break
				case 'welcome':
					if (!isGroup) return reply(ind.groupo())
					if (!isGroupAdmins) return reply(ind.admin())
					if (args.length < 1) return reply(':D')
					if (Number(args[0]) === 1) {
						if (isWelkom) return reply('*SUDAH AKTIF*‚ùó')
						welkom.push(from)
						fs.writeFileSync('./database/bot/welkom.json', JSON.stringify(welkom))
						reply('‚ù¨ ùó¶ùó®ùóûùó¶ùóòùó¶ ‚ù≠ ùó†ùó≤ùóªùó¥ùóÆùó∏ùòÅùó∂ùó≥ùó∏ùóÆùóª ùó≥ùó∂ùòÅùòÇùóø ùòÑùó≤ùóπùó∞ùóºùó∫ùó≤/ùóπùó≤ùó≥ùòÅ ùó±ùó∂ ùó¥ùóøùóºùòÇùóΩ ùó∂ùóªùó∂Ô∏è‚úî')
					} else if (Number(args[0]) === 0) {
						welkom.splice(from, 1)
						fs.writeFileSync('./database/bot/welkom.json', JSON.stringify(welkom))
						reply('‚ù¨ ùó¶ùó®ùóûùó¶ùóòùó¶ ‚ù≠ ùó†ùó≤ùóªùóºùóªùóÆùó∏ùòÅùó∂ùó≥ùó∏ùóÆùóª ùó≥ùó∂ùòÅùòÇùóø ùòÑùó≤ùóπùó∞ùóºùó∫ùó≤/ùóπùó≤ùó≥ùòÅ ùó±ùó∂ ùó¥ùóøùóºùòÇùóΩ ùó∂ùóªùó∂Ô∏è‚úî')
					} else {
						reply(ind.satukos())
					}
					break
                 case 'event':
					if (!isGroup) return reply(ind.groupo())
					if (!isOwner) return reply(ind.ownerb())
					if (args.length < 1) return reply(':D')
					if (Number(args[0]) === 1) {
						if (isEventon) return reply('*SUDAH AKTIF*‚ùó')
						event.push(from)
						fs.writeFileSync('./database/bot/event.json', JSON.stringify(event))
						reply('*‚ù¨ ùó¶ùó®ùóûùó¶ùóòùó¶ ‚ù≠ ùó†ùó≤ùóªùó¥ùóÆùó∏ùòÅùó∂ùó≥ùó∏ùóÆùóª EVENT ùó±ùó∂ ùó¥ùóøùóºùòÇùóΩ ùó∂ùóªùó∂Ô∏è*‚úîÔ∏è')
					} else if (Number(args[0]) === 0) {
						event.splice(from, 1)
						fs.writeFileSync('./database/bot/event.json', JSON.stringify(event))
						reply('*‚ù¨ ùó¶ùó®ùóûùó¶ùóòùó¶ ‚ù≠ Menonaktifkan EVENN Di Group ini‚úîÔ∏è')
					} else {
						reply(ind.satukos())
					}
					break
				case 'clone':
					if (!isGroup) return reply(ind.groupo())
					if (!isOwner) return reply(ind.ownerg()) 
					if (args.length < 1) return reply(' *TAG YANG MAU DI CLONE!!!* ')
					if (mek.message.extendedTextMessage === undefined || mek.message.extendedTextMessage === null) return reply('Tag cvk')
					mentioned = mek.message.extendedTextMessage.contextInfo.mentionedJid[0]
					let { jid, id, notify } = groupMembers.find(x => x.jid === mentioned)
					try {
						pp = await client.getProfilePicture(id)
						buffer = await getBuffer(pp)
						client.updateProfilePicture(botNumber, buffer)
						mentions(`Foto profile Berhasil di perbarui menggunakan foto profile @${id.split('@')[0]}`, [jid], true)
					} catch (e) {
						reply(ind.stikga())
					}
					await limitAdd(sender)
					break
				case 'wait':
					if ((isMedia && !mek.message.videoMessage || isQuotedImage) && args.length == 0) {
						reply(ind.wait())
						const encmedia = isQuotedImage ? JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo : mek
						media = await client.downloadMediaMessage(encmedia)
						await wait(media).then(res => {
							client.sendMessage(from, res.video, video, {quoted: mek, caption: res.teks.trim()})
						}).catch(err => {
							reply(err)
						})
					} else {
						reply(ind.ocron())
					}
					await limitAdd(sender)
					break
				default:
			if (body.startsWith(`${prefix}${command}`)) {

                  reply(`*${pushname}*, Command *${prefix}${command}* Tidak Ada Di Dalam *${prefix}menu Bot ’è·é™·è¶·ÇÆ·é°·é™ !*`)
		const none = fs.readFileSync('./assets/none');
		client.sendMessage(from, none, MessageType.audio, {quoted: mek, mimetype: 'audio/mp4', ptt:true})
		
                  }
			if (isGroup && !isCmd && isSimi && budy != undefined) {
						console.log(budy)
						muehe = await simih(budy)
						reply(ind.cmdnf(prefix, command))
					} else {
						console.log(color('[ERROR]','red'), 'Unregistered Command from', color(sender.split('@')[0]))
					}
					}
		} catch (e) {
			console.log('Error : %s', color(e, 'red'))
		}
	})
